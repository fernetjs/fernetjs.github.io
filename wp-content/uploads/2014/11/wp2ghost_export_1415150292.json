{"data":{"posts":[{"id":2,"title":"About","slug":"about","markdown":"\n**Qu\u00e9 cosa existe que un poco de fernet y javascript no pueda solucionar??** Bueno... en fernetjs tratamos de explotar eso, en comunidad, donde no existen expertos, donde no somos m\u00e1s que personas que tratan de juntarse, pasarla bien, conocerse, experimentar y aprender javascript. Esperamos que aprovechen el sitio, se puedan unir a este grupo de entusiastas y que nos conozcamos en algunas de nuestras reuniones. Para novedades y algunas noticias, [seguinos en twitter!!](http:\/\/twitter.com\/fernetjs \"fernetjs en twitter!\")\n","html":"<strong>Qu\u00e9 cosa existe que un poco de fernet y javascript no pueda solucionar??<\/strong>\r\n\r\nBueno... en fernetjs tratamos de explotar eso, en comunidad, donde no existen expertos, donde no somos m\u00e1s que personas que tratan de juntarse, pasarla bien, conocerse, experimentar y aprender javascript. \r\n\r\nEsperamos que aprovechen el sitio, se puedan unir a este grupo de entusiastas y que nos conozcamos en algunas de nuestras reuniones.\r\n\r\nPara novedades y algunas noticias, <a href=\"http:\/\/twitter.com\/fernetjs\" title=\"fernetjs en twitter!\">seguinos en twitter!!<\/a>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 18 Oct 2011 03:15:59 +0000","created_by":1,"updated_at":"Sat, 24 Nov 2012 11:24:23 +0000","updated_by":1,"published_at":"Tue, 18 Oct 2011 03:15:59 +0000","published_by":1},{"id":8,"title":"Introducci\u00f3n","slug":"introduccion","markdown":"\n***Que es el DOM?****Document Object Model: Modelo de Objetos del Documento HTML, piensenlo como que cada tag de HTML se encuentra como una instancia en memoria del explorador. Es la representacion de todo nuestro HTML en objetos en memoria, asi es como los podemos utilizar y modificarles el estado desde javascript. De ahi vienen las clasicas malas experiencias con javascript, lo usamos para modificar el estado del DOM, haciendo \"scripting\" (peque\u00f1os algoritmos) para animar algo o darle mejor experiencia al usuario. El problema de esto es que el explorador necesita \"refrescar\" la representacion de nuestro DOM, cada vez que cambiamos un estado causamos lo que se llama un Re-Flow y todo esto lleva tiempo de ejecucion, uso de memoria y malas experiencias.* \u00a0\n","html":"<strong><em>Que es el DOM?<\/em><\/strong>\r\n<em>Document Object Model: Modelo de Objetos del Documento HTML, piensenlo como que cada tag de HTML se encuentra como una instancia en memoria del explorador. Es la representacion de todo nuestro HTML en objetos en memoria, asi es como los podemos utilizar y modificarles el estado desde javascript. De ahi vienen las clasicas malas experiencias con javascript, lo usamos para modificar el estado del DOM, haciendo \"scripting\" (peque\u00f1os algoritmos) para animar algo o darle mejor experiencia al usuario. El problema de esto es que el explorador necesita \"refrescar\" la representacion de nuestro DOM, cada vez que cambiamos un estado causamos lo que se llama un Re-Flow y todo esto lleva tiempo de ejecucion, uso de memoria y malas experiencias.<\/em>\r\n\r\n&nbsp;","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Fri, 21 Oct 2011 23:24:48 +0000","created_by":1,"updated_at":"Sun, 08 Apr 2012 10:56:54 +0000","updated_by":1,"published_at":"Fri, 21 Oct 2011 23:24:48 +0000","published_by":1},{"id":20,"title":"Declaraci\u00f3n de Variables y Booleanos","slug":"declaracion-de-variables-y-booleanos","markdown":"\n[js] var foo = true; \/\/var nombre = valor ; [\/js] Hay que tener en cuenta que *var* declara una variable en el alcance actual, esto significa quepodemos declarar la variable como *foo = true;* sin el *var* y va a funcionar igual, pero de esta manera lo estamos haciendo Global. Mi recomendacion es utilizar el var SIEMPRE hasta que entiendan muy bien cual es la diferencia, por el momento vamos a decir que las varibles se declaran con *var*. Espacios en blanco: en Javascript el fin de la instruccion es definido con *;* por lo que podemos declarar [js] var foo = true ; \/\/ \u00f3 var foo=true; \/\/ \u00f3 var foo = true ; [\/js] van a funcionar de la misma manera, no siendo asi: [js] varfoo = true; [\/js] ya que de esta manera estamos perdiendo el \"var\", pero javascript va a funcionar igual, como dije antes el var no es obligatorio por lo que vamos a estar declarando una variable global llamada varfoo con valor true. Multiples declaraciones en la misma sentencia [js]var foo = true, baz = false;[\/js]  Podemos realizar mas de una declaracion en la misma sentencia comenzando con var y separando las declaraciones con , Tambien podemos tenerlas en diferentes lineas, como dije antes, los espacios en blanco no son un problema para javascript siempre y cuando terminemos la sentencia con ; [js]var foo = true, baz = false;[\/js] En este caso ambas variables van a ser declaradas como var, pero tengan cuidado porque si me olvido la \",\" todo cambia: [js highlight=\"1\"]var foo = true baz = false;[\/js] En este caso es probable que no funcione o bien que est\u00e9 declarando la primer variable con var y la segunda sin var. Pero por qu\u00e9?, bueno en muchos casos javascript \"agrega\" a su gusto cuando cree que nos equivocamos, es decir, nos puede agregar solito ; al final de la primer sentencia pensando que ahi deberia ir, un ejemplo comun es: [js]var foo = 'Hola'; return foo;[\/js] en este caso nos puede pasar que en ves de retornar la variable foo, simplente realize el return, porque nos agrego el \";\", lo que sucede es: [js]var foo = 'Hola'; return ; \/\/ ; agregado por el javascript foo;[\/js] Asi que fijarse bien cuando declaramos variables, porque tranquilamente no falla nada y sin embargo no se esta comportando como lo esperamos. Las variables apuntan a un valor [js]var foo = true; \/\/... foo = false;[\/js] Las variables en javascript apuntan a un valor, no es que le cambiamos el estado a la memoria, sino que cambiamos a donde apuntan. En el ejemplo vemos que declaramos una variable foo con valor true y mas tarde le asignamos false, bueno lo que hicimos fue primero apuntar foo a true y luego apuntamos foo a false.\n\n\n","html":"[js]\r\nvar foo = true;\r\n\/\/var nombre = valor ;\r\n[\/js]\r\n\r\nHay que tener en cuenta que <em>var<\/em> declara una variable en el alcance actual, esto significa quepodemos declarar la variable como <em>foo = true;<\/em> sin el <em>var<\/em> y va a funcionar igual, pero de esta manera lo estamos haciendo Global. Mi recomendacion es utilizar el var SIEMPRE hasta que entiendan muy bien cual es la diferencia, por el momento vamos a decir que las varibles se declaran con <em>var<\/em>.\r\n\r\nEspacios en blanco: en Javascript el fin de la instruccion es definido con <em>;<\/em> por lo que podemos declarar\r\n\r\n[js]\r\nvar     foo         =      true        ;\r\n\/\/ \u00f3\r\nvar foo=true;\r\n\/\/ \u00f3\r\nvar foo = true ;\r\n[\/js]\r\n\r\nvan a funcionar de la misma manera, no siendo asi:\r\n\r\n[js]\r\nvarfoo = true;\r\n[\/js]\r\n\r\nya que de esta manera estamos perdiendo el \"var\", pero javascript va a funcionar igual, como dije antes el var no es obligatorio por lo que vamos a estar declarando una variable global llamada varfoo con valor true.\r\nMultiples declaraciones en la misma sentencia\r\n\r\n[js]var foo = true, baz = false;[\/js]\r\n<!--more-->\r\nPodemos realizar mas de una declaracion en la misma sentencia comenzando con var y separando las declaraciones con ,\r\nTambien podemos tenerlas en diferentes lineas, como dije antes, los espacios en blanco no son un\r\nproblema para javascript siempre y cuando terminemos la sentencia con ;\r\n\r\n[js]var foo = true,\r\n    baz = false;[\/js]\r\n\r\nEn este caso ambas variables van a ser declaradas como var, pero tengan cuidado porque si me olvido la\r\n\",\" todo cambia:\r\n\r\n[js highlight=\"1\"]var foo = true\r\n    baz = false;[\/js]\r\n\r\nEn este caso es probable que no funcione o bien que est\u00e9 declarando la primer variable con var y\r\nla segunda sin var. Pero por qu\u00e9?, bueno en muchos casos javascript \"agrega\" a su gusto cuando\r\ncree que nos equivocamos, es decir, nos puede agregar solito ; al final de la primer sentencia\r\npensando que ahi deberia ir, un ejemplo comun es:\r\n\r\n[js]var foo = 'Hola';\r\n\r\nreturn\r\nfoo;[\/js]\r\n\r\nen este caso nos puede pasar que en ves de retornar la variable foo, simplente realize el return,\r\nporque nos agrego el \";\", lo que sucede es:\r\n\r\n[js]var foo = 'Hola';\r\n\r\nreturn ; \/\/ ; agregado por el javascript\r\nfoo;[\/js]\r\n\r\nAsi que fijarse bien cuando declaramos variables, porque tranquilamente no falla nada y sin embargo\r\nno se esta comportando como lo esperamos.\r\n\r\nLas variables apuntan a un valor\r\n\r\n[js]var foo = true;\r\n\/\/...\r\nfoo = false;[\/js]\r\n\r\nLas variables en javascript apuntan a un valor, no es que le cambiamos el estado a la memoria, sino que cambiamos a donde apuntan. En el ejemplo vemos que declaramos una variable foo con valor true y mas tarde le asignamos false, bueno lo que hicimos fue primero apuntar foo a true y luego apuntamos foo a false.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Sat, 22 Oct 2011 00:18:48 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 20:05:19 +0000","updated_by":1,"published_at":"Sat, 22 Oct 2011 00:18:48 +0000","published_by":1},{"id":53,"title":"Diferencia entre dos Fechas en A\u00f1os y Meses","slug":"diferencia-entre-dos-fechas-en-anos-y-meses","markdown":"\nDespues de mucho buscar por internet, termin\u00e9 \"mergeando\" varios conceptos para lograr resolver la diferencia entre dos fechas coloquialmente en A\u00f1os y Meses con javascript y esto es lo que qued\u00f3: <iframe src=\"http:\/\/jsfiddle.net\/pjnovas\/qpavM\/embedded\/\" style=\" height: 300px; width: 100%;\"><\/iframe> Hope it helps! ;)\n\n\n","html":"Despues de mucho buscar por internet, termin\u00e9 \"mergeando\" varios conceptos para lograr resolver la diferencia entre dos fechas coloquialmente en A\u00f1os y Meses con javascript y esto es lo que qued\u00f3:\r\n\r\n<iframe style=\" height: 300px; width: 100%;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/qpavM\/embedded\/\"><\/iframe>\r\n\r\nHope it helps! ;)","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Sat, 22 Oct 2011 00:27:57 +0000","created_by":1,"updated_at":"Fri, 18 Nov 2011 00:13:37 +0000","updated_by":1,"published_at":"Sat, 22 Oct 2011 00:27:57 +0000","published_by":1},{"id":61,"title":"jQuery Plugin - Month Picker","slug":"jquery-plugin-month-picker","markdown":"\nPlugin jQuery para seleccion de Meses y A\u00f1os. [https:\/\/github.com\/pjnovas\/MonthPicker](https:\/\/github.com\/pjnovas\/MonthPicker \"GitHub: Month Picker\") Las cr\u00edticas, comentarios y Forks son mas que bienvenidos.\n\n\n","html":"Plugin jQuery para seleccion de Meses y A\u00f1os.\r\n\r\n<a title=\"GitHub: Month Picker\" href=\"https:\/\/github.com\/pjnovas\/MonthPicker\" target=\"_blank\">https:\/\/github.com\/pjnovas\/MonthPicker<\/a>\r\n\r\nLas cr\u00edticas, comentarios y Forks son mas que bienvenidos.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Sat, 22 Oct 2011 00:44:14 +0000","created_by":1,"updated_at":"Fri, 02 Mar 2012 11:00:38 +0000","updated_by":1,"published_at":"Sat, 22 Oct 2011 00:44:14 +0000","published_by":1},{"id":70,"title":"Abajo el alert, arriba el console.log!","slug":"abajo-el-alert-arriba-el-console-log","markdown":"\nHace ya un tiempo que venimos utilizando los add-ons de los explorers ya sea para inspeccionar el HTML, el CSS, debuggear javascript o hacer pruebas en la consola. Lo cierto es que tienen mucho mas poder del que, por lo menos yo, conozco. Conocer el estado de variables o utilizar en modo \"log\" disparando alert() desde javascript puede ser bastante pesado. Vamos a ver como utilizar el console.log(); y evitar el alert() ... Para los que no lo utilizan la consola, tenemos distintas opciones para abrirla:\n\n- \u00a0\u00a0\u00a0 IE (desde el 7) presionar F12\n- \u00a0\u00a0\u00a0 Mozilla, luego de agregar el Add-on [FireBug](http:\/\/getfirebug.com\/ \"FireBug\"), presionar F12\n- \u00a0\u00a0 Chrome presionar F12\n\n Luego de tener abierta la consola es bastante simple ... lo que hacemos es escribir en nuestro javascript console.log('texto a la consola'); <iframe height=\"240\" src=\"http:\/\/jsfiddle.net\/pjnovas\/bvgvd\/embedded\/\" style=\"width: 100%; height: 75px;\" width=\"320\"><\/iframe> Simplemente abran la consola, comprueben que esten parados en el tab **Console** y ejecuten el jsFiddle. Podr\u00e1n ver que se logea el mensaje.\n","html":"Hace ya un tiempo que venimos utilizando los add-ons de los explorers ya sea para inspeccionar el HTML, el CSS, debuggear javascript o hacer pruebas en la consola. Lo cierto es que tienen mucho mas poder del que, por lo menos yo, conozco.\r\n\r\nConocer el estado de variables o utilizar en modo \"log\" disparando alert() desde javascript puede ser bastante pesado.\r\n\r\nVamos a ver como utilizar el console.log(); y evitar el alert() ...\r\n\r\nPara los que no lo utilizan la consola, tenemos distintas opciones para abrirla:\r\n<ul>\r\n\t<li>\u00a0\u00a0\u00a0 IE (desde el 7) presionar F12<\/li>\r\n\t<li>\u00a0\u00a0\u00a0 Mozilla, luego de agregar el Add-on <a title=\"FireBug\" href=\"http:\/\/getfirebug.com\/\" target=\"_blank\">FireBug<\/a>, presionar F12<\/li>\r\n\t<li>\u00a0\u00a0 Chrome presionar F12<\/li>\r\n<\/ul>\r\n<!--more-->\r\nLuego de tener abierta la consola es bastante simple ... lo que hacemos es escribir en nuestro javascript console.log('texto a la consola');\r\n\r\n<iframe style=\"width: 100%; height: 75px;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/bvgvd\/embedded\/\" width=\"320\" height=\"240\"><\/iframe>\r\n\r\nSimplemente abran la consola, comprueben que esten parados en el tab <strong>Console<\/strong> y ejecuten el jsFiddle. Podr\u00e1n ver que se logea el mensaje.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Sat, 22 Oct 2011 01:09:59 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 20:04:33 +0000","updated_by":1,"published_at":"Sat, 22 Oct 2011 01:09:59 +0000","published_by":1},{"id":80,"title":"Usando for each con Arrays","slug":"usando-for-each-con-arrays","markdown":"\nEscribamos un poco de codigo para recorrer nuestro nuevo array con un *for .. in*: [js]var arr = []; arr[1] = 'chau'; arr[2] = 'hola'; for (var ele in arr) { \/\/1era iteraci\u00f3n: ele === 1 \/\/2da iteraci\u00f3n: ele === 2 \/\/demas iteraciones: metodos y propiedades del array. }[\/js] Suponiendo que esperamos recorrer cada elemento del array y utilizar su valor, por qu\u00e9 el c\u00f3digo anterior no funciona como esperamos? El *for each* en javascript itera enumerando las propiedades de un objeto, pero por qu\u00e9 nos devuelve cada index en vez de su contenido? En javascript cada objeto es realmente un array de propiedades, por ejemplo:  [js]var persona = { nombre : 'Pepe', edad: 25 }; if (persona.nombre === persona['nombre']) console.log('loco, no?');[\/js] y si ahora hacemos: [js]for (var p in persona){ \/\/1er iteraci\u00f3n: p === 'nombre' \/\/2da iteraci\u00f3n: p === 'edad' }[\/js] Pero esto no es lo \u00fanico que deberiamos tener en cuenta, tambien est\u00e1 el caso donde prototipamos el Array: [js]Array.prototype.unMetodoNuevo = function(){ alert('nuevo metodo');}; var arr = []; for (var ele in arr){ \/\/iteraciones: metodos y propiedades del array. \/\/ultima iteraci\u00f3n: ele ser\u00e1 la function unMetodoNuevo }[\/js] Ese es un problema porque no es lo que estamos esperando, queremos que itere sobre los elementos del array, no sus propiedades. El punto es que nunca estamos seguros si alguna libreria que estemos usando prototip\u00f3 el Array (por ej. MooTools realiza prototypes de Array internamente). Mi recomendaci\u00f3n, entendiendo como se comportan los arreglos y el *for..in* en javascript, es utlizar el for loop cuando realicemos iteraciones sobre un array: [js]var arr = []; arr[1] = 'hola'; arr[2] = 'chau'; for (var i=0; i < arr.length; i++){ \/\/i === 0: arr[0] === undefined; \u00a0\/\/i === 1: arr[1] === 'hola'; \/\/i === 2: arr[2] === 'chau'; }[\/js] De esta manera leemos el array de una forma segura y evitando comportamientos inesperados. Les dejo un [jsFiddle](http:\/\/jsfiddle.net\/pjnovas\/dLRtW\/ \"Usando for each con Arrays\") para que prueben los casos e intenten nuevas cosas.\n\n\n","html":"Escribamos un poco de codigo para recorrer nuestro nuevo array con un <em>for .. in<\/em>:\r\n\r\n[js]var arr = [];\r\narr[1] = 'chau';\r\narr[2] = 'hola';\r\n\r\nfor (var ele in arr) {\r\n    \/\/1era iteraci\u00f3n: ele === 1\r\n    \/\/2da iteraci\u00f3n: ele === 2\r\n    \/\/demas iteraciones: metodos y propiedades del array.\r\n}[\/js]\r\n\r\nSuponiendo que esperamos recorrer cada elemento del array y utilizar su valor, por qu\u00e9 el c\u00f3digo anterior no funciona como esperamos?\r\nEl <em>for each<\/em> en javascript itera enumerando las propiedades de un objeto, pero por qu\u00e9 nos devuelve cada index en vez de su contenido?\r\nEn javascript cada objeto es realmente un array de propiedades, por ejemplo:\r\n<!--more-->\r\n[js]var persona = {\r\n    nombre : 'Pepe',\r\n    edad: 25\r\n};\r\n\r\nif (persona.nombre === persona['nombre'])\r\n   console.log('loco, no?');[\/js]\r\n\r\ny si ahora hacemos:\r\n\r\n[js]for (var p in persona){\r\n    \/\/1er iteraci\u00f3n: p === 'nombre'\r\n    \/\/2da iteraci\u00f3n: p === 'edad'\r\n}[\/js]\r\n\r\nPero esto no es lo \u00fanico que deberiamos tener en cuenta, tambien est\u00e1 el caso donde prototipamos el Array:\r\n\r\n[js]Array.prototype.unMetodoNuevo = function(){ alert('nuevo metodo');};\r\nvar arr = [];\r\n\r\nfor (var ele in arr){\r\n    \/\/iteraciones: metodos y propiedades del array.\r\n    \/\/ultima iteraci\u00f3n: ele ser\u00e1 la function unMetodoNuevo\r\n}[\/js]\r\n\r\nEse es un problema porque no es lo que estamos esperando, queremos que itere sobre los elementos del array, no sus propiedades.\r\nEl punto es que nunca estamos seguros si alguna libreria que estemos usando prototip\u00f3 el Array (por ej. MooTools realiza prototypes de Array internamente).\r\nMi recomendaci\u00f3n, entendiendo como se comportan los arreglos y el <em>for..in<\/em> en javascript, es utlizar el for loop cuando realicemos iteraciones sobre un array:\r\n\r\n[js]var arr = [];\r\narr[1] = 'hola';\r\narr[2] = 'chau';\r\n\r\nfor (var i=0; i &lt; arr.length; i++){\r\n    \/\/i === 0: arr[0] === undefined;\r\n   \u00a0\/\/i === 1: arr[1] === 'hola';\r\n    \/\/i === 2: arr[2] === 'chau';\r\n}[\/js]\r\n\r\nDe esta manera leemos el array de una forma segura y evitando comportamientos inesperados.\r\n\r\nLes dejo un <a title=\"Usando for each con Arrays\" href=\"http:\/\/jsfiddle.net\/pjnovas\/dLRtW\/\" target=\"_blank\">jsFiddle<\/a> para que prueben los casos e intenten nuevas cosas.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 24 Oct 2011 14:29:15 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 20:03:48 +0000","updated_by":1,"published_at":"Mon, 24 Oct 2011 14:29:15 +0000","published_by":1},{"id":102,"title":"Cuando no es s\u00f3lo una cuestion de estilo","slug":"cuando-no-es-solo-una-cuestion-de-estilo","markdown":"\nEl otro d\u00eda estaba mirando una presentaci\u00f3n de [douglas crockford](http:\/\/www.crockford.com\/ \"Sitio del Douglas\") en la cual, como habitualmente lo hace, no s\u00f3lo describ\u00eda las partes buenas del lenguaje, sino tambi\u00e9n las malas. Cosas que tal vez pasaremos a ver en futuras publicaciones; pero hay una que particularmente me llam\u00f3 mucho la atenci\u00f3n y no me pod\u00eda aguantar sin compartir.\n\n### Las llaves, el return, y los puntos y comas\n\n A veces traer las ma\u00f1as y costumbres de otros lenguajes pueden jugar en contra. En este ejemplo, que cualquier desarrollador de C# podr\u00eda haber escrito tranquilamente (vaya tradici\u00f3n en C#, medio obligada, la de arrancar con las llaves en una nueva linea), se deja esto en evidencia. [js] function obtenerFernet(){ return ({ marca: 'censored', precio: 46.99 }); } [\/js] Ahora que podemos obtener un poco de fernet, vamos a servirlo.. >>> obtenerFernet() undefined\n\n<div>**<span style=\"color: #8b008b;\">WTF???<\/span>**<\/div><div>obtenerFernet() nos devuelve undefined. Interesante eh!?<\/div><div>La explicaci\u00f3n a todo esto es que javascript va a estar insertando por nosotros un punto y coma (;) luego del return, en el salto de l\u00ednea.. Y as\u00ed ignorando el resto de la funci\u00f3n:<\/div><div> [js highlight=\"2\"] function obtenerFernet(){ return; ({ marca: 'censored', precio: 46.99 }); } [\/js] <\/div><div>La inserci\u00f3n autom\u00e1tica de puntos y comas est\u00e1 descripta como una de las [caracter\u00edsticas mas raras](http:\/\/stackoverflow.com\/questions\/1995113\/strangest-language-feature\/2003277#2003277 \"strangest language feature\") alguna vez vistas en un lenguaje de programaci\u00f3n.. Y no es para menos!! Uno puede estar horas y horas tratando de encontrar el problema en ese peque\u00f1o pedazo de c\u00f3digo!<\/div><div>Ahora s\u00ed, vamos a arreglar la funci\u00f3n:<\/div><div>[js] function obtenerFernet(){ return ({ marca: 'censored', precio: 46.99 }); } [\/js] Y ya estamos. Este es uno de los \"pitfalls\" que tenemos que evitar como desarrolladores de javascript. Algunos ejemplos m\u00e1s pueden encontrarse en [http:\/\/lucumr.pocoo.org\/2011\/2\/6\/automatic-semicolon-insertion\/#update (Ingl\u00e9s)](http:\/\/lucumr.pocoo.org\/2011\/2\/6\/automatic-semicolon-insertion\/#update \"automatic semicolon insertion\") como as\u00ed tambi\u00e9n existe una [interesante discusi\u00f3n en espa\u00f1ol sobre el tema.](http:\/\/preguntas.barrapunto.com\/article.pl?sid=11\/02\/08\/0638249 \"Discusi\u00f3n en barrapunto\")<\/div>\n","html":"El otro d\u00eda estaba mirando una presentaci\u00f3n de <a title=\"Sitio del Douglas\" href=\"http:\/\/www.crockford.com\/\">douglas crockford<\/a> en la cual, como habitualmente lo hace, no s\u00f3lo describ\u00eda las partes buenas del lenguaje, sino tambi\u00e9n las malas. Cosas que tal vez pasaremos a ver en futuras publicaciones; pero hay una que particularmente me llam\u00f3 mucho la atenci\u00f3n y no me pod\u00eda aguantar sin compartir.\r\n<h3>Las llaves, el return, y los puntos y comas<\/h3>\r\nA veces traer las ma\u00f1as y costumbres de otros lenguajes pueden jugar en contra. En este ejemplo, que cualquier desarrollador de C# podr\u00eda haber escrito tranquilamente (vaya tradici\u00f3n en C#, medio obligada, la de arrancar con las llaves en una nueva linea), se deja esto en evidencia.\r\n\r\n[js]\r\nfunction obtenerFernet(){\r\n    return\r\n        ({    marca: 'censored',\r\n            precio: 46.99\r\n        });\r\n}\r\n[\/js]\r\n\r\nAhora que podemos obtener un poco de fernet, vamos a servirlo..\r\n<pre>&gt;&gt;&gt; obtenerFernet()\r\nundefined<\/pre>\r\n<div><strong><span style=\"color: #8b008b;\">WTF???<\/span><\/strong><\/div>\r\n<div>obtenerFernet() nos devuelve undefined. Interesante eh!?<\/div>\r\n<div>La explicaci\u00f3n a todo esto es que javascript va a estar insertando por nosotros un punto y coma (;) luego del return, en el salto de l\u00ednea.. Y as\u00ed ignorando el resto de la funci\u00f3n:<\/div>\r\n<div>\r\n<!--more-->\r\n[js highlight=\"2\"]\r\nfunction obtenerFernet(){\r\n    return;\r\n        ({    marca: 'censored',\r\n            precio: 46.99\r\n        });\r\n}\r\n[\/js]\r\n\r\n<\/div>\r\n<div>La inserci\u00f3n autom\u00e1tica de puntos y comas est\u00e1 descripta como una de las <a title=\"strangest language feature\" href=\"http:\/\/stackoverflow.com\/questions\/1995113\/strangest-language-feature\/2003277#2003277\">caracter\u00edsticas mas raras<\/a> alguna vez vistas en un lenguaje de programaci\u00f3n.. Y no es para menos!! Uno puede estar horas y horas tratando de encontrar el problema en ese peque\u00f1o pedazo de c\u00f3digo!<\/div>\r\n<div>Ahora s\u00ed, vamos a arreglar la funci\u00f3n:<\/div>\r\n<div>[js]\r\nfunction obtenerFernet(){\r\n    return ({\r\n            marca: 'censored',\r\n            precio: 46.99\r\n        });\r\n}\r\n[\/js]\r\n\r\nY ya estamos. Este es uno de los \"pitfalls\" que tenemos que evitar como desarrolladores de javascript. Algunos ejemplos m\u00e1s pueden encontrarse en <a title=\"automatic semicolon insertion\" href=\"http:\/\/lucumr.pocoo.org\/2011\/2\/6\/automatic-semicolon-insertion\/#update\">http:\/\/lucumr.pocoo.org\/2011\/2\/6\/automatic-semicolon-insertion\/#update (Ingl\u00e9s)<\/a> como as\u00ed tambi\u00e9n existe una <a title=\"Discusi\u00f3n en barrapunto\" href=\"http:\/\/preguntas.barrapunto.com\/article.pl?sid=11\/02\/08\/0638249\">interesante discusi\u00f3n en espa\u00f1ol sobre el tema.<\/a>\r\n\r\n<\/div>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Tue, 25 Oct 2011 00:52:58 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 20:03:20 +0000","updated_by":1,"published_at":"Tue, 25 Oct 2011 00:52:58 +0000","published_by":1},{"id":105,"title":"Mouse enter, over, leave, out. cual y cuando?","slug":"mouse-enter-over-leave-out-cual-y-cuando","markdown":"\nUtilizar los eventos del mouse en javascript para modificar el DOM le da una mejor experiencia al usuario que utiliza nuestra p\u00e1gina web, podemos comprobar en que caso tiene el mouse sobre alg\u00fan lugar en especial y animarlo, mostrarlo, subrayarlo o simplemente cambiarle el color de fondo. El punto es entender que eventos son mejores que otros y para que casos. Suponiendo que no necesitamos una animaci\u00f3n, queremos cambiar el estilo CSS de un elemento, como puede ser el tama\u00f1o de la fuente de texto, el color de la misma o el background-color, etc. Para la mayor\u00eda de esos casos no nos convendr\u00eda escribir javascript ya que podr\u00edamos utilizar simplemente el *:hover* de css y con eso bastar\u00eda. [html title=\"HTML\"] <div class=\"miClaseCSS\"> <p>Este div cambiar\u00e1 su color de fondo a verde cuando el mouse este sobre \u00e9l<\/p> <\/div> [\/html] [css title=\"CSS\" highlight=\"5\"] .miClaseCSS { background-color: white; } .miClaseCSS:hover { background-color: green; } [\/css] Ahora que pasa si necesitamos realizar alguna animaci\u00f3n o ejecutar alguna l\u00f3gica. Bueno, ah\u00ed cambia porque ya no es un \"estilo\" lo que estamos cambiando y vamos a necesitar capturar el evento en javascript.  Para el \"cuando paso el mouse, entro o salgo\" tenemos varias opciones, vamos a ver bien para que funciona cada una, porque si bien suenan parecido, no funcionan de la misma manera: **Evento mouseenter:** Se dispara cuando el mouse *entra* al control que est\u00e1 escuchando. Este evento se ejecuta s\u00f3lo una vez, para que se vuelva a ejecutar debemos salir del control y volver a *entrar*. **Evento mouseleave:** Se dispara cuando el mouse *sale* del control que est\u00e1 escuchando. Este evento se ejecuta s\u00f3lo una vez, para que se vuelva a ejecutar debemos ingresar al control y volver a *salir*. Son simples, entro y salgo de un control y sus respectivos eventos se disparan al momento en que sucede la acci\u00f3n, pero no es lo mismo para los siguientes: **Evento mouseover:** Se dispara cuando el mouse se encuentra dentro del control que esta escuchando el evento, es decir, el puntero *entra* al control y se ejecuta, pero mientras el puntero este adentro del control y lo mueva se vuelve a ejecutar. Hay que destacar la diferencia con el evento *mouseenter*, ya que el ultimo solo se ejecuta una vez, en cambio el *mouseover* cuantas veces me mueva dentro del control. **Evento mouseout:** Se dispara cuando el mouse sale del control que esta escuchando el evento. Pero es diferente al *mouseleave*, en este caso el evento se dispara si alg\u00fan elemento hijo del mismo dispara el mouseout. Supongamos lo siguiente: [html title=\"HTML\"] <div id=\"padre\" onmouseout=\"alert('mouseout ejecutado!');\"> <div id=\"hijo\"><\/div> <\/div> [\/html] En este caso cuando salgamos del div \"hijo\" se disparar\u00e1 el alert. No siempre es el comportamiento esperado, por lo que en principio yo utilizar\u00eda el mouseleave para el caso en el que salgo de un control. Les dejo un jsFiddle con un ejemplo muy bueno sacado de jQuery para que vean las diferencias entre estos eventos. <iframe height=\"240\" src=\"http:\/\/jsfiddle.net\/pjnovas\/TVpTE\/3\/embedded\/\" style=\"width: 100%; height: 300px;\" width=\"320\"><\/iframe> Y por otro lado les recomiendo vean el evento [.hover() de jQuery](http:\/\/api.jquery.com\/hover\/ \".hover() - jQuery\"), el cual facilita el manejo cuando el mouse entra o sale de un control en un solo evento con 2 handlers. **Resumen** Si solo van a cambiar estilos css, usen el :hover de css, queda mas limpio y no necesitan ejecutar scripts. En otro caso que requiera scripts utilicen los eventos cuidadosamente para no tener comportamientos extra\u00f1os, y si pueden, usen jQuery para mejorar la lectura del c\u00f3digo y mantener el c\u00f3digo *cross-browser*\n\n\n","html":"Utilizar los eventos del mouse en javascript para modificar el DOM le da una mejor experiencia al usuario que utiliza nuestra p\u00e1gina web, podemos comprobar en que caso tiene el mouse sobre alg\u00fan lugar en especial y animarlo, mostrarlo, subrayarlo o simplemente cambiarle el color de fondo. El punto es entender que eventos son mejores que otros y para que casos.\r\n\r\nSuponiendo que no necesitamos una animaci\u00f3n, queremos cambiar el estilo CSS de un elemento, como puede ser el tama\u00f1o de la fuente de texto, el color de la misma o el background-color, etc. Para la mayor\u00eda de esos casos no nos convendr\u00eda escribir javascript ya que podr\u00edamos utilizar simplemente el <em>:hover<\/em> de css y con eso bastar\u00eda.\r\n\r\n[html title=\"HTML\"]\r\n&lt;div class=&quot;miClaseCSS&quot;&gt;\r\n    &lt;p&gt;Este div cambiar\u00e1 su color de fondo a verde\r\n             cuando el mouse este sobre \u00e9l&lt;\/p&gt;\r\n&lt;\/div&gt;\r\n[\/html]\r\n[css title=\"CSS\" highlight=\"5\"]\r\n.miClaseCSS\r\n{\r\n    background-color: white;\r\n}\r\n.miClaseCSS:hover\r\n{\r\n    background-color: green;\r\n}\r\n[\/css]\r\n\r\nAhora que pasa si necesitamos realizar alguna animaci\u00f3n o ejecutar alguna l\u00f3gica. Bueno, ah\u00ed cambia porque ya no es un \"estilo\" lo que estamos cambiando y vamos a necesitar capturar el evento en javascript.\r\n<!--more-->\r\nPara el \"cuando paso el mouse, entro o salgo\" tenemos varias opciones, vamos a ver bien para que funciona cada una, porque si bien suenan parecido, no funcionan de la misma manera:\r\n\r\n<strong>Evento mouseenter:<\/strong> Se dispara cuando el mouse <em>entra<\/em> al control que est\u00e1 escuchando. Este evento se ejecuta s\u00f3lo una vez, para que se vuelva a ejecutar debemos salir del control y volver a <em>entrar<\/em>.\r\n\r\n<strong>Evento mouseleave:<\/strong> Se dispara cuando el mouse <em>sale<\/em> del control que est\u00e1 escuchando. Este evento se ejecuta s\u00f3lo una vez, para que se vuelva a ejecutar debemos ingresar al control y volver a <em>salir<\/em>.\r\n\r\nSon simples, entro y salgo de un control y sus respectivos eventos se disparan al momento en que sucede la acci\u00f3n, pero no es lo mismo para los siguientes:\r\n\r\n<strong>Evento mouseover:<\/strong> Se dispara cuando el mouse se encuentra dentro del control que esta escuchando el evento, es decir, el puntero <em>entra<\/em> al control y se ejecuta, pero mientras el puntero este adentro del control y lo mueva se vuelve a ejecutar. Hay que destacar la diferencia con el evento <em>mouseenter<\/em>, ya que el ultimo solo se ejecuta una vez, en cambio el <em>mouseover<\/em> cuantas veces me mueva dentro del control.\r\n\r\n<strong>Evento mouseout:<\/strong> Se dispara cuando el mouse sale del control que esta escuchando el evento. Pero es diferente al <em>mouseleave<\/em>, en este caso el evento se dispara si alg\u00fan elemento hijo del mismo dispara el mouseout.\r\n\r\nSupongamos lo siguiente:\r\n\r\n[html title=\"HTML\"]\r\n&lt;div id=&quot;padre&quot; onmouseout=&quot;alert('mouseout ejecutado!');&quot;&gt;\r\n   &lt;div id=&quot;hijo&quot;&gt;&lt;\/div&gt;\r\n&lt;\/div&gt;\r\n[\/html]\r\n\r\nEn este caso cuando salgamos del div \"hijo\" se disparar\u00e1 el alert. No siempre es el comportamiento esperado, por lo que en principio yo utilizar\u00eda el mouseleave para el caso en el que salgo de un control.\r\n\r\nLes dejo un jsFiddle con un ejemplo muy bueno sacado de jQuery para que vean las diferencias entre estos eventos.\r\n\r\n<iframe style=\"width: 100%; height: 300px;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/TVpTE\/3\/embedded\/\" width=\"320\" height=\"240\"><\/iframe>\r\n\r\nY por otro lado les recomiendo vean el evento <a title=\".hover() - jQuery\" href=\"http:\/\/api.jquery.com\/hover\/\" target=\"_blank\">.hover() de jQuery<\/a>, el cual facilita el manejo cuando el mouse entra o sale de un control en un solo evento con 2 handlers.\r\n\r\n<strong>Resumen<\/strong>\r\nSi solo van a cambiar estilos css, usen el :hover de css, queda mas limpio y no necesitan ejecutar scripts. En otro caso que requiera scripts utilicen los eventos cuidadosamente para no tener comportamientos extra\u00f1os, y si pueden, usen jQuery para mejorar la lectura del c\u00f3digo y mantener el c\u00f3digo <em>cross-browser<\/em>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Tue, 25 Oct 2011 12:38:57 +0000","created_by":1,"updated_at":"Fri, 02 Mar 2012 10:57:56 +0000","updated_by":1,"published_at":"Tue, 25 Oct 2011 12:38:57 +0000","published_by":1},{"id":139,"title":"Alcance de Variables (var scope)","slug":"alcance-de-variables-var-scope","markdown":"\nEn javascript las variables son inicializadas con *undefined*, pero ante una segunda declaracion no se inicializan nuevamente, si bien javascript nos permite declarar dos veces la misma variable, **no** es recomendable hacerlo. Pero si declaramos dos o mas veces la misma variable, a partir de la segunda declaraci\u00f3n que lee el interpretador comprueba que ya est\u00e9 declarada y no le modifica su valor ha no ser que est\u00e9 implicito. [js] var baz; console.log(baz); \/\/baz === undefined var foo = 100; var foo; console.log(foo); \/\/foo === 100 [\/js] Las variables en javascript, como en otros lenguajes, poseen un alcance al momento de su declaraci\u00f3n indicando donde la puedo utilizar, pero a diferencia de otros lenguajes, en javascript el alcance es por funci\u00f3n y no tenemos un alcance de variable por bloque (block-scope), como podr\u00eda ser un *if*, *for*, *while*, etc. En estos casos la variable sigue teniendo un alcance a su funci\u00f3n. Por ejemplo: [js highlight=\"8,12\"] function unaFuncion(){ var i = 100; console.log(unaVar); \/\/unaVar === undefined console.log(otraVar); \/\/otraVar === undefined if (!unaVar) { var unaVar = true; } var otraVar = 'otra variable'; console.log(unaVar); \/\/unaVar === true console.log(otraVar); \/\/otraVar === 'otra variable' } [\/js]  En el ejemplo anterior declaramos una variable adentro de un if y la leemos luego por fuera. En otros lenguajes ni siquiera compila devolviendo un mensaje de error como \"*unaVar* no est\u00e1 declarada\" en la linea 4. Esto demuestra que javascript no tiene un alcance de variable a nivel de bloque. Pero como es que funciona entonces?: simple, el interpretador *alza* la declaracion de la variable hasta el principio de la funci\u00f3n, de esta manera la tendremos declarada al alcance de toda la funci\u00f3n. Usando el ejemplo anterior, ser\u00e1 interpretado de la siguiente manera: [js highlight=\"2,9,11\"] function unaFuncion(){ var unaVar, otraVar; var i = 100; console.log(unaVar); \/\/unaVar === undefined console.log(otraVar); \/\/otraVar === undefined if (!unaVar) { unaVar = true; } otraVar = 'otra variable'; console.log(unaVar); \/\/unaVar === true console.log(otraVar); \/\/otraVar === 'otra variable' } [\/js] Dicho esto, los siguientes ejemplos funcionan de la misma manera sin afectar rendimiento, ni uso de memoria: [js title=\"Ejemplo A\"] function miFuncionA(){ var unaVar; for(var i=0; i<100; i++){ unaVar = 'algun valor'; } console.log(unaVar); } [\/js] [js title=\"Ejemplo B\"] function miFuncionB(){ for(var i=0; i<100; i++){ var unaVar = 'algun valor'; } console.log(unaVar); } [\/js] Contin\u00faa en [Parte 2: funciones](http:\/\/www.fernetjs.com\/2011\/10\/alcance-de-variables-parte-2-funciones\/ \"Alcance de Variables - Parte 2: functiones\")\n\n\n","html":"En javascript las variables son inicializadas con <em>undefined<\/em>, pero ante una segunda declaracion no se inicializan nuevamente, si bien javascript nos permite declarar dos veces la misma variable, <strong>no<\/strong> es recomendable hacerlo. Pero si declaramos dos o mas veces la misma variable, a partir de la segunda declaraci\u00f3n que lee el interpretador comprueba que ya est\u00e9 declarada y no le modifica su valor ha no ser que est\u00e9 implicito.\r\n\r\n[js]\r\nvar baz;\r\nconsole.log(baz); \/\/baz === undefined\r\n\r\nvar foo = 100;\r\nvar foo;\r\nconsole.log(foo); \/\/foo === 100\r\n[\/js]\r\n\r\nLas variables en javascript, como en otros lenguajes, poseen un alcance al momento de su declaraci\u00f3n indicando donde la puedo utilizar, pero a diferencia de otros lenguajes, en javascript el alcance es por funci\u00f3n y no tenemos un alcance de variable por bloque (block-scope), como podr\u00eda ser un <em>if<\/em>, <em>for<\/em>, <em>while<\/em>, etc. En estos casos la variable sigue teniendo un alcance a su funci\u00f3n. Por ejemplo:\r\n\r\n[js highlight=\"8,12\"]\r\nfunction unaFuncion(){\r\n    var i = 100;\r\n\r\n    console.log(unaVar); \/\/unaVar === undefined\r\n    console.log(otraVar); \/\/otraVar === undefined\r\n\r\n    if (!unaVar) {\r\n        var unaVar = true;\r\n    }\r\n    var otraVar = 'otra variable';\r\n\r\n    console.log(unaVar); \/\/unaVar === true\r\n    console.log(otraVar); \/\/otraVar === 'otra variable'\r\n}\r\n[\/js]\r\n<!--more-->\r\nEn el ejemplo anterior declaramos una variable adentro de un if y la leemos luego por fuera. En otros lenguajes ni siquiera compila devolviendo un mensaje de error como \"<em>unaVar<\/em> no est\u00e1 declarada\" en la linea 4. \r\nEsto demuestra que javascript no tiene un alcance de variable a nivel de bloque. Pero como es que funciona entonces?:  simple, el interpretador <em>alza<\/em> la declaracion de la variable hasta el principio de la funci\u00f3n, de esta manera la tendremos declarada al alcance de toda la funci\u00f3n.\r\nUsando el ejemplo anterior, ser\u00e1 interpretado de la siguiente manera:\r\n\r\n[js highlight=\"2,9,11\"]\r\nfunction unaFuncion(){\r\n    var unaVar, otraVar;\r\n    var i = 100;\r\n\r\n    console.log(unaVar); \/\/unaVar === undefined\r\n    console.log(otraVar); \/\/otraVar === undefined\r\n\r\n    if (!unaVar) {\r\n        unaVar = true;\r\n    }\r\n    otraVar = 'otra variable';\r\n\r\n    console.log(unaVar); \/\/unaVar === true\r\n    console.log(otraVar); \/\/otraVar === 'otra variable'\r\n}\r\n[\/js]\r\n\r\nDicho esto, los siguientes ejemplos funcionan de la misma manera sin afectar rendimiento, ni uso de memoria:\r\n\r\n[js title=\"Ejemplo A\"]\r\nfunction miFuncionA(){\r\n    var unaVar;\r\n    for(var i=0; i&lt;100; i++){\r\n       unaVar = 'algun valor';\r\n    }\r\n\r\n    console.log(unaVar);\r\n}\r\n[\/js]\r\n\r\n[js title=\"Ejemplo B\"]\r\nfunction miFuncionB(){\r\n    for(var i=0; i&lt;100; i++){\r\n       var unaVar = 'algun valor';\r\n    }\r\n\r\n    console.log(unaVar);\r\n}\r\n[\/js]\r\n\r\nContin\u00faa en <a href=\"http:\/\/www.fernetjs.com\/2011\/10\/alcance-de-variables-parte-2-funciones\/\" title=\"Alcance de Variables - Parte 2: functiones\">Parte 2: funciones<\/a>\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Sat, 29 Oct 2011 18:37:57 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 20:01:36 +0000","updated_by":1,"published_at":"Sat, 29 Oct 2011 18:37:57 +0000","published_by":1},{"id":201,"title":"Alcance de Variables - Parte 2: funciones","slug":"alcance-de-variables-parte-2-funciones","markdown":"\nComo segunda parte de [Alcance de Variables](http:\/\/www.fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/ \"Alcance de Variables - Parte 1\") vamos a ver como se comportan las funciones. En la parte 1 vimos que las declaraciones de variables son *alzadas* al principio de la funci\u00f3n por el interpretador. Bueno, las declaraciones de funciones tambi\u00e9n lo son. [js] function miFunction(){ foo(); function foo(){ console.log('foo fue llamada!'); } } [\/js] De la misma manera que en la declaracion de variables, el interpretador alz\u00f3 la declaracion de la funci\u00f3n *foo* al principio: [js highlight=\"2,3,4\"] function miFunction(){ function foo(){ console.log('foo fue llamada!'); } foo(); } [\/js] En javascript podemos asignar funciones a variables, ya sean an\u00f3nimas o nombradas, donde el *alzado* del interpretador puede ser un poco confuso.\n\n### Funci\u00f3n An\u00f3nima\n\n [js] function miFuncion(){ foo(); \/\/ TypeError \"foo no es una funci\u00f3n\" \/\/ Expresion de funci\u00f3n an\u00f3nima var foo = function () { console.log('funci\u00f3n llamada!'); }; foo(); \/\/ resulta en: funci\u00f3n llamada! } [\/js] Lo que pas\u00f3 en ese caso es que el interpretador *alz\u00f3* la declaracion de la variable *foo*, pero no as\u00ed su asignaci\u00f3n: [js highlight=\"2,5\"] function miFuncion(){ var foo; foo(); \/\/ simplemente es una variable! foo === undefined foo = function () { console.log('funci\u00f3n llamada!'); }; foo(); \/\/ ahora s\u00ed es una funci\u00f3n } [\/js] ### Funci\u00f3n Nombrada\n\n [js] function miFuncion(){ foo(); \/\/ TypeError \"foo no es una funci\u00f3n\" baz(); \/\/ ReferenceError \"baz no est\u00e1 definida\" \/\/ Expresion de funci\u00f3n nombrada asignada a una variable var foo = function baz() { console.log('funci\u00f3n llamada!'); }; foo(); \/\/ resulta en: funci\u00f3n llamada! baz(); \/\/ ReferenceError \"baz no est\u00e1 definida\" } [\/js] Sucede lo mismo, con la diferencia que no podemos llamar a la funci\u00f3n nombrada desde afuera ya que su alcance no se encuentra en nuestra funci\u00f3n, es decir, *baz* directamente no fue *alzada* porque ni siquiera se encuentra al alcance de *miFuncion*, no sabe que existe. Veamos como fue interpretado: [js highlight=\"2,6\"] function miFuncion(){ var foo; foo(); \/\/ simplemente no es una funci\u00f3n todav\u00eda. baz(); \/\/ baz no existe, no fue declarada. foo = function baz() { console.log('funci\u00f3n llamada!'); }; foo(); \/\/ ahora s\u00ed es una funci\u00f3n. baz(); \/\/ sigue sin existir en este alcance. } [\/js] ### Como escribir c\u00f3digo conociendo todo esto?\n\n Entender como es interpretado nuestro c\u00f3digo nos ayuda a ser mas cautelosos al desarrollar evitando problemas futuros. Mi recomendaci\u00f3n es que intenten tener **un solo***var* al principio de cada funci\u00f3n con todas las declaraciones, ya que al fin y al cabo, va a ser interpretado de la misma manera. #### Por \u00faltimo les dejo traducido lo que dice el *standard*[ECMAScript Standard (pdf)](http:\/\/www.ecma-international.org\/publications\/standards\/Ecma-262.htm \"ECMAScript Standard\"):\n\n*Si la declaraci\u00f3n de la variable se produce dentro de una funci\u00f3n, las variables se definen con alcance local en esa funci\u00f3n. De lo contrario, se definen con un alcance global (es decir, se crean como los miembros del objeto global). Las variables se crean cuando el \u00e1mbito de ejecuci\u00f3n est\u00e1 introducido. Un bloque no define un nuevo alcance de ejecuci\u00f3n. S\u00f3lo program y function producen un nuevo alcance. Las variables se inicializan en undefined cuando se crean. Una variable con un inicializador se le asigna el valor cuando la instrucci\u00f3n se ejecuta, no cuando la variable se crea.*\n","html":"Como segunda parte de <a title=\"Alcance de Variables - Parte 1\" href=\"http:\/\/www.fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/\">Alcance de Variables<\/a> vamos a ver como se comportan las funciones.\r\n\r\nEn la parte 1 vimos que las declaraciones de variables son <em>alzadas<\/em> al principio de la funci\u00f3n por el interpretador. Bueno, las declaraciones de funciones tambi\u00e9n lo son.\r\n\r\n[js]\r\nfunction miFunction(){\r\n    foo();\r\n\r\n    function foo(){\r\n       console.log('foo fue llamada!');\r\n    }\r\n}\r\n[\/js]\r\n\r\nDe la misma manera que en la declaracion de variables, el interpretador alz\u00f3 la declaracion de la funci\u00f3n <em>foo<\/em> al principio:\r\n\r\n[js highlight=\"2,3,4\"]\r\nfunction miFunction(){\r\n    function foo(){\r\n       console.log('foo fue llamada!');\r\n    }\r\n\r\n    foo();\r\n}\r\n[\/js]\r\n\r\nEn javascript podemos asignar funciones a variables, ya sean an\u00f3nimas o nombradas, donde el <em>alzado<\/em> del interpretador puede ser un poco confuso.\r\n<!--more-->\r\n<h3>Funci\u00f3n An\u00f3nima<\/h3>\r\n\r\n[js]\r\nfunction miFuncion(){\r\n    foo(); \/\/ TypeError &quot;foo no es una funci\u00f3n&quot;\r\n\r\n    \/\/ Expresion de funci\u00f3n an\u00f3nima\r\n    var foo = function () {\r\n        console.log('funci\u00f3n llamada!');\r\n    };\r\n\r\n    foo(); \/\/ resulta en: funci\u00f3n llamada!\r\n}\r\n[\/js]\r\n\r\nLo que pas\u00f3 en ese caso es que el interpretador <em>alz\u00f3<\/em> la declaracion de la variable <em>foo<\/em>, pero no as\u00ed su asignaci\u00f3n:\r\n\r\n[js highlight=\"2,5\"]\r\nfunction miFuncion(){\r\n    var foo;\r\n    foo(); \/\/ simplemente es una variable! foo === undefined\r\n\r\n    foo = function () {\r\n        console.log('funci\u00f3n llamada!');\r\n    };\r\n\r\n    foo(); \/\/ ahora s\u00ed es una funci\u00f3n\r\n}\r\n[\/js]\r\n\r\n<h3>Funci\u00f3n Nombrada<\/h3>\r\n\r\n[js]\r\nfunction miFuncion(){\r\n    foo(); \/\/ TypeError &quot;foo no es una funci\u00f3n&quot;\r\n    baz(); \/\/ ReferenceError &quot;baz no est\u00e1 definida&quot;\r\n\r\n    \/\/ Expresion de funci\u00f3n nombrada asignada a una variable\r\n    var foo = function baz() {\r\n        console.log('funci\u00f3n llamada!');\r\n    };\r\n\r\n    foo(); \/\/ resulta en: funci\u00f3n llamada!\r\n    baz(); \/\/ ReferenceError &quot;baz no est\u00e1 definida&quot;\r\n}\r\n[\/js]\r\n\r\nSucede lo mismo, con la diferencia que no podemos llamar a la funci\u00f3n nombrada desde afuera ya que su alcance no se encuentra en nuestra funci\u00f3n, es decir, <em>baz<\/em> directamente no fue <em>alzada<\/em> porque ni siquiera se encuentra al alcance de <em>miFuncion<\/em>, no sabe que existe.\r\nVeamos como fue interpretado:\r\n\r\n[js highlight=\"2,6\"]\r\nfunction miFuncion(){\r\n    var foo;\r\n    foo(); \/\/ simplemente no es una funci\u00f3n todav\u00eda.\r\n    baz(); \/\/ baz no existe, no fue declarada.\r\n\r\n    foo = function baz() {\r\n        console.log('funci\u00f3n llamada!');\r\n    };\r\n\r\n    foo(); \/\/ ahora s\u00ed es una funci\u00f3n.\r\n    baz(); \/\/ sigue sin existir en este alcance.\r\n}\r\n[\/js]\r\n\r\n<h3>Como escribir c\u00f3digo conociendo todo esto?<\/h3>\r\nEntender como es interpretado nuestro c\u00f3digo nos ayuda a ser mas cautelosos al desarrollar evitando problemas futuros. Mi recomendaci\u00f3n es que intenten tener <b>un solo<\/b> <em>var<\/em> al principio de cada funci\u00f3n con todas las declaraciones, ya que al fin y al cabo, va a ser interpretado de la misma manera. \r\n\r\n<h4>Por \u00faltimo les dejo traducido lo que dice el <em>standard<\/em> <a href=\"http:\/\/www.ecma-international.org\/publications\/standards\/Ecma-262.htm\" title=\"ECMAScript Standard\" target=\"_blank\">ECMAScript Standard (pdf)<\/a>:<\/h4>\r\n<em>Si la declaraci\u00f3n de la variable se produce dentro de una funci\u00f3n, las variables se definen con alcance local en esa funci\u00f3n. De lo contrario, se definen con un alcance global (es decir, se crean como los miembros del objeto global). Las variables se crean cuando el \u00e1mbito de ejecuci\u00f3n est\u00e1 introducido. Un bloque no define un nuevo alcance de ejecuci\u00f3n. S\u00f3lo program y function producen un nuevo alcance. Las variables se inicializan en undefined cuando se crean. Una variable con un inicializador se le asigna el valor cuando la instrucci\u00f3n se ejecuta, no cuando la variable se crea.<\/em>\r\n\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Sat, 29 Oct 2011 20:25:04 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 20:01:11 +0000","updated_by":1,"published_at":"Sat, 29 Oct 2011 20:25:04 +0000","published_by":1},{"id":176,"title":"Intro al an\u00e1lisis estatico de c\u00f3digo. jslint y jshint","slug":"intro-al-analisis-estatico-de-codigo-jslint-y-jshint","markdown":"\nAl igual que para otros lenguajes, en javascript existen tambi\u00e9n herramientas para el an\u00e1lisis est\u00e1tico de c\u00f3digo. A los desarrolladores de la plataforma .net les ser\u00e1 conocido [fxcop](http:\/\/es.wikipedia.org\/wiki\/FxCop \"FxCop\"),\u00a0 bueno, el objetivo es el mismo: aumentar la calidad de c\u00f3digo. Este tipo de herramientas toman el c\u00f3digo de fuente, y dependendiendo de un set de reglas, nos indican cu\u00e1les de \u00e9stas estamos rompiendo, de forma que podamos identificar m\u00e1s f\u00e1cilemente esas 'cosas raras' que uno escribe y que potencialmente est\u00e1n atentando contra la calidad del c\u00f3digo.\n\n> JSLint will hurt your feelings\n\n Si, es cierto. Su misma p\u00e1gina, y su propio creador lo proclaman. JSLint (\u00a0http:\/\/www.jslint.com ) es una herramienta desarrollada por [douglas crockford](https:\/\/twitter.com\/#!\/crockfordfacts \"Crockford Facts\") (escrib\u00ed dos posts y en los dos lo referenci\u00e9.. Y?? CUAL HAY??) que est\u00e1 escrita en javascript. Para hacer nuestra primera prueba, todo lo que hay que hacer es dirigirse a[ la p\u00e1gina](http:\/\/www.jslint.com \"jslint\") y pegar all\u00ed el c\u00f3digo, hacer los cambios necesarios en la configuraci\u00f3n y presionar el bot\u00f3n JSLint. Luego de eso se produce el momento en el que se muestran los resultados y usted comienza a maldecir a crockford, a este blog y a javascript. [caption id=\"attachment_247\" align=\"aligncenter\" width=\"384\" caption=\"Este soy yo momentos antes de correr jslint por primera vez. NOTA: acto seguido la mina le saca el coraz\u00f3n.\"]![Bart en la casa del arbol.](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/10\/bart-laura.jpg \"bart-laura\")[\/caption]  La realidad es que hay que tomarlo con calma y empezar a analizar los mensajes. JSLint est\u00e1 dise\u00f1ado para evitar que utilicemos las cosas malas del lenguaje. Con cosas malas hablamos de cosas como variable globales, uso de eval, mal uso de operadores, y [dem\u00e1s yerbas](http:\/\/www.jslint.com\/lint.html \"reglas de jslint\") .. Este es un ejemplito de algo del output para el [monthpicker plugin](http:\/\/www.fernetjs.com\/2011\/10\/jquery-plugin-month-picker\/ \"jQuery Plugin \u2013 Month Picker\") posteado unos d\u00edas atr\u00e1s: \tProblem at line 10 character 17: 'myParams' was used before it was defined.\n\tmyParams = jQuery.extend({\n\n\tProblem at line 37 character 22: Unexpected ';'.\n\t};\n\n\tProblem at line 50 character 43: Expected '===' and instead saw '=='.\n\tif ($container.length == 0) {\n Bueno, hay muchos m\u00e1s mensajes....En fin, el c\u00f3digo del mismo jslint se puede[ encontrar en github](https:\/\/github.com\/douglascrockford\/JSLint \"jslint en github\") y forkearlo. As\u00ed fue como naci\u00f3 [JSHint](http:\/\/www.jshint.com \"JSHint\"), cuyo objetivo es el mismo, pero que basa esas 'cosas malas del lenguaje' no solo en la opini\u00f3n de una persona, sino en\u00a0 la comunidad. La herramienta es mucho m\u00e1s configurable que la anterior, y tambi\u00e9n [est\u00e1 en github](https:\/\/github.com\/jshint\/jshint \"JSHint en github\"). Ah\u00ed se pueden crear issues si se encuentra que hay alguna regla que falta o que deber\u00eda ser modificada, proponer incluir mejoras,\u00a0 y palpar un poco m\u00e1s todo este sentido de comunidad. JSHint tambi\u00e9n est\u00e1 disponible como un paquete de node, se puede agregar a nuestros scripts de integraci\u00f3n continua, pero eso lo dejamos para m\u00e1s adelante.\n","html":"Al igual que para otros lenguajes, en javascript existen tambi\u00e9n herramientas para el an\u00e1lisis est\u00e1tico de c\u00f3digo. A los desarrolladores de la plataforma .net les ser\u00e1 conocido <a title=\"FxCop\" href=\"http:\/\/es.wikipedia.org\/wiki\/FxCop\">fxcop<\/a>,\u00a0 bueno, el objetivo es el mismo: aumentar la calidad de c\u00f3digo.\r\n\r\nEste tipo de herramientas toman el c\u00f3digo de fuente, y dependendiendo de un set de reglas, nos indican cu\u00e1les de \u00e9stas estamos rompiendo, de forma que podamos identificar m\u00e1s f\u00e1cilemente esas 'cosas raras' que uno escribe y que potencialmente est\u00e1n atentando contra la calidad del c\u00f3digo.\r\n<blockquote>JSLint will hurt your feelings<\/blockquote>\r\nSi, es cierto. Su misma p\u00e1gina, y su propio creador lo proclaman. JSLint (\u00a0http:\/\/www.jslint.com ) es una herramienta desarrollada por <a title=\"Crockford Facts\" href=\"https:\/\/twitter.com\/#!\/crockfordfacts\">douglas crockford<\/a> (escrib\u00ed dos posts y en los dos lo referenci\u00e9.. Y?? CUAL HAY??) que est\u00e1 escrita en javascript.\r\n\r\nPara hacer nuestra primera prueba, todo lo que hay que hacer es dirigirse a<a title=\"jslint\" href=\"http:\/\/www.jslint.com\"> la p\u00e1gina<\/a> y pegar all\u00ed el c\u00f3digo, hacer los cambios necesarios en la configuraci\u00f3n y presionar el bot\u00f3n JSLint. Luego de eso se produce el momento en el que se muestran los resultados y usted comienza a maldecir a crockford, a este blog y a javascript.\r\n\r\n[caption id=\"attachment_247\" align=\"aligncenter\" width=\"384\" caption=\"Este soy yo momentos antes de correr jslint por primera vez. NOTA: acto seguido la mina le saca el coraz\u00f3n.\"]<img class=\"size-full wp-image-247\" title=\"bart-laura\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/10\/bart-laura.jpg\" alt=\"Bart en la casa del arbol.\" width=\"384\" height=\"288\" \/>[\/caption]\r\n<!--more-->\r\nLa realidad es que hay que tomarlo con calma y empezar a analizar los mensajes. JSLint est\u00e1 dise\u00f1ado para evitar que utilicemos las cosas malas del lenguaje. Con cosas malas hablamos de cosas como variable globales, uso de eval, mal uso de operadores, y <a title=\"reglas de jslint\" href=\"http:\/\/www.jslint.com\/lint.html\">dem\u00e1s yerbas<\/a> ..\r\n\r\nEste es un ejemplito de algo del output para el <a title=\"jQuery Plugin \u2013 Month Picker\" href=\"http:\/\/www.fernetjs.com\/2011\/10\/jquery-plugin-month-picker\/\">monthpicker plugin<\/a> posteado unos d\u00edas atr\u00e1s:\r\n<code>\r\nProblem at line 10 character 17: 'myParams' was used before it was defined.\r\nmyParams = jQuery.extend({<\/code>\r\n<code>\r\nProblem at line 37 character 22: Unexpected ';'.\r\n};<\/code>\r\n\r\n<code>Problem at line 50 character 43: Expected '===' and instead saw '=='.\r\nif ($container.length == 0) {<\/code>\r\n\r\nBueno, hay muchos m\u00e1s mensajes....En fin, el c\u00f3digo del mismo jslint se puede<a title=\"jslint en github\" href=\"https:\/\/github.com\/douglascrockford\/JSLint\"> encontrar en github<\/a> y forkearlo.\r\n\r\nAs\u00ed fue como naci\u00f3 <a title=\"JSHint\" href=\"http:\/\/www.jshint.com\">JSHint<\/a>, cuyo objetivo es el mismo, pero que basa esas 'cosas malas del lenguaje' no solo en la opini\u00f3n de una persona, sino en\u00a0 la comunidad. La herramienta es mucho m\u00e1s configurable que la anterior, y tambi\u00e9n <a title=\"JSHint en github\" href=\"https:\/\/github.com\/jshint\/jshint\">est\u00e1 en github<\/a>. Ah\u00ed se pueden crear issues si se encuentra que hay alguna regla que falta o que deber\u00eda ser modificada, proponer incluir mejoras,\u00a0 y palpar un poco m\u00e1s todo este sentido de comunidad.\r\n\r\nJSHint tambi\u00e9n est\u00e1 disponible como un paquete de node, se puede agregar a nuestros scripts de integraci\u00f3n continua, pero eso lo dejamos para m\u00e1s adelante.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Sun, 30 Oct 2011 20:38:43 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 20:00:26 +0000","updated_by":1,"published_at":"Sun, 30 Oct 2011 20:38:43 +0000","published_by":1},{"id":274,"title":"Variables Globales","slug":"variables-globales","markdown":"\nAlgo para tener en cuenta al momento de declarar variables globales en javascript es como se comportan con respecto a su alcance. Supongamos el siguiente codigo: [js] foo = true; \/\/alcance global var baz = 101; \/\/alcance global function unaFuncion(){ var bar = true; \/\/alcance de funcion foo2 = 'foo'; \/\/alcance global window.foo3 = false; \/\/alcance global } unaFuncion(); [\/js] Si inspeccionamos los objetos luego de ejecutar el script, tendremos lo siguiente: [js] >> window >> foo \/\/ true >> foo2 \/\/ 'foo' >> foo3 \/\/ false >> baz \/\/ 101 >> unaFunction >> bar \/\/ true [\/js] Como se puede ver *foo* y *foo2* no fueron declaradas con *var*, y ambas fueron tratadas al igual que *foo3*, es decir, autom\u00e1ticamente asignadas al objeto *window*. Esto siginifica que *window* es nuestro **objeto global**, todo lo que **no** declaremos con *var* terminar\u00e1 siendo un miembro de *window*. Es por eso que hay que tener mucho cuidado cuando evitamos el *var*:  [js] foo = true; function test(){ foo = false; } \/\/ foo === true; test(); \/\/ foo === false; [\/js] Esto pasa porque es lo mismo que: [js highlight=\"1,3\"] window.foo = true; function test(){ window.foo = false; } \/\/ window.foo === true; test(); \/\/ window.foo === false; [\/js] Ahora si volvemos al primer ejemplo podremos ver que *bar* solo tuvo alcance dentro de la funcion (no siendo posible utilizarla por fuera), pero *baz* s\u00ed, y no fue tratada de la misma manera que las *foo*. Al ser declarada con *var* no fue incluida en *window*.\n\n### Conclusi\u00f3n\n\n Intenten declarar siempre con *var*, si quieren utilizar variables globales declarenlas con el *var* fuera de las functiones para que est\u00e9n a un alcance global, pero no siendo incluidas en window y as\u00ed tendr\u00e1n un mayor control de las mismas. << En NodeJS sucede lo mismo, con la diferencia que *window* es *process*. >>   \n\n","html":"Algo para tener en cuenta al momento de declarar variables globales en javascript es como se comportan con respecto a su alcance.\r\nSupongamos el siguiente codigo:\r\n\r\n[js]\r\nfoo = true; \/\/alcance global\r\nvar baz = 101; \/\/alcance global\r\n\r\nfunction unaFuncion(){\r\n    var bar = true; \/\/alcance de funcion\r\n\r\n    foo2 = 'foo'; \/\/alcance global\r\n\r\n    window.foo3 = false; \/\/alcance global\r\n}\r\n\r\nunaFuncion();\r\n[\/js]\r\n\r\nSi inspeccionamos los objetos luego de ejecutar el script, tendremos lo siguiente:\r\n\r\n[js]\r\n&gt;&gt; window\r\n    &gt;&gt; foo \/\/ true\r\n    &gt;&gt; foo2 \/\/ 'foo'\r\n    &gt;&gt; foo3 \/\/ false\r\n\r\n&gt;&gt; baz \/\/ 101\r\n\r\n&gt;&gt; unaFunction\r\n    &gt;&gt; bar \/\/ true\r\n[\/js]\r\n\r\nComo se puede ver <em>foo<\/em> y <em>foo2<\/em> no fueron declaradas con <em>var<\/em>, y ambas fueron tratadas al igual que <em>foo3<\/em>, es decir, autom\u00e1ticamente asignadas al objeto <em>window<\/em>. Esto siginifica que <em>window<\/em> es nuestro <strong>objeto global<\/strong>, todo lo que <strong>no<\/strong> declaremos con <em>var<\/em> terminar\u00e1 siendo un miembro de <em>window<\/em>.\r\nEs por eso que hay que tener mucho cuidado cuando evitamos el <em>var<\/em>:\r\n<!--more-->\r\n[js]\r\nfoo = true;\r\nfunction test(){\r\n    foo = false;\r\n}\r\n\/\/ foo === true;\r\ntest();\r\n\/\/ foo === false;\r\n[\/js]\r\n\r\nEsto pasa porque es lo mismo que:\r\n\r\n[js highlight=\"1,3\"]\r\nwindow.foo = true;\r\nfunction test(){\r\n    window.foo = false;\r\n}\r\n\/\/ window.foo === true;\r\ntest();\r\n\/\/ window.foo === false;\r\n[\/js]\r\n\r\nAhora si volvemos al primer ejemplo podremos ver que <em>bar<\/em> solo tuvo alcance dentro de la funcion (no siendo posible utilizarla por fuera), pero <em>baz<\/em> s\u00ed, y no fue tratada de la misma manera que las <em>foo<\/em>. Al ser declarada con <em>var<\/em> no fue incluida en <em>window<\/em>.\r\n<h3>Conclusi\u00f3n<\/h3>\r\nIntenten declarar siempre con <em>var<\/em>, si quieren utilizar variables globales declarenlas con el <em>var<\/em> fuera de las functiones para que est\u00e9n a un alcance global, pero no siendo incluidas en window y as\u00ed tendr\u00e1n un mayor control de las mismas.\r\n\r\n&lt;&lt; En NodeJS sucede lo mismo, con la diferencia que <em>window<\/em> es <em>process<\/em>. &gt;&gt;\r\n<br\/>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 07 Nov 2011 20:51:43 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:59:47 +0000","updated_by":1,"published_at":"Mon, 07 Nov 2011 20:51:43 +0000","published_by":1},{"id":282,"title":"Operadores de igualdad ( == y === )","slug":"operadores-de-igualdad-y","markdown":"\n**Diferencia** Veamos con este ejemplo la diferencia entre los operadores '==' y '===': [js] var a = [1,2,3,4]; var b = [1,2,3,4]; var c = { x: 1, y: 2, z: 3 }; var d = { x: 1, y: 2, z: 3 }; var e = \"hello\"; var f = \"he\" + \"llo\"; alert((a == b)); \/\/ false alert((a === b)); \/\/ false alert((c == d)); \/\/ false alert((c === d)); \/\/ false alert((e == f)); \/\/ true alert((e === f)); \/\/ true alert((true == 1)); \/\/true alert((\"2\" == 2)); \/\/true alert((true === 1)); \/\/false alert((\"2\" === 2)); \/\/ false [\/js] Javascript tiene dos operadores de igualdad '===' y '=='. El operador '===' retornar\u00e1 true si los dos operandos son del mismo tipo ***Y*** tienen el mismo valor. En cambio, el operador '==' intenta forzar una conversi\u00f3n si los operandos son de distinto tipo para luego comparar los valores. Veamos otro ejemplo:  [js] var a = [1,2,3,4]; var b = [1,2,3,4]; var c = a; var ab_igualdad = (a === b); \/\/ false var ac_igualdad = (a === c); \/\/ true [\/js] En realidad el operador '===' verifica que ambos operandos apunten al mismo objeto o en el caso de tipo de datos de valor que ambos operandos tengan el mismo valor. Veamos un ejemplo de esto con strings: [js] alert((\"fernetjs\" == new String(\"fernetjs\"))); \/\/ true alert((\"fernetjs\" === new String(\"fernetjs\"))); \/\/ false [\/js] Ac\u00e1 vemos que con '===' da false porque hablamos de distintos objetos. **Performance** Se corri\u00f3 lo siguiente 6 veces con cada operador de igualdad y los resultados arrojaron una mejor performace con el operador '==='. [js] console.time(\"testEquality\"); var n = 0; while(true) { n++; if(n==100000) break; } console.timeEnd(\"testEquality\"); console.time(\"testTypeEquality\"); var n = 0; while(true) { n++; if(n===100000) break; } console.timeEnd(\"testTypeEquality\"); \/\/16.83 en promedio con '==' \/\/16.5 en promedio con '===' [\/js] Usen la implementaci\u00f3n de console.time and console.timeEnd en caso de que prueben con explorer 8: [js] if(window.console && typeof(window.console.time) == \"undefined\") { console.time = function(name, reset){ if(!name) { return; } var time = new Date().getTime(); if(!console.timeCounters) { console.timeCounters = {} }; var key = \"KEY\" + name.toString(); if(!reset && console.timeCounters[key]) { return; } console.timeCounters[key] = time; }; console.timeEnd = function(name){ var time = new Date().getTime(); if(!console.timeCounters) { return; } var key = \"KEY\" + name.toString(); var timeCounter = console.timeCounters[key]; if(timeCounter) { var diff = time - timeCounter; var label = name + \": \" + diff + \"ms\"; console.info(label); delete console.timeCounters[key]; } return diff; }; } [\/js] Conclusi\u00f3n: aunque la diferencia no es grande (dependiendo del caso), vemos que con '===' obtuvimos un mejor tiempo. Las buenas pr\u00e1cticas nos dicen que siempre debemos usar '===' para evitar errores l\u00f3gicos y de performance a menos que tengamos en claro que usamos '==' por alguna raz\u00f3n. \n","html":"<strong>Diferencia<\/strong>\r\n\r\nVeamos con este  ejemplo la diferencia entre los operadores '==' y '===':\r\n\r\n[js]\r\nvar a = [1,2,3,4]; \r\nvar b = [1,2,3,4];  \r\nvar c = { x: 1, y: 2, z: 3 }; \r\nvar d = { x: 1, y: 2, z: 3 };  \r\nvar e = &quot;hello&quot;; \r\nvar f = &quot;he&quot; + &quot;llo&quot;;  \r\n\r\nalert((a == b));           \/\/ false\r\nalert((a === b));           \/\/ false  \r\n\r\nalert((c == d));            \/\/ false \r\nalert((c === d));           \/\/ false  \r\n\r\nalert((e == f));            \/\/ true \r\nalert((e === f));           \/\/ true\r\n\r\nalert((true == 1)); \/\/true\r\nalert((&quot;2&quot; == 2)); \/\/true\r\n\r\nalert((true === 1)); \/\/false \r\nalert((&quot;2&quot; === 2)); \/\/ false\r\n\r\n[\/js]\r\n\r\nJavascript tiene dos operadores de igualdad '===' y '=='. El operador '===' retornar\u00e1 true si los dos operandos son del mismo tipo <em><strong>Y<\/strong><\/em> tienen el mismo valor. \r\nEn cambio, el operador '==' intenta forzar una conversi\u00f3n si los operandos son de distinto tipo para luego comparar los valores.\r\nVeamos otro ejemplo:\r\n<!--more-->\r\n[js]\r\nvar a = [1,2,3,4]; \r\nvar b = [1,2,3,4]; \r\nvar c = a;  \r\nvar ab_igualdad = (a === b); \/\/ false \r\nvar ac_igualdad = (a === c); \/\/ true \r\n[\/js]\r\n\r\nEn realidad el operador '===' verifica que ambos operandos apunten al mismo objeto o en el caso de tipo de datos de valor que ambos operandos tengan el mismo valor.\r\nVeamos un ejemplo de esto con strings:\r\n\r\n[js]\r\nalert((&quot;fernetjs&quot; == new String(&quot;fernetjs&quot;)));    \/\/ true \r\nalert((&quot;fernetjs&quot; === new String(&quot;fernetjs&quot;)));   \/\/ false \r\n[\/js]\r\n\r\nAc\u00e1 vemos que con '===' da false porque hablamos de distintos objetos.\r\n\r\n<strong>Performance<\/strong>\r\n\r\nSe corri\u00f3 lo siguiente 6 veces con cada operador de igualdad y los resultados arrojaron una mejor performace con el operador '==='.\r\n\r\n[js]\r\nconsole.time(&quot;testEquality&quot;); \r\nvar n = 0; \r\nwhile(true) {     \r\n    n++;     \r\n    if(n==100000) break; \r\n        \r\n        } \r\nconsole.timeEnd(&quot;testEquality&quot;); \r\n\r\n    \r\nconsole.time(&quot;testTypeEquality&quot;); \r\nvar n = 0; \r\nwhile(true) {     \r\nn++;     \r\nif(n===100000) break; \r\n} \r\nconsole.timeEnd(&quot;testTypeEquality&quot;); \r\n\r\n\/\/16.83 en promedio con '=='\r\n\/\/16.5 en promedio con '==='\r\n[\/js]\r\n\r\nUsen la implementaci\u00f3n de console.time and console.timeEnd en caso de que prueben \r\ncon explorer 8:\r\n[js]\r\nif(window.console &amp;&amp; typeof(window.console.time) == &quot;undefined&quot;) {\r\n    console.time = function(name, reset){\r\n        if(!name) { return; }\r\n        var time = new Date().getTime();\r\n        if(!console.timeCounters) { console.timeCounters = {} };\r\n        var key = &quot;KEY&quot; + name.toString();\r\n        if(!reset &amp;&amp; console.timeCounters[key]) { return; }\r\n            console.timeCounters[key] = time;\r\n        };\r\n\r\n    console.timeEnd = function(name){\r\n        var time = new Date().getTime();\r\n        if(!console.timeCounters) { return; }\r\n        var key = &quot;KEY&quot; + name.toString();\r\n        var timeCounter = console.timeCounters[key];\r\n        if(timeCounter) {\r\n            var diff = time - timeCounter;\r\n            var label = name + &quot;: &quot; + diff + &quot;ms&quot;;\r\n            console.info(label);\r\n            delete console.timeCounters[key];\r\n        }\r\n        return diff;\r\n    };\r\n}\r\n[\/js]\r\n\r\n\r\nConclusi\u00f3n: aunque la diferencia no es grande (dependiendo del caso), vemos que con '===' obtuvimos un mejor tiempo.\r\n\r\nLas buenas pr\u00e1cticas nos dicen que siempre debemos usar '===' para evitar errores l\u00f3gicos y de performance a menos que tengamos en claro que usamos '==' por alguna raz\u00f3n.\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":4,"created_at":"Tue, 08 Nov 2011 11:53:14 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:59:12 +0000","updated_by":1,"published_at":"Tue, 08 Nov 2011 11:53:14 +0000","published_by":1},{"id":334,"title":"Funciones: Argumentos y Par\u00e1metros","slug":"funciones-argumentos-y-parametros","markdown":"\nTodos conocemos lo que son los par\u00e1metros en una funci\u00f3n, en muchos lenguajes simplemente los definimos en lo que se puede llamar *la firma del m\u00e9todo o funci\u00f3n* y cuando queremos opcionales?, o simplemente utilizar menos?, bueno definimos nulleables, hacemos otras firmas con menos o mas par\u00e1metros, en algunos lenguajes podemos definir cuales son opcionales, etc. Pero en javascript es a\u00fan mas f\u00e1cil, no hacemos nada, simplemente no los pasamos: [js] function hacerAlgo(a, b){ console.log('hacerAlgo fue llamada sin problemas'); } hacerAlgo(); hacerAlgo('a'); hacerAlgo('a', 'b'); hacerAlgo('a', 'b', 'c'); [\/js] Javascript nos deja llamar a la funcion con menos par\u00e1metros sin problemas (siempre desde izquierda a derecha), hasta no enviando ni siquiera uno, o mas de los que permite. Nunca se preguntaron como funciona jQuery en los getter y setter?, por ejemplo la funci\u00f3n text()  [js] $('#unSpan').text('un valor para el span'); var valorDelSpan = $('#unSpan').text(); [\/js] La funci\u00f3n es la misma, no hay sobrecargas ni declaraciones especiales de parametro opcional, es que javascript nos deja utilizar la funci\u00f3n sin problemas enviando m\u00e1s o ning\u00fan par\u00e1metro. Pero c\u00f3mo podemos saber que llega y que no?, bueno en principio podemos comprobar contra *undefined* de esta manera: [js] function text(texto){ if (texto !== undefined) console.log('me quieren usar como setter'); else console.log('me quieren usar como getter'); } [\/js] Es una manera, pero hay otras formas de comprobar que llega o no a una funci\u00f3n y estos son los *argumentos* Con los *argumentos* podemos ver cuantos llegaron, quien llamo, sus valores y hasta ver los que no estamos esperando y fueron enviados igual. [js] function hacerAlguna(a, b){ console.log(arguments); \/\/ ['a','b','c','d','e','f'] console.log(arguments.length); \/\/ 6 console.log(arguments[0]); \/\/ 'a' console.log(arguments[5]); \/\/ 'f' console.log(hacerAlguna.length); \/\/ 2 if(arguments.length > hacerAlguna.length) console.log('ey! me enviaste m\u00e1s parametros de los que tengo!'); } hacerAlguna('a','b','c','d','e','f'); [\/js] Que tiene de mejor esto que comprobar contra *undefined*?, podemos tomar directamente el argumento por el \u00edndice. Pero tampoco es toda la idea, ya que sino para qu\u00e9 ponemos nombres a los par\u00e1metros o siquiera para que ponemos par\u00e1metros?, bueno sepan que existe y est\u00e1 ahi para usar, pero tampoco es para hacer nuestro c\u00f3digo ilegible y complicado.\n\n### Usar parametros o un objeto?\n\n Qu\u00e9 pasa cuando tenemos una funci\u00f3n con 3 par\u00e1metros y necesitamos agregar uno m\u00e1s?, editar la funci\u00f3n y tener en cuenta el c\u00f3digo ya existente para que admita ese parametro, con su refactorizaci\u00f3n de c\u00f3digo ... uff molesto. Y si utilizamos un objeto como par\u00e1metro? [js] function hacerAlguna(opciones){ console.log(opciones.a); console.log(opciones.b); opciones.c(); } hacerAlguna({ a: 'parametro a', b: 'parametro b', c: function(){ console.log('una funcion an\u00f3nima llamada'); } }); [\/js] Suena bien, no?, no siempre es la opci\u00f3n pero es mucho m\u00e1s mantenible, ya que no cambiamos la *firma* de la funci\u00f3n cada vez que necesitamos algo nuevo y mantenemos la nomenclatura de los parametros siendo c\u00f3digo m\u00e1s legible. \n","html":"Todos conocemos lo que son los par\u00e1metros en una funci\u00f3n, en muchos lenguajes simplemente los definimos en lo que se puede llamar <em>la firma del m\u00e9todo o funci\u00f3n<\/em> y cuando queremos opcionales?, o simplemente utilizar menos?, bueno definimos nulleables, hacemos otras firmas con menos o mas par\u00e1metros, en algunos lenguajes podemos definir cuales son opcionales, etc. Pero en javascript es a\u00fan mas f\u00e1cil, no hacemos nada, simplemente no los pasamos:\r\n\r\n[js]\r\nfunction hacerAlgo(a, b){\r\n    console.log('hacerAlgo fue llamada sin problemas');\r\n}\r\n\r\nhacerAlgo();\r\nhacerAlgo('a');\r\nhacerAlgo('a', 'b');\r\nhacerAlgo('a', 'b', 'c');\r\n[\/js]\r\n\r\nJavascript nos deja llamar a la funcion con menos par\u00e1metros sin problemas (siempre desde izquierda a derecha), hasta no enviando ni siquiera uno, o mas de los que permite.\r\nNunca se preguntaron como funciona jQuery en los getter y setter?, por ejemplo la funci\u00f3n text()\r\n<!--more-->\r\n[js]\r\n$('#unSpan').text('un valor para el span');\r\nvar valorDelSpan = $('#unSpan').text();\r\n[\/js]\r\n\r\nLa funci\u00f3n es la misma, no hay sobrecargas ni declaraciones especiales de parametro opcional, es que javascript nos deja utilizar la funci\u00f3n sin problemas enviando m\u00e1s o ning\u00fan par\u00e1metro. Pero c\u00f3mo podemos saber que llega y que no?, bueno en principio podemos comprobar contra <em>undefined<\/em> de esta manera:\r\n\r\n[js]\r\nfunction text(texto){\r\n\r\n    if (texto !== undefined) \r\n       console.log('me quieren usar como setter');\r\n    else console.log('me quieren usar como getter');\r\n\r\n}\r\n[\/js]\r\n\r\nEs una manera, pero hay otras formas de comprobar que llega o no a una funci\u00f3n y estos son los <em>argumentos<\/em>\r\nCon los <em>argumentos<\/em> podemos ver cuantos llegaron, quien llamo, sus valores y hasta ver los que no estamos esperando y fueron enviados igual.\r\n\r\n[js]\r\nfunction hacerAlguna(a, b){\r\n    console.log(arguments); \/\/ ['a','b','c','d','e','f']\r\n    console.log(arguments.length); \/\/ 6\r\n    console.log(arguments[0]); \/\/ 'a'\r\n    console.log(arguments[5]); \/\/ 'f'\r\n\r\n    console.log(hacerAlguna.length); \/\/ 2\r\n\r\n    if(arguments.length &gt; hacerAlguna.length)\r\n       console.log('ey! me enviaste m\u00e1s parametros de los que tengo!');\r\n}\r\n\r\nhacerAlguna('a','b','c','d','e','f');\r\n[\/js]\r\n\r\nQue tiene de mejor esto que comprobar contra <em>undefined<\/em>?, podemos tomar directamente el argumento por el \u00edndice. Pero tampoco es toda la idea, ya que sino para qu\u00e9 ponemos nombres a los par\u00e1metros o siquiera para que ponemos par\u00e1metros?, bueno sepan que existe y est\u00e1 ahi para usar, pero tampoco es para hacer nuestro c\u00f3digo ilegible y complicado.\r\n\r\n<h3>Usar parametros o un objeto?<\/h3>\r\nQu\u00e9 pasa cuando tenemos una funci\u00f3n con 3 par\u00e1metros y necesitamos agregar uno m\u00e1s?, editar la funci\u00f3n y tener en cuenta el c\u00f3digo ya existente para que admita ese parametro, con su refactorizaci\u00f3n de c\u00f3digo ... uff molesto. Y si utilizamos un objeto como par\u00e1metro?\r\n\r\n[js]\r\nfunction hacerAlguna(opciones){\r\n    console.log(opciones.a);\r\n    console.log(opciones.b);\r\n    opciones.c(); \r\n}\r\n\r\nhacerAlguna({\r\n    a: 'parametro a',\r\n    b: 'parametro b',\r\n    c: function(){\r\n       console.log('una funcion an\u00f3nima llamada');\r\n    }\r\n});\r\n\r\n[\/js]\r\n\r\nSuena bien, no?, no siempre es la opci\u00f3n pero es mucho m\u00e1s mantenible, ya que no cambiamos la <em>firma<\/em> de la funci\u00f3n cada vez que necesitamos algo nuevo y mantenemos la nomenclatura de los parametros siendo c\u00f3digo m\u00e1s legible.\r\n\r\n\r\n\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 09 Nov 2011 09:49:40 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:58:48 +0000","updated_by":1,"published_at":"Wed, 09 Nov 2011 09:49:40 +0000","published_by":1},{"id":250,"title":"Performance: El DOM y la memoria","slug":"performance-el-dom-y-la-memoria","markdown":"\nCon la llegada de las aplicaciones ricas de internet (RIA: Rich Internet Applications), nuestras p\u00e1ginas requieren mejor experiencia de usuario, lo que lleva a un mayor manejo del DOM con largas hojas de c\u00f3digo js, animaciones, etc. Pero esto lleva a un problema que no siempre se prev\u00e9 antes de desarrollar y de pronto todo empieza a funcionar lento o se come la memoria de la maquina del cliente. El problema con la web no es el javascript, sino el DOM:\n\n1. Cada vez que modificamos el DOM resultando en un lindo efecto visual, el explorador realiza lo que se llama \"re-flow\", re-dibujar el DOM.\n2. Cada explorador maneja la memoria a su gusto, el DOM es peso en memoria que no siempre se libera como lo esperamos, o ni siquiera pensamos en lo que va a pesar despu\u00e9s de que ejecute nuestra maravillosa funci\u00f3n JS.\n\n Para el caso 1 lo que se puede hacer es intentar reducir las animaciones y modificaciones, eso soluciona el problema del re-flow pero no el hecho de que ahora tenemos menos animaciones y efectos visuales. Si tienen la posibilidad de utilizar HTML 5, una buena opci\u00f3n es la utlizaci\u00f3n de Canvas, lo que es mucho menos pesado al momento de realizar animaciones. Podemos dibujar e interactuar con los eventos del cliente, como ser mouse y teclado pero sin el trabajo que requiere un re-flow ya que no usamos el DOM. En el caso 2 jQuery puede ser de gran ayuda con sus funciones empty() y remove(), las cuales nos liberan a trav\u00e9s de selectores los elementos del DOM. Un ejemplo com\u00fan es realizar llamadas ajax y refrescar una lista de elementos, simulemos eso:  [js highlight=\"6\"] var cantidadEjecuciones = 0; function AgregarElementos(){ cantidadEjecuciones++; $('#unDiv').html(''); for(var i=0; i<100; i++) { $('#unDiv').append($('<p>').text('texto')); } \/\/Si ejecut\u00f3 menos de 5 veces, vuelvo a ejecutar. if (cantidadEjecuciones <= 5){ setTimeout(function() { AgregarElementos(); }, 2000); } } AgregarElementos(); [\/js] La funci\u00f3n anterior simula una carga de p\u00e1rrafos a un div cada 2 segundos, 5 veces. A simple vista la funci\u00f3n es llamada, limpia el div y agrega 100 p\u00e1rrafos nuevos. El problema es que no se est\u00e1n liberando los objetos de memoria, como parece y cada vez que ejecuto la funci\u00f3n, se agregan 100 m\u00e1s. [js highlight=\"7\"] var cantidadEjecuciones = 0; function AgregarElementos(){ cantidadEjecuciones++; \u00a0\/\/Limpio el DOM con los elementos anteriores. $('#unDiv p').empty().remove(); for(var i=0; i<100; i++) { $('#unDiv').append($('<p>').text('texto')); } \/\/Si ejecut\u00f3 menos de 5 veces, vuelvo a ejecutar. if (cantidadEjecuciones <= 5){ setTimeout(function() { AgregarElementos(); }, 2000); } } AgregarElementos(); [\/js] De esta manera, justo antes de agregar los 100 nuevos p\u00e1rrafos limpio el dom utilizando el remove() de jQuery y as\u00ed tambi\u00e9n la memoria.\n","html":"Con la llegada de las aplicaciones ricas de internet (RIA: Rich Internet Applications), nuestras p\u00e1ginas requieren mejor experiencia de usuario, lo que lleva a un mayor manejo del DOM con largas hojas de c\u00f3digo js, animaciones, etc. Pero esto lleva a un problema que no siempre se prev\u00e9 antes de desarrollar y de pronto todo empieza a funcionar lento o se come la memoria de la maquina del cliente.\r\n\r\nEl problema con la web no es el javascript, sino el DOM:\r\n<ol>\r\n\t<li>Cada vez que modificamos el DOM resultando en un lindo efecto visual, el explorador realiza lo que se llama \"re-flow\", re-dibujar el DOM.<\/li>\r\n\t<li>Cada explorador maneja la memoria a su gusto, el DOM es peso en memoria que no siempre se libera como lo esperamos, o ni siquiera pensamos en lo que va a pesar despu\u00e9s de que ejecute nuestra maravillosa funci\u00f3n JS.<\/li>\r\n<\/ol>\r\nPara el caso 1 lo que se puede hacer es intentar reducir las animaciones y modificaciones, eso soluciona el problema del re-flow pero no el hecho de que ahora tenemos menos animaciones y efectos visuales. Si tienen la posibilidad de utilizar HTML 5, una buena opci\u00f3n es la utlizaci\u00f3n de Canvas, lo que es mucho menos pesado al momento de realizar animaciones. Podemos dibujar e interactuar con los eventos del cliente, como ser mouse y teclado pero sin el trabajo que requiere un re-flow ya que no usamos el DOM.\r\n\r\nEn el caso 2 jQuery puede ser de gran ayuda con sus funciones empty() y remove(), las cuales nos liberan a trav\u00e9s de selectores los elementos del DOM.\r\n\r\nUn ejemplo com\u00fan es realizar llamadas ajax y refrescar una lista de elementos, simulemos eso:\r\n<!--more-->\r\n[js highlight=\"6\"]\r\n\r\nvar cantidadEjecuciones = 0;\r\n\r\nfunction AgregarElementos(){\r\n    cantidadEjecuciones++;\r\n\r\n    $('#unDiv').html('');\r\n\r\n    for(var i=0; i&lt;100; i++) {\r\n       $('#unDiv').append($('&lt;p&gt;').text('texto'));\r\n    }\r\n\r\n    \/\/Si ejecut\u00f3 menos de 5 veces, vuelvo a ejecutar.\r\n    if (cantidadEjecuciones &lt;= 5){\r\n        setTimeout(function() {\r\n            AgregarElementos();\r\n        }, 2000);\r\n    }\r\n}\r\n\r\nAgregarElementos();\r\n\r\n[\/js]\r\n\r\nLa funci\u00f3n anterior simula una carga de p\u00e1rrafos a un div cada 2 segundos, 5 veces. A simple vista la funci\u00f3n es llamada, limpia el div y agrega 100 p\u00e1rrafos nuevos. El problema es que no se est\u00e1n liberando los objetos de memoria, como parece y cada vez que ejecuto la funci\u00f3n, se agregan 100 m\u00e1s.\r\n\r\n[js highlight=\"7\"]\r\nvar cantidadEjecuciones = 0;\r\n\r\nfunction AgregarElementos(){\r\n    cantidadEjecuciones++;\r\n\r\n   \u00a0\/\/Limpio el DOM con los elementos anteriores.\r\n    $('#unDiv p').empty().remove();\r\n\r\n    for(var i=0; i&lt;100; i++) {\r\n       $('#unDiv').append($('&lt;p&gt;').text('texto'));\r\n    }\r\n\r\n    \/\/Si ejecut\u00f3 menos de 5 veces, vuelvo a ejecutar.\r\n    if (cantidadEjecuciones &lt;= 5){\r\n        setTimeout(function() {\r\n            AgregarElementos();\r\n        }, 2000);\r\n    }\r\n}\r\n\r\nAgregarElementos();\r\n[\/js]\r\n\r\nDe esta manera, justo antes de agregar los 100 nuevos p\u00e1rrafos limpio el dom utilizando el remove() de jQuery y as\u00ed tambi\u00e9n la memoria.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 10 Nov 2011 10:14:37 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:58:16 +0000","updated_by":1,"published_at":"Thu, 10 Nov 2011 10:14:37 +0000","published_by":1},{"id":325,"title":"Clausuras (Closures)","slug":"clausuras-closures","markdown":"\nEl concepto es \"clausurar\" el contexto en el que se ejecuta una funci\u00f3n, a esta funci\u00f3n se la denomina *Closure*\n\n### C\u00f3mo funcionan?\n\n En donde se encuentra una funci\u00f3n dentro de otra, la funci\u00f3n interna tiene acceso a las variables de la funci\u00f3n externa. [js] function externa(x) { var variable = 3; function interna(y) { console.log(x + y + (++variable)); } interna(10); } externa(2); [\/js] Esto siempre dar\u00e1 16 en la consola, porque *interna()* puede acceder a la *x* que fue definida como argumento en *externa()* y tambien puede acceder a variable de *externa()*. Eso **NO** es un *closure*. Un *closure* es cuando se retorna la funci\u00f3n interna y esta misma cierra sus variables externas antes de salir.  [js] function externa(x) { var variable = 3; return function (y) { console.log( x + y + (++variable) ); } } var interna = externa(2); \/\/ interna es ahora un closure. interna(10); [\/js] Tambi\u00e9n retornar\u00e1 16, porque *interna()* todavia puede referenciar a *x* y *variable*, aunque ya no este directamente dentro del alcance de *externa()*. Sin embargo, como *variable* todav\u00eda esta siendo manejada dentro del closure *interna()*, va a continuar incrementandose cada vez que *interna()* sea llamada, a diferencia del ejemplo anterior. ### Importante cuando trabajamos con Closures\n\n En el \u00faltimo ejemplo *x* es un n\u00famero literal y como todo literal en javascript cuando se llame a *externa()* el numero *x* es copiado en la funci\u00f3n como argumento. Por otro lado, javascript siempre utiliza referencias cuando trabaja con Objetos. Por ejemplo, si llamamos a *externa()* con un objeto, el closure que retornar\u00e1 estar\u00e1 referenciado al objeto original. [js] function externa(x) { var variable = 3; return function (y) { console.log(x + y + variable); x.unaProp = x.unaProp ? x.unaProp + 1 : 1; console.log(x.unaProp); } } var edad = new Number(2); \/\/ interna es una closure referenciando al objeto edad. var interna = externa(edad); interna(10); [\/js] Como es esperado, cada llamada a *interna()* incrementar\u00e1 *x.unaProp*. Lo que puede no ser esperado es que *x* est\u00e1 referenciando al mismo objeto que guarda *edad*, luego de un par de llamadas a *interna()**edad.unaProp* valdr\u00e1 2. > *Les dejo un training online que me pareci\u00f3 excelente lo interactivo y divertido que es.<del datetime=\"2012-04-16T13:43:31+00:00\"> Est\u00e1 en Ingl\u00e9s, pero si se defienden con el idioma les va a resultar muy pr\u00e1ctico: [**What's a Closure?**](http:\/\/nathansjslessons.appspot.com\/ \"What's a Closure?\")<\/del>***EDIT:** Hicimos disponible la versi\u00f3n en espa\u00f1ol! [Que es una clausura?](http:\/\/nathansjslessons.appspot.com\/lesson?id=1000&lang=es)\n\n*Este post lo arm\u00e9 hace un tiempo en el sitio [DosIdeas](http:\/\/www.dosideas.com \"DosIdeas\") (lo recomiendo, tiene muy buena info para el desarrollo \u00c1gil de software) y como no puede faltar el tema en fernetjs, lo publiqu\u00e9 ac\u00e1.*\n","html":"El concepto es \"clausurar\" el contexto en el que se ejecuta una funci\u00f3n, a esta funci\u00f3n se la denomina <em>Closure<\/em>\r\n<h3>C\u00f3mo funcionan?<\/h3>\r\nEn donde se encuentra una funci\u00f3n dentro de otra, la funci\u00f3n interna tiene acceso a las variables de la funci\u00f3n externa.\r\n\r\n[js]\r\nfunction externa(x) {\r\n   var variable = 3;\r\n\r\n   function interna(y) {\r\n      console.log(x + y + (++variable));\r\n   }\r\n\r\n   interna(10);\r\n}\r\n\r\nexterna(2);\r\n[\/js]\r\n\r\nEsto siempre dar\u00e1 16 en la consola, porque <em>interna()<\/em> puede acceder a la <em>x<\/em> que fue definida como argumento en <em>externa()<\/em> y tambien puede acceder a variable de <em>externa()<\/em>.\r\n\r\nEso <strong>NO<\/strong> es un <em>closure<\/em>. Un <em>closure<\/em> es cuando se retorna la funci\u00f3n interna y esta misma cierra sus variables externas antes de salir.\r\n<!--more-->\r\n[js]\r\nfunction externa(x) {\r\n   var variable = 3;\r\n\r\n   return function (y) {\r\n      console.log( x + y + (++variable) );\r\n   }\r\n}\r\nvar interna = externa(2); \/\/ interna es ahora un closure.\r\ninterna(10);\r\n[\/js]\r\n\r\nTambi\u00e9n retornar\u00e1 16, porque <em>interna()<\/em> todavia puede referenciar a <em>x<\/em> y <em>variable<\/em>, aunque ya no este directamente dentro del alcance de <em>externa()<\/em>. Sin embargo, como <em>variable<\/em> todav\u00eda esta siendo manejada dentro del closure <em>interna()<\/em>, va a continuar incrementandose cada vez que <em>interna()<\/em> sea llamada, a diferencia del ejemplo anterior.\r\n<h3>Importante cuando trabajamos con Closures<\/h3>\r\nEn el \u00faltimo ejemplo <em>x<\/em> es un n\u00famero literal y como todo literal en javascript cuando se llame a <em>externa()<\/em> el numero <em>x<\/em> es copiado en la funci\u00f3n como argumento.\r\n\r\nPor otro lado, javascript siempre utiliza referencias cuando trabaja con Objetos. Por ejemplo, si llamamos a <em>externa()<\/em> con un objeto, el closure que retornar\u00e1 estar\u00e1 referenciado al objeto original.\r\n\r\n[js]\r\nfunction externa(x) {\r\n   var variable = 3;\r\n\r\n   return function (y) {\r\n      console.log(x + y + variable);\r\n      x.unaProp = x.unaProp ? x.unaProp + 1 : 1;\r\n      console.log(x.unaProp);\r\n  }\r\n\r\n}\r\n\r\nvar edad = new Number(2);\r\n\r\n\/\/ interna es una closure referenciando al objeto edad.\r\nvar interna = externa(edad);\r\n\r\ninterna(10);\r\n[\/js]\r\n\r\nComo es esperado, cada llamada a <em>interna()<\/em> incrementar\u00e1 <em>x.unaProp<\/em>. Lo que puede no ser esperado es que <em>x<\/em> est\u00e1 referenciando al mismo objeto que guarda <em>edad<\/em>, luego de un par de llamadas a <em>interna()<\/em> <em>edad.unaProp<\/em> valdr\u00e1 2.\r\n\r\n<blockquote>\r\n<em>Les dejo un training online que me pareci\u00f3 excelente lo interactivo y divertido que es.<del datetime=\"2012-04-16T13:43:31+00:00\"> Est\u00e1 en Ingl\u00e9s, pero si se defienden con el idioma les va a resultar muy pr\u00e1ctico: <a title=\"What's a Closure?\" href=\"http:\/\/nathansjslessons.appspot.com\/\" target=\"_blank\"><b>What's a Closure?<\/b><\/a>\r\n<\/em><\/del> <strong>EDIT:<\/strong> Hicimos disponible la versi\u00f3n en espa\u00f1ol! <a href=\"http:\/\/nathansjslessons.appspot.com\/lesson?id=1000&lang=es\">Que es una clausura?<\/a>\r\n<\/blockquote>\r\n\r\n<em>Este post lo arm\u00e9 hace un tiempo en el sitio <a title=\"DosIdeas\" href=\"http:\/\/www.dosideas.com\" target=\"_blank\">DosIdeas<\/a> (lo recomiendo, tiene muy buena info para el desarrollo \u00c1gil de software) y como no puede faltar el tema en fernetjs, lo publiqu\u00e9 ac\u00e1.<\/em> ","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Sat, 12 Nov 2011 17:52:09 +0000","created_by":1,"updated_at":"Mon, 16 Apr 2012 10:57:48 +0000","updated_by":1,"published_at":"Sat, 12 Nov 2011 17:52:09 +0000","published_by":1},{"id":404,"title":"Memoization. Una primer mirada","slug":"memoization-una-primer-mirada","markdown":"\nPrimero que nada, quer\u00eda aclarar que conozco el t\u00e9rmino solamente en ingl\u00e9s, y no quiero entrar en [debates filos\u00f3ficos](http:\/\/cvc.cervantes.es\/foros\/leer_asunto1.asp?vCodigo=36444) de c\u00f3mo deber\u00edamos llamarlo en castellano; as\u00ed que adentr\u00e9monos en el tema. Memoization es una t\u00e9cnica de optimizaci\u00f3n mediante la cual se trata de mejorar la velocidad de c\u00f3mputo. \u00bfC\u00f3mo? F\u00e1cil: Una funci\u00f3n se acuerda del resultado para cierto input o grupo de par\u00e1metros, y devuelve \u00e9ste resultado en lugar de andar haciendo el c\u00e1lculo una y otra vez. Esta no es una t\u00e9cnica dependiente del lenguaje, es decir, no es algo propio de javascript, y lo vamos a encontrar tambi\u00e9n en muchos otros lenguajes. Para entender el concepto, vamos a ver una implementaci\u00f3n sencilla, para una problem\u00e1tica sencilla; pero en futuros posts vamos a estar abarcando distintos casos y variantes, y como lo implementan algunas bibliotecas. La problem\u00e1tica sencilla de la que hablamos, es calcular el factorial de cierto n\u00famero. La implementaci\u00f3n que yo hice en javascript es la siguiente: [js] function factorial(num) { if (num === 0) { return 1; } else { return num * factorial(num - 1); } } [\/js] Como se puede ver es una funci\u00f3n recursiva (se llama a si misma). Ahora, si la probamos, vamos a ver que por ejemplo [js]factorial(0);\/\/ 1 factorial(4);\/\/24[\/js] Parece funcionar bien.. pero lo que queremos hacer es optimizar esta funci\u00f3n, porque a cada valor m\u00e1s grande que le pasamos como par\u00e1metro, la funci\u00f3n nos tarda mucho mas :(  [js] function mejor_factorial(num) { \/\/ si el cache no esta inicializado, lo inicializamos if (!mejor_factorial.cache) { mejor_factorial.cache = {}; } if (num === 0) { return 1; } else if (num in mejor_factorial.cache) { \/\/ si ya tenemos en cache el factorial de num, devolvemos \/\/ directamente ese resultado sin hacer ningun c\u00e1lculo return mejor_factorial.cache[num]; } else { \/\/ como no tenemos el factorial de num en cache, lo calculamos \/\/ y lo cacheamos para futuras invocaciones mejor_factorial.cache[num] = num * mejor_factorial(num - 1); return mejor_factorial.cache[num]; } [\/js] [js] mejor_factorial(0);\/\/ 1 mejor_factorial(4);\/\/24 [\/js] Esperemos que con los comentarios se haya entendido qu\u00e9 es lo que se hace en cada parte del c\u00f3digo. Ahora vayamos a la posta, \u00bfEs realmente \"mucho\" m\u00e1s rapida\u00a0<span class=\"Apple-style-span\" style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px; white-space: pre;\">mejor_factorial <\/span>que\u00a0<span class=\"Apple-style-span\" style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px; white-space: pre;\">factorial<\/span>? **Respuesta corta**: si **Respuesta pr\u00e1ctica**: cre\u00e9 un [caso de prueba en jsPerf](http:\/\/jsperf.com\/memoization-caso-simple \"factorial memoization jsPerf\")!! **Respuesta l\u00f3gica:** a medida que vayamos invocando a estas funciones pas\u00e1ndole n\u00fameros m\u00e1s grandes, mucho mayor va a ser la ventaja de una funci\u00f3n sobre la otra, ya que nos estamos ahorrando cada vez m\u00e1s c\u00e1lculos. **<span style=\"text-decoration: underline;\">Nota sobre el \"cache\" que usamos en mejor_factorial:<\/span>** En VB.net ser\u00eda descabellado tratar de hacer algo as\u00ed como nombreDeFuncion.cache y asignar all\u00ed un valor, o lo que sea. En javascript podemos hacer esto gracias a que podemos considerar a la funci\u00f3n como un objeto m\u00e1s, al que le podemos agregar las propiedades que queramos en tiempo de ejecuci\u00f3n. Si le hubi\u00e9ramos querido meter otra propiedad que sea numeroDeLlamadas de la misma forma que hicimos con cache, lo podr\u00edamos haber hecho tranquilamente.\n\n\n","html":"Primero que nada, quer\u00eda aclarar que conozco el t\u00e9rmino solamente en ingl\u00e9s, y no quiero entrar en <a href=\"http:\/\/cvc.cervantes.es\/foros\/leer_asunto1.asp?vCodigo=36444\">debates filos\u00f3ficos<\/a> de c\u00f3mo deber\u00edamos llamarlo en castellano; as\u00ed que adentr\u00e9monos en el tema.\r\n\r\nMemoization es una t\u00e9cnica de optimizaci\u00f3n mediante la cual se trata de mejorar la velocidad de c\u00f3mputo. \u00bfC\u00f3mo? F\u00e1cil: Una funci\u00f3n se acuerda del resultado para cierto input o grupo de par\u00e1metros, y devuelve \u00e9ste resultado en lugar de andar haciendo el c\u00e1lculo una y otra vez. Esta no es una t\u00e9cnica dependiente del lenguaje, es decir, no es algo propio de javascript, y lo vamos a encontrar tambi\u00e9n en muchos otros lenguajes.\r\n\r\nPara entender el concepto, vamos a ver una implementaci\u00f3n sencilla, para una problem\u00e1tica sencilla; pero en futuros posts vamos a estar abarcando distintos casos y variantes, y como lo implementan algunas bibliotecas.\r\n\r\nLa problem\u00e1tica sencilla de la que hablamos, es calcular el factorial de cierto n\u00famero. La implementaci\u00f3n que yo hice en javascript es la siguiente:\r\n\r\n[js]\r\nfunction factorial(num) {\r\n    if (num === 0) {\r\n        return 1;\r\n    } else {\r\n        return num * factorial(num - 1);\r\n    }\r\n}\r\n[\/js]\r\n\r\nComo se puede ver es una funci\u00f3n recursiva (se llama a si misma). Ahora, si la probamos, vamos a ver que por ejemplo\r\n\r\n[js]factorial(0);\/\/ 1\r\nfactorial(4);\/\/24[\/js]\r\n\r\nParece funcionar bien.. pero lo que queremos hacer es optimizar esta funci\u00f3n, porque a cada valor m\u00e1s grande que le pasamos como par\u00e1metro, la funci\u00f3n nos tarda mucho mas :(\r\n<!--more-->\r\n[js]\r\nfunction mejor_factorial(num) {\r\n    \/\/ si el cache no esta inicializado, lo inicializamos\r\n    if (!mejor_factorial.cache) {\r\n        mejor_factorial.cache = {};\r\n    }\r\n    if (num === 0) {\r\n        return 1;\r\n    } else if (num in mejor_factorial.cache) {\r\n    \/\/ si ya tenemos en cache el factorial de num, devolvemos\r\n    \/\/ directamente ese resultado sin hacer ningun c\u00e1lculo\r\n        return mejor_factorial.cache[num];\r\n    } else {\r\n        \/\/ como no tenemos el factorial de num en cache, lo calculamos\r\n        \/\/ y lo cacheamos para futuras invocaciones\r\n    mejor_factorial.cache[num] = num * mejor_factorial(num - 1);\r\n    return mejor_factorial.cache[num];\r\n}\r\n[\/js]\r\n[js]\r\nmejor_factorial(0);\/\/ 1\r\nmejor_factorial(4);\/\/24\r\n[\/js]\r\n\r\n<\/pre>\r\nEsperemos que con los comentarios se haya entendido qu\u00e9 es lo que se hace en cada parte del c\u00f3digo. Ahora vayamos a la posta, \u00bfEs realmente \"mucho\" m\u00e1s rapida\u00a0<span class=\"Apple-style-span\" style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px; white-space: pre;\">mejor_factorial <\/span>que\u00a0<span class=\"Apple-style-span\" style=\"font-family: Consolas, Monaco, monospace; font-size: 12px; line-height: 18px; white-space: pre;\">factorial<\/span>?\r\n\r\n<strong>Respuesta corta<\/strong>: si\r\n<strong>Respuesta pr\u00e1ctica<\/strong>: cre\u00e9 un <a title=\"factorial memoization jsPerf\" href=\"http:\/\/jsperf.com\/memoization-caso-simple\">caso de prueba en jsPerf<\/a>!!\r\n<strong>Respuesta l\u00f3gica:<\/strong> a medida que vayamos invocando a estas funciones pas\u00e1ndole n\u00fameros m\u00e1s grandes, mucho mayor va a ser la ventaja de una funci\u00f3n sobre la otra, ya que nos estamos ahorrando cada vez m\u00e1s c\u00e1lculos.\r\n\r\n<strong><span style=\"text-decoration: underline;\">Nota sobre el \"cache\" que usamos en mejor_factorial:<\/span><\/strong>\r\nEn VB.net ser\u00eda descabellado tratar de hacer algo as\u00ed como nombreDeFuncion.cache y asignar all\u00ed un valor, o lo que sea. En javascript podemos hacer esto gracias a que podemos considerar a la funci\u00f3n como un objeto m\u00e1s, al que le podemos agregar las propiedades que queramos en tiempo de ejecuci\u00f3n. Si le hubi\u00e9ramos querido meter otra propiedad que sea numeroDeLlamadas de la misma forma que hicimos con cache, lo podr\u00edamos haber hecho tranquilamente.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Sat, 12 Nov 2011 23:20:01 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:56:48 +0000","updated_by":1,"published_at":"Sat, 12 Nov 2011 23:20:01 +0000","published_by":1},{"id":416,"title":"NaNNaNNaNNaNNaN....","slug":"nannannannannan","markdown":"\n[![Imagen de batman](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/3601491300_ab28b127bb.jpg \"BATMAN!\")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/3601491300_ab28b127bb.jpg)Si, soy un gil, pero ac\u00e1 va este \"chiste\" que hab\u00eda visto dando vueltas por ah\u00ed hace un tiempo. Es una l\u00ednea de c\u00f3digo: [js] Array(10).join(\"fernet\" - 2) + \" Batman!\"; [\/js] Si desconoce el resultado de la evaluaci\u00f3n, [aqu\u00ed esta el resultado](http:\/\/jsbin.com\/ukociy \"Para los holgazanes que no abren su consola\")!!. La explicaci\u00f3n es la siguiente: 1. Se inicializa un array de 10 elementos (cada elemento es undefined).\n2. \"fernet\" - 2 devuelve NaN (Not a Number), ya que se trata de restarle 2 a \"fernet\" ( de la mima manera se devuelve NaN en cualquier tipo de parseo num\u00e9rico inv\u00e1lido - ya nos vamos a adentrar en este tema con la biblioteca jorgumJS que est\u00e1 en camino)\n3. Se aplica el [join](https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/join \"MDN - Array.join\") a este array, devolviendo el string NaNNaNNaN...\n4. Se concatenan los NaNs con Batman.\n\n No estoy muy seguro acerca de la cantidad de NaNs, si ven que est\u00e1 mal avisen.\n","html":"<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/3601491300_ab28b127bb.jpg\"><img class=\"aligncenter size-full wp-image-417\" title=\"BATMAN!\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/3601491300_ab28b127bb.jpg\" alt=\"Imagen de batman\" width=\"328\" height=\"500\" \/><!--more--><\/a>Si, soy un gil, pero ac\u00e1 va este \"chiste\" que hab\u00eda visto dando vueltas por ah\u00ed hace un tiempo. Es una l\u00ednea de c\u00f3digo:\r\n\r\n[js]\r\nArray(10).join(&quot;fernet&quot; - 2) + &quot; Batman!&quot;;\r\n[\/js]\r\n\r\nSi desconoce el resultado de la evaluaci\u00f3n, <a title=\"Para los holgazanes que no abren su consola\" href=\"http:\/\/jsbin.com\/ukociy\">aqu\u00ed esta el resultado<\/a>!!.\r\n\r\nLa explicaci\u00f3n es la siguiente:\r\n<ol>\r\n\t<li>Se inicializa un array de 10 elementos (cada elemento es undefined).<\/li>\r\n\t<li>\"fernet\" - 2 devuelve NaN (Not a Number), ya que se trata de restarle 2 a \"fernet\" ( de la mima manera se devuelve NaN en cualquier tipo de parseo num\u00e9rico inv\u00e1lido - ya nos vamos a adentrar en este tema con la biblioteca jorgumJS que est\u00e1 en camino)<\/li>\r\n\t<li>Se aplica el <a title=\"MDN - Array.join\" href=\"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/join\">join<\/a> a este array, devolviendo el string NaNNaNNaN...<\/li>\r\n\t<li>Se concatenan los NaNs con Batman.<\/li>\r\n<\/ol>\r\nNo estoy muy seguro acerca de la cantidad de NaNs, si ven que est\u00e1 mal avisen.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Sun, 13 Nov 2011 20:44:27 +0000","created_by":1,"updated_at":"Fri, 18 Nov 2011 00:08:05 +0000","updated_by":1,"published_at":"Sun, 13 Nov 2011 20:44:27 +0000","published_by":1},{"id":435,"title":"Qu\u00e9 es NodeJS?, breve introducci\u00f3n","slug":"que-es-nodejs-breve-introduccion","markdown":"\nAntes de empezar, entendamos que NodeJS est\u00e1 en desarrollo, si bien lo encuentro extremadamente divertido, hay muchas cosas que todav\u00eda se est\u00e1n puliendo. Mi poca experiencia con NodeJS fue descargarme el source y compilarlo desde Ubuntu, hoy por hoy (v0.6) tenemos un ejecutable (node.exe) para usarlo directo desde windows, en un pr\u00f3ximo post les muestro como usarlo y vamos a probar un poco de NodeIIS tambien. NodeJS es un framework para aplicaciones de red por arriba de la maquina virtual de javascript Google V8 (utilizada en el Google Chrome). NodeJS **no est\u00e1 asociado al Browser**, es decir, no hay DOM, es javascript puro del lado del servidor sin jQuery, ni Dojo, etc. Es por esto que el famoso objeto global *window* no existe pero tenemos otro que es *process*. [js] process.pid; \/\/ ID del proceso actual process.info; \/\/ Informaci\u00f3n del proceso [\/js] Arranquemos con un ejemplo de NodeJS  [js] setTimeout(function(){ console.log(\"mundo\"); }, 2000); console.log(\"hola\"); [\/js] El setTimeout en javascript recibe una funci\u00f3n como callback y un tiempo de espera para ejecutar ese callback en milisegundos. Es decir, vamos a ver que imprime un *hola* y luego de 2 segundos un *mundo*. Pero hay una diferencia a como lo har\u00edamos en otro lenguaje, por ejemplo en PHP quedar\u00eda algo as\u00ed: [php] echo(\"hola\"); sleep(2); echo(\"mundo\"); [\/php] La diferencia es que en el ejemplo de PHP imprimimos *hola*, detenemos el proceso 2 segundos e imprimimos *mundo*, **detenemos la ejecuci\u00f3n 2 segundos**. En NodeJS no estamos deteniendo el proceso, simplemente lo estamos poniendo en Iddle disparando asincr\u00f3nicamente otra funci\u00f3n dentro de 2 segundos, **en NodeJS NO detenemos la ejecuci\u00f3n**.\n\n### Construyendo un Servidor Web\n\n NodeJS viene con un m\u00f3dulo para manejar peticiones y respuestas HTTP como un Servidor web: [js] \/\/Obtenemos el modulo http var http = require('http'); \/\/creamos nuestro servidor var servidor = http.createServer(function(req, res){ \/\/ escribimos un header a la respuesta con estado 200 - OK res.writeHead(200, {'content-type': 'text\/plain'}); \/\/ finalizamos la respuesta con un end res.end('hola mundo\\n'); \/\/nuestro body }); \/\/ponemos un puerto en escucha para el servidor servidor.listen(8000); \/\/mostramos en la consola el estado console.log('Servidor Iniciado, escuchando puerto 8000'); [\/js] La funci\u00f3n que enviamos por par\u00e1metro en *createServer* es un callback y va a ser llamado cada vez que nuestro servidor reciba una petici\u00f3n. Si ahora guardamos ese c\u00f3digo en un archivo, digamos servidor.js y en el terminal ejecutamos [code] node servidor.js [\/code] Vamos a ver nuestro mensaje: *Servidor Iniciado, escuchando puerto 8000*, lo \u00fanico que nos quedar\u00eda es hacer una petici\u00f3n para ver el resultado, as\u00ed que abrimos el browser y llamamos a http:\/\/localhost:8000 ### HTTP Header de respuesta\n\n Si inspeccionamos el header de nuestra respuesta HTTP veremos: [code] HTTP\/1.1 200 OK content-type: text\/plain Connection: keep-alive Transfer-Encoding: chunked [\/code] Node nos est\u00e1 escribiendo el header con algunas cosas m\u00e1s de las que seteamos: 1. HTTP\/1.1 significa que tenemos la \u00faltima versi\u00f3n de HTTP, la cual se banca quedar conectados con el cliente.\n2. *Connection: keep-alive* es que una vez conectado, mantenga viva la conexi\u00f3n con el cliente, que no responda y se olvide que existe nuestro cliente.\n3. *Transfer-encoding: chunked* significa que voy a estar enviando informaci\u00f3n del http body asincr\u00f3nicamente hasta que lo finalice.\n\n Veamos como funciona esto: [js] var http = require('http'); var servidor = http.createServer(function(req, res){ res.writeHead(200, {'content-type': 'text\/plain'}); res.write('hola\\n'); \/\/escribo en el body \/\/dentro de 2 segundos dispara el callback setTimeout(function(){ res.end('mundo\\n'); \/\/finalizo la respuesta }, 2000); }); servidor.listen(8000); console.log('Servidor Iniciado, escuchando puerto 8000'); [\/js] Ahora por cada petici\u00f3n estoy escribiendo \"hola\", a los 2 segundos escribo \"mundo\" y cierro el body, es por eso que necesito el *Connection: keep-alive* y *Transfer-encoding: chunked*, ya que sigo escribiendo el body m\u00e1s tarde. El punto es que no sabemos que va a contener el body, cuan grande va a ser y tampoco queremos crearnos un buffer guardando toooda nuestra respuesta, mandar todo junto y ocupar memoria en el servidor. Como sabe el browser que termino nuestra respuesta?, bueno antes de HTTP 1.1 el fin de respuesta era marcado con un fin de conexi\u00f3n con el servidor, con HTTP 1.1 podemos tener la conexi\u00f3n viva y responder de a pedacitos, es por eso que necesitamos ambas propiedades en el header ***Connection: keep-alive*** y ***Transfer-Encoding: chunked***. ### Entonces?\n\n En ese tiempo entre que escribimos \"hola\" y \"mundo\" el servidor no se detuvo, no hicimos un \"sleep\", simplemente el servidor pas\u00f3 a Iddle y pudo haber recibido 1000 pedidos m\u00e1s y no por eso iba a tardar m\u00e1s, o multiplicar esos 2 segundos como si fuera un sleep. Es por eso que NodeJS maneja la concurrencia de usuarios de una forma mucho mas performante. Ahora que entendemos como funciona NodeJS, la idea no es ponerse a escribir un web-server cada vez que armemos una web, para eso existen los frameworks, los cuales tambi\u00e9n hay en NodeJS, por ejemplo [ExpressJS](http:\/\/www.expressjs.com\/ \"ExpressJS\"). Les recomiendo el incre\u00edble video que est\u00e1 en [NodeJS.org](http:\/\/nodejs.org \"NodeJS.org\") (Ingl\u00e9s) por Ryan Dahl.   \n\n","html":"Antes de empezar, entendamos que NodeJS est\u00e1 en desarrollo, si bien lo encuentro extremadamente divertido, hay muchas cosas que todav\u00eda se est\u00e1n puliendo.\r\n\r\nMi poca experiencia con NodeJS fue descargarme el source y compilarlo desde Ubuntu, hoy por hoy (v0.6) tenemos un ejecutable (node.exe) para usarlo directo desde windows, en un pr\u00f3ximo post les muestro como usarlo y vamos a probar un poco de NodeIIS tambien.\r\n\r\nNodeJS es un framework para aplicaciones de red por arriba de la maquina virtual de javascript Google V8 (utilizada en el Google Chrome).\r\n\r\nNodeJS <strong>no est\u00e1 asociado al Browser<\/strong>, es decir, no hay DOM, es javascript puro del lado del servidor sin jQuery, ni Dojo, etc. Es por esto que el famoso objeto global <em>window<\/em> no existe pero tenemos otro que es <em>process<\/em>.\r\n\r\n[js]\r\nprocess.pid; \/\/ ID del proceso actual\r\nprocess.info; \/\/ Informaci\u00f3n del proceso\r\n[\/js]\r\n\r\nArranquemos con un ejemplo de NodeJS\r\n<!--more-->\r\n[js]\r\nsetTimeout(function(){\r\n\r\n   console.log(&quot;mundo&quot;);\r\n\r\n}, 2000);\r\n\r\nconsole.log(&quot;hola&quot;);\r\n[\/js]\r\n\r\nEl setTimeout en javascript recibe una funci\u00f3n como callback y un tiempo de espera para ejecutar ese callback en milisegundos. Es decir, vamos a ver que imprime un <em>hola<\/em> y luego de 2 segundos un <em>mundo<\/em>.\r\nPero hay una diferencia a como lo har\u00edamos en otro lenguaje, por ejemplo en PHP quedar\u00eda algo as\u00ed:\r\n\r\n[php]\r\necho(&quot;hola&quot;);\r\nsleep(2);\r\necho(&quot;mundo&quot;);\r\n[\/php]\r\n\r\nLa diferencia es que en el ejemplo de PHP imprimimos <em>hola<\/em>, detenemos el proceso 2 segundos e imprimimos <em>mundo<\/em>, <strong>detenemos la ejecuci\u00f3n 2 segundos<\/strong>. En NodeJS no estamos deteniendo el proceso, simplemente lo estamos poniendo en Iddle disparando asincr\u00f3nicamente otra funci\u00f3n dentro de 2 segundos, <strong>en NodeJS NO detenemos la ejecuci\u00f3n<\/strong>.\r\n\r\n<h3>Construyendo un Servidor Web<\/h3>\r\nNodeJS viene con un m\u00f3dulo para manejar peticiones y respuestas HTTP como un Servidor web:\r\n\r\n[js]\r\n\/\/Obtenemos el modulo http\r\nvar http = require('http');\r\n\r\n\/\/creamos nuestro servidor\r\nvar servidor = http.createServer(function(req, res){\r\n\r\n\t\/\/ escribimos un header a la respuesta con estado 200 - OK\r\n\tres.writeHead(200, {'content-type': 'text\/plain'});\r\n\r\n\t\/\/ finalizamos la respuesta con un end \r\n\tres.end('hola mundo\\n'); \/\/nuestro body\r\n});\r\n\r\n\/\/ponemos un puerto en escucha para el servidor \r\nservidor.listen(8000);\r\n\r\n\/\/mostramos en la consola el estado\r\nconsole.log('Servidor Iniciado, escuchando puerto 8000');\r\n[\/js]\r\n\r\nLa funci\u00f3n que enviamos por par\u00e1metro en <em>createServer<\/em> es un callback y va a ser llamado cada vez que nuestro servidor reciba una petici\u00f3n.\r\nSi ahora guardamos ese c\u00f3digo en un archivo, digamos servidor.js y en el terminal ejecutamos \r\n\r\n[code]\r\nnode servidor.js\r\n[\/code]\r\n\r\nVamos a ver nuestro mensaje: <em>Servidor Iniciado, escuchando puerto 8000<\/em>, lo \u00fanico que nos quedar\u00eda es hacer una petici\u00f3n para ver el resultado, as\u00ed que abrimos el browser y llamamos a http:\/\/localhost:8000\r\n\r\n<h3>HTTP Header de respuesta<\/h3>\r\nSi inspeccionamos el header de nuestra respuesta HTTP veremos:\r\n\r\n[code]\r\nHTTP\/1.1 200 OK\r\ncontent-type: text\/plain\r\nConnection: keep-alive\r\nTransfer-Encoding: chunked\r\n[\/code]\r\n\r\nNode nos est\u00e1 escribiendo el header con algunas cosas m\u00e1s de las que seteamos:\r\n<ol>\r\n<li>HTTP\/1.1 significa que tenemos la \u00faltima versi\u00f3n de HTTP, la cual se banca quedar conectados con el cliente.<\/li>\r\n<li><em>Connection: keep-alive<\/em> es que una vez conectado, mantenga viva la conexi\u00f3n con el cliente, que no responda y se olvide que existe nuestro cliente.<\/li>\r\n<li><em>Transfer-encoding: chunked<\/em> significa que voy a estar enviando informaci\u00f3n del http body asincr\u00f3nicamente hasta que lo finalice.<\/li>\r\n<\/ol>\r\nVeamos como funciona esto:\r\n[js]\r\nvar http = require('http');\r\n\r\nvar servidor = http.createServer(function(req, res){\r\n\r\n   res.writeHead(200, {'content-type': 'text\/plain'});\r\n\r\n   res.write('hola\\n'); \/\/escribo en el body\r\n\r\n   \/\/dentro de 2 segundos dispara el callback \r\n   setTimeout(function(){\r\n\r\n      res.end('mundo\\n'); \/\/finalizo la respuesta\r\n\r\n   }, 2000);\r\n\r\n});\r\n\r\nservidor.listen(8000);\r\n\r\nconsole.log('Servidor Iniciado, escuchando puerto 8000');\r\n[\/js]\r\n\r\nAhora por cada petici\u00f3n estoy escribiendo \"hola\", a los 2 segundos escribo \"mundo\" y cierro el body, es por eso que necesito el <em>Connection: keep-alive<\/em> y <em>Transfer-encoding: chunked<\/em>, ya que sigo escribiendo el body m\u00e1s tarde.\r\nEl punto es que no sabemos que va a contener el body, cuan grande va a ser y tampoco queremos crearnos un buffer guardando toooda nuestra respuesta, mandar todo junto y ocupar memoria en el servidor. \r\nComo sabe el browser que termino nuestra respuesta?, bueno antes de HTTP 1.1 el fin de respuesta era marcado con un fin de conexi\u00f3n con el servidor, con HTTP 1.1 podemos tener la conexi\u00f3n viva y responder de a pedacitos, es por eso que necesitamos ambas propiedades en el header <strong><em>Connection: keep-alive<\/em><\/strong> y <strong><em>Transfer-Encoding: chunked<\/em><\/strong>.\r\n\r\n<h3>Entonces?<\/h3>\r\n\r\nEn ese tiempo entre que escribimos \"hola\" y \"mundo\" el servidor no se detuvo, no hicimos un \"sleep\", simplemente el servidor pas\u00f3 a Iddle y pudo haber recibido 1000 pedidos m\u00e1s y no por eso iba a tardar m\u00e1s, o multiplicar esos 2 segundos como si fuera un sleep. Es por eso que NodeJS maneja la concurrencia de usuarios de una forma mucho mas performante. \r\n\r\nAhora que entendemos como funciona NodeJS, la idea no es ponerse a escribir un web-server cada vez que armemos una web, para eso existen los frameworks, los cuales tambi\u00e9n hay en NodeJS, por ejemplo <a href=\"http:\/\/www.expressjs.com\/\" title=\"ExpressJS\" target=\"_blank\">ExpressJS<\/a>.\r\n\r\nLes recomiendo el incre\u00edble video que est\u00e1 en <a href=\"http:\/\/nodejs.org\" title=\"NodeJS.org\" target=\"_blank\">NodeJS.org<\/a> (Ingl\u00e9s) por Ryan Dahl.\r\n<br\/>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 16 Nov 2011 21:24:43 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:56:12 +0000","updated_by":1,"published_at":"Wed, 16 Nov 2011 21:24:43 +0000","published_by":1},{"id":594,"title":"\u00bfC\u00f3mo funciona Array.prototype?","slug":"%c2%bfcomo-funciona-array-prototype","markdown":"\nCon la propiedad prototype de la clase Array es posible agregar funcionalidad a un array o bien extender ciertos m\u00e9todos si es que existe tal necesidad. A pesar de que la clase Array tiene muchos m\u00e9todos \u00fatiles ([prototypeDef](https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/prototype \"Definici\u00f3n de prototype\")) a veces es necesario agregar m\u00e9todos que nos faciliten el desarrollo. Veamos un ejemplo sencillo para entender su funcionamiento: [js] Array.prototype.fernet = function() { console.log('Fernet + JS!'); }; var vector = []; vector.fernet(); [\/js] Con el ejemplo vemos que la funci\u00f3n 'fernet' fue agregada entre los m\u00e9todos disponibles para todos los objetos array que haya. Esto puede ser problem\u00e1tico en el caso de que necesitemos usar un ciclo del tipo 'for..in' (ver post [Usando for each con arrays](http:\/\/www.fernetjs.com\/2011\/10\/usando-for-each-con-arrays\/ \"Usando for each con arrays\")). Veamos otro ejemplo:  [js] Array.prototype.where = function(func) { var found = []; for (var i = 0, l = this.length; i < l; ++i) { var item = this[i]; if (func(item)) found.push(item); } return found; }; var conjunto = []; conjunto[0] = 0; conjunto[1] = 1; conjunto[2] = 2; conjunto[3] = 3; var resultado = conjunto.where(function(a){ return a<2?true:false; }); console.log(conjunto); console.log(resultado); [\/js] En el ejemplo vemos que se implement\u00f3 el m\u00e9todo 'where' que recibe un condici\u00f3n y devuelve un nuevo array que contiene los elementos que cumplen esa condici\u00f3n. \u00bfAhora qu\u00e9 pasa si queremos extender la funcionalidad de un determinado m\u00e9todo? Veamos este ejemplo que extiende la funcionalidad para el m\u00e9todo push: [js] Array.prototype.push=(function(){ var original = Array.prototype.push; return function() { console.log('push modificado globalmente!!'); return original.apply(this,arguments); }; })(); [\/js] Como pueden ver este m\u00e9todo modifica el m\u00e9todo push globalmente lo que har\u00e1 que cada array tenga este push modificado entre sus m\u00e9todos lo cual no es recomendable. Para evitar esto veamos lo que hace este ejemplo: [js] var arr = [1,2,3,4]; arr.push = function (){ console.log('push modificado!'); return Array.prototype.push.apply(this,arguments); }; arr.push(5); console.log(arr); var arr2 = [1,2]; arr2.push(3); console.log(arr2); [\/js] De esta forma s\u00f3lo se modifica el m\u00e9todo push para el array llamado 'arr', no siendo as\u00ed para 'arr2' que tuvo una ejecuci\u00f3n normal del m\u00e9todo. Como conclusi\u00f3n se puede decir que la propiedad prototype es una herramienta potente para agregar m\u00e9todos y extender la funcionalidad de otros aunque debe ser usada con cuidado.\n\n\n","html":"Con la propiedad prototype de la clase Array es posible agregar funcionalidad a un array o bien extender ciertos m\u00e9todos si es que existe tal necesidad. A pesar de que la clase Array tiene muchos m\u00e9todos \u00fatiles (<a href=\"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/prototype\" title=\"Definici\u00f3n de prototype\">prototypeDef<\/a>) a veces es necesario agregar m\u00e9todos que nos faciliten el desarrollo.\r\n\r\nVeamos un ejemplo sencillo para entender su funcionamiento:\r\n[js]\r\nArray.prototype.fernet = function() {\r\n    console.log('Fernet + JS!');\r\n};\r\n    \r\nvar vector = [];\r\nvector.fernet();\r\n[\/js]\r\n\r\nCon el ejemplo vemos que la funci\u00f3n 'fernet' fue agregada entre los m\u00e9todos disponibles para todos los objetos array que haya. Esto puede ser problem\u00e1tico en el caso de que necesitemos usar un ciclo del tipo 'for..in' (ver post <a href=\"http:\/\/www.fernetjs.com\/2011\/10\/usando-for-each-con-arrays\/\" title=\"Usando for each con arrays\">Usando for each con arrays<\/a>).\r\n\r\nVeamos otro ejemplo:\r\n<!--more-->\r\n[js]\r\nArray.prototype.where = function(func) {\r\n    var found = [];\r\n    for (var i = 0, l = this.length; i &lt; l; ++i) {\r\n        var item = this[i];\r\n        if (func(item))\r\n            found.push(item);\r\n    }\r\n    return found;\r\n};\r\n\r\nvar conjunto = [];\r\nconjunto[0] = 0;\r\nconjunto[1] = 1;\r\nconjunto[2] = 2;\r\nconjunto[3] = 3;\r\n\r\nvar resultado = conjunto.where(function(a){\r\n    return a&lt;2?true:false;\r\n});\r\n\r\nconsole.log(conjunto);\r\nconsole.log(resultado);\r\n[\/js]\r\n\r\nEn el ejemplo vemos que se implement\u00f3 el m\u00e9todo 'where' que recibe un condici\u00f3n y devuelve un nuevo array que contiene los elementos que cumplen esa condici\u00f3n.\r\n\r\n\u00bfAhora qu\u00e9 pasa si queremos extender la funcionalidad de un determinado m\u00e9todo? Veamos este ejemplo que extiende la funcionalidad para el m\u00e9todo push:\r\n[js]\r\nArray.prototype.push=(function(){\r\n    var original = Array.prototype.push;\r\n    return function() {\r\n        console.log('push modificado globalmente!!');\r\n        return original.apply(this,arguments);\r\n    };\r\n})();\r\n[\/js]\r\nComo pueden ver este m\u00e9todo modifica el m\u00e9todo push globalmente lo que har\u00e1 que cada array tenga este push modificado entre sus m\u00e9todos lo cual no es recomendable.\r\n\r\nPara evitar esto veamos lo que hace este ejemplo:\r\n[js]\r\nvar arr = [1,2,3,4];\r\n\r\narr.push = function (){\r\n    console.log('push modificado!');\r\n    return Array.prototype.push.apply(this,arguments);\r\n};\r\n\r\narr.push(5);\r\nconsole.log(arr);\r\n\r\nvar arr2 = [1,2];\r\narr2.push(3);\r\nconsole.log(arr2);\r\n[\/js]\r\n\r\nDe esta forma s\u00f3lo se modifica el m\u00e9todo push para el array llamado 'arr', no siendo as\u00ed para 'arr2' que tuvo una ejecuci\u00f3n normal del m\u00e9todo.\r\n\r\nComo conclusi\u00f3n se puede decir que la propiedad prototype es una herramienta potente para agregar m\u00e9todos y extender la funcionalidad de otros aunque debe ser usada con cuidado.\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":4,"created_at":"Sun, 20 Nov 2011 20:29:48 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:55:28 +0000","updated_by":1,"published_at":"Sun, 20 Nov 2011 20:29:48 +0000","published_by":1},{"id":605,"title":"jQuery .animate y .stop","slug":"jquery-animate-y-stop","markdown":"\nHoy en d\u00eda encontramos muchas animaciones en la web, muchas formas de realizarlas y muchos plugins tambi\u00e9n. Lo que vengo viendo es el uso del m\u00e9todo *.animate()* de jquery pero sin tener en cuenta su cola de animaciones (queue), por ejemplo disparando animaciones en un *mouseenter* y *mouseleave* sin detener la animaci\u00f3n que esta ocurriendo, lo que incrementa la cola de animaciones y genera una repeticion no esperada de la misma animaci\u00f3n muchas veces. Antes de empezar les dejo la documentaci\u00f3n de la API de jQuery, en mi opini\u00f3n es el punto de partida para hacer animaciones personalizadas del DOM con jQuery: [jQuery Effects](http:\/\/api.jquery.com\/category\/effects\/ \"jQuery Effects\") Veamos como hacer una animaci\u00f3n con jQuery: <iframe allowfullscreen=\"allowfullscreen\" frameborder=\"1\" src=\"http:\/\/jsfiddle.net\/pjnovas\/yjYMw\/embedded\/\" style=\"width: 100%; height: 300px\"><\/iframe> En el ejemplo estamos utilizando la implementaci\u00f3n de jQuery *.hover()* para el *mouseenter* y el *mouseleave* pas\u00e1ndole 2 handlers para cada uno y realizando una animaci\u00f3n: aumentamos el ancho y alto cuando esta sobre el div y lo disminuimos a su estado inicial cuando termina. Como funciona?, simplemente utilizando el *.animate()* enviamos par\u00e1metros como objeto de las propiedades de CSS que queremos modificar en un tiempo determinado (milisegundos) y jQuery se encarga de armar la l\u00f3gica para que suceda. [js highlight=\"2\"] $('#divAnimado').hover(function(){ $(this).animate({ width: 140, \/\/... [\/js] Pero qu\u00e9 pasa si pasamos el mouse repetidas veces antes de que termine una animaci\u00f3n?, prueben poner el mouse adentro de div y sacarlo antes de que termine la animaci\u00f3n varias veces. La animaci\u00f3n se repite cuantas veces hayamos pasado el mouse, esto es porque jQuery agrega una animaci\u00f3n a la cola (queue) cada vez que llamamos a la funci\u00f3n *.animate()* y como estamos ejecutando un *.animate()* cada vez que el mouse ingresa al div estamos \"encolando\" unas cuantas. Para arreglar esto utilizamos el m\u00e9todo *.stop()*, el cual detiene la animaci\u00f3n actual, pero tambi\u00e9n necesitamos enviarle como par\u00e1metro que limpie toda la cola actual *.stop(true)*. De esta manera lo que hacemos es:\n\n1. Detener la animaci\u00f3n actual.\n2. Limpiar la cola de animaciones.\n3. Ejecutar nuestra animaci\u00f3n.\n\n<iframe allowfullscreen=\"allowfullscreen\" frameborder=\"1\" src=\"http:\/\/jsfiddle.net\/pjnovas\/yjYMw\/29\/embedded\/\" style=\"width: 100%; height: 300px\"><\/iframe> Ahora si pasamos el mouse repetidas veces tenemos una mejor experiencia. [js highlight=\"2\"] $('#divAnimado').hover(function(){ $(this).stop(true).animate({ width: 140, \/\/... [\/js] Es muy com\u00fan ver el m\u00e9todo *.animate()*, empezar a utilizarlo y no darnos cuenta de este comportamiento, es por eso que les recomiendo que est\u00e9n al tanto del *.stop(true)*, ya que la mayor\u00eda de las veces, queremos que detenga y limpie la cola de animaciones antes de ejecutar otra animaci\u00f3n. \n","html":"Hoy en d\u00eda encontramos muchas animaciones en la web, muchas formas de realizarlas y muchos plugins tambi\u00e9n. Lo que vengo viendo es el uso del m\u00e9todo <em>.animate()<\/em> de jquery pero sin tener en cuenta su cola de animaciones (queue), por ejemplo disparando animaciones en un <em>mouseenter<\/em> y <em>mouseleave<\/em> sin detener la animaci\u00f3n que esta ocurriendo, lo que incrementa la cola de animaciones y genera una repeticion no esperada de la misma animaci\u00f3n muchas veces.\r\n\r\nAntes de empezar les dejo la documentaci\u00f3n de la API de jQuery, en mi opini\u00f3n es el punto de partida para hacer animaciones personalizadas del DOM con jQuery: <a title=\"jQuery Effects\" href=\"http:\/\/api.jquery.com\/category\/effects\/\" target=\"_blank\">jQuery Effects<\/a>\r\n\r\nVeamos como hacer una animaci\u00f3n con jQuery:\r\n<!--more-->\r\n<iframe style=\"width: 100%; height: 300px\" src=\"http:\/\/jsfiddle.net\/pjnovas\/yjYMw\/embedded\/\" allowfullscreen=\"allowfullscreen\" frameborder=\"1\"><\/iframe>\r\n\r\nEn el ejemplo estamos utilizando la implementaci\u00f3n de jQuery <em>.hover()<\/em> para el <em>mouseenter<\/em> y el <em>mouseleave<\/em> pas\u00e1ndole 2 handlers para cada uno y realizando una animaci\u00f3n: aumentamos el ancho y alto cuando esta sobre el div y lo disminuimos a su estado inicial cuando termina. Como funciona?, simplemente utilizando el <em>.animate()<\/em> enviamos par\u00e1metros como objeto de las propiedades de CSS que queremos modificar en un tiempo determinado (milisegundos) y jQuery se encarga de armar la l\u00f3gica para que suceda. \r\n\r\n[js highlight=\"2\"]\r\n$('#divAnimado').hover(function(){\r\n    $(this).animate({\r\n        width: 140,\r\n    \/\/...\r\n[\/js]\r\n\r\nPero qu\u00e9 pasa si pasamos el mouse repetidas veces antes de que termine una animaci\u00f3n?, prueben poner el mouse adentro de div y sacarlo antes de que termine la animaci\u00f3n varias veces.\r\n\r\nLa animaci\u00f3n se repite cuantas veces hayamos pasado el mouse, esto es porque jQuery agrega una animaci\u00f3n a la cola (queue) cada vez que llamamos a la funci\u00f3n <em>.animate()<\/em> y como estamos ejecutando un <em>.animate()<\/em> cada vez que el mouse ingresa al div estamos \"encolando\" unas cuantas.\r\n\r\nPara arreglar esto utilizamos el m\u00e9todo <em>.stop()<\/em>, el cual detiene la animaci\u00f3n actual, pero tambi\u00e9n necesitamos enviarle como par\u00e1metro que limpie toda la cola actual <em>.stop(true)<\/em>. \r\nDe esta manera lo que hacemos es:\r\n<ol>\r\n<li>Detener la animaci\u00f3n actual.<\/li>\r\n<li>Limpiar la cola de animaciones.<\/li>\r\n<li>Ejecutar nuestra animaci\u00f3n.<\/li>\r\n<\/ol>\r\n\r\n<iframe style=\"width: 100%; height: 300px\" src=\"http:\/\/jsfiddle.net\/pjnovas\/yjYMw\/29\/embedded\/\" allowfullscreen=\"allowfullscreen\" frameborder=\"1\"><\/iframe>\r\n\r\nAhora si pasamos el mouse repetidas veces tenemos una mejor experiencia.\r\n\r\n[js highlight=\"2\"]\r\n$('#divAnimado').hover(function(){\r\n    $(this).stop(true).animate({\r\n        width: 140,\r\n    \/\/...\r\n[\/js]\r\n\r\nEs muy com\u00fan ver el m\u00e9todo <em>.animate()<\/em>, empezar a utilizarlo y no darnos cuenta de este comportamiento, es por eso que les recomiendo que est\u00e9n al tanto del <em>.stop(true)<\/em>, ya que la mayor\u00eda de las veces, queremos que detenga y limpie la cola de animaciones antes de ejecutar otra animaci\u00f3n.\r\n\r\n\r\n\r\n\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 21 Nov 2011 20:16:05 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:54:57 +0000","updated_by":1,"published_at":"Mon, 21 Nov 2011 20:16:05 +0000","published_by":1},{"id":651,"title":"Peque\u00f1as herramientas de gran utilidad","slug":"pequenas-herramientas-gran-utilidad","markdown":"\nEn esta oportunidad, el post deber\u00eda estar minificado e ir directo al grano:\n\n### [MICROJS](http:\/\/microjs.com\/ \"microjs\")\n\n B\u00e1sicamente esta es una p\u00e1gina que reune una colecci\u00f3n de microframeworks y microbibliotecas. En promedio rondan los 2k y tienen un prop\u00f3sito espec\u00edfico.\u00a0En base a ese prop\u00f3sito es como est\u00e1n clasificadas en la p\u00e1gina. En mi caso algunas veces me d\u00ed cuenta de que me encontraba usando jQuery mientras no explotaba su funcionalidad, entonces es donde una microbiblioteca as\u00ed ser\u00eda muy \u00fatil. Creo que esto es algo que potencialmente les pasa a todos, por eso \u00a0cuando vamos a implementar nuestra aplicaci\u00f3n\u00a0hay que pensar en los pros y contras que una de estas bibliotecas pueden aportar frente a otras bibliotecas como jQuery (o incluso ninguna). Un framework compacto y con una finalidad espec\u00edfica, puede acarrear beneficios a nivel performance; al estar especializado en algo, hay m\u00e1s chances de que haga realmente bien lo que tiene que hacer, en contracara a otros frameworks grosos que hacen un mont\u00f3n de cosas, pero quiz\u00e1s cada una de esas cosas no estan tan optimizadas. Es un tradeoff que cada uno tiene que hacer, y es divertido equivocarse en la elecci\u00f3n Otras veces me d\u00ed cuenta de que quer\u00eda probar algo loco entonces entr\u00e9 ah\u00ed y empec\u00e9 a jugar con alguna biblioteca que desconoc\u00eda. Y si usted tiene una vida saludable, en los momentos de ocio p\u00f3ngase a leer el c\u00f3digo de alguna de esas libs. El c\u00f3digo de la p\u00e1gina misma [est\u00e1 disponible](https:\/\/github.com\/madrobby\/microjs.com \"microjs en github\"),\u00a0se puede forkear, y eventualmente mergean las pull requests y actualizan el sitio con tus cambios. Es decir, si quer\u00e9s agregar una microbiblioteca piola que est\u00e1 faltando, lo podes hacer!\n","html":"En esta oportunidad, el post deber\u00eda estar minificado e ir directo al grano:\r\n<h3><a title=\"microjs\" href=\"http:\/\/microjs.com\/\" target=\"_blank\">MICROJS<\/a><\/h3>\r\nB\u00e1sicamente esta es una p\u00e1gina que reune una colecci\u00f3n de microframeworks y microbibliotecas. En promedio rondan los 2k y tienen un prop\u00f3sito espec\u00edfico.\u00a0En base a ese prop\u00f3sito es como est\u00e1n clasificadas en la p\u00e1gina.\r\n\r\nEn mi caso algunas veces me d\u00ed cuenta de que me encontraba usando jQuery mientras no explotaba su funcionalidad, entonces es donde una microbiblioteca as\u00ed ser\u00eda muy \u00fatil. Creo que esto es algo que potencialmente les pasa a todos, por eso \u00a0cuando vamos a implementar nuestra aplicaci\u00f3n\u00a0hay que pensar en los pros y contras que una de estas bibliotecas pueden aportar frente a otras bibliotecas como jQuery (o incluso ninguna). Un framework compacto y con una finalidad espec\u00edfica, puede acarrear beneficios a nivel performance; al estar especializado en algo, hay m\u00e1s chances de que haga realmente bien lo que tiene que hacer, en contracara a otros frameworks grosos que hacen un mont\u00f3n de cosas, pero quiz\u00e1s cada una de esas cosas no estan tan optimizadas. Es un tradeoff que cada uno tiene que hacer, y es divertido equivocarse en la elecci\u00f3n\r\n\r\nOtras veces me d\u00ed cuenta de que quer\u00eda probar algo loco entonces entr\u00e9 ah\u00ed y empec\u00e9 a jugar con alguna biblioteca que desconoc\u00eda. Y si usted tiene una vida saludable, en los momentos de ocio p\u00f3ngase a leer el c\u00f3digo de alguna de esas libs.\r\n\r\nEl c\u00f3digo de la p\u00e1gina misma <a title=\"microjs en github\" href=\"https:\/\/github.com\/madrobby\/microjs.com\">est\u00e1 disponible<\/a>,\u00a0se puede forkear, y eventualmente mergean las pull requests y actualizan el sitio con tus cambios. Es decir, si quer\u00e9s agregar una microbiblioteca piola que est\u00e1 faltando, lo podes hacer!","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Sat, 26 Nov 2011 15:03:03 +0000","created_by":1,"updated_at":"Sat, 26 Nov 2011 15:03:03 +0000","updated_by":1,"published_at":"Sat, 26 Nov 2011 15:03:03 +0000","published_by":1},{"id":657,"title":"Dibujando en CANVAS - HTML5","slug":"dibujando-en-canvas-html5","markdown":"\nCanvas de HTML5 es simplemente un TAG, un contenedor en donde vamos a dibujar ya sea desde l\u00edneas, cuadrados y c\u00edrculos hasta im\u00e1genes y texto. Aparte de tener el poder de dibujar tenemos otra ventaja ... no utilizamos el DOM, es decir, si tuvi\u00e9ramos que realizar lo mismo con divs, spans, etc. por cada elemento vamos a estar utilizando el DOM y re-flows del explorador, pero dentro de canvas no se va a crear un elemento DOM para lo que dibujemos (ojo que al no tener DOM tampoco tenemos eventos como mouseover, click, etc. por cada elemento que dibujemos, pero si por todo el tag canvas).\n\n### Compatibilidad\n\n Hay que tener en cuenta que al ser HTML 5 no va a funcionar en cualquier explorador viejo: [caption id=\"attachment_692\" align=\"alignnone\" width=\"926\" caption=\"Compatibilidad de funciones b\u00e1sicas con exploradores\"][fuente: [Can I Use](http:\/\/caniuse.com)][![Compatibilidad de CANVAS - HTML5](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/canvas_table.jpg \"Compatibilidad de CANVAS - HTML5\")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/canvas_table.jpg)[\/caption] > Si necesitamos que funcione en IE, hay algunas opciones para lograr el soporte, les dejo la de Google: [Explore Canvas](http:\/\/code.google.com\/p\/explorercanvas\/ \"Explore Canvas\")\n\n### Configurando\n\n [html] <canvas id=\"miCanvas\" width=\"145px\" height=\"145px\"> <span>Tu explorador es anciano, renovalo si queres ver la magia<\/span> <\/canvas> [\/html] Tan simple como eso, agregamos al html el tag *<canvas>* y seteamos el tama\u00f1o. Noten que ingrese el tama\u00f1o como atributo del tag y no como CSS, es importante hacerlo as\u00ed ya que en algunos exploradores no funciona bien si lo hacemos por CSS. > Si no asignamos el *width* o *height*, por default cada uno es 160px.\n\n El contenido dentro de los tags se va a mostrar si el explorador desconoce lo que significa el tag canvas (tambien se puede poner html, no solo texto). Para comenzar a dibujar obtenemos el contexto del canvas en javascript:  [js highlight=\"2\"] var canvas = document.getElementById('miCanvas'); var contexto = canvas.getContext('2d'); [\/js] ### Dibujando\n\n Para hacerlo m\u00e1s divertido, vamos a recrear el logo de FernetJS en canvas: Comencemos por dibujar el cuadrado amarillo del fondo: [js] var canvas = document.getElementById('miCanvas'); var contexto = canvas.getContext('2d'); \/\/ le damos un color de llenado al contexto contexto.fillStyle = '#F0DB4F'; \/\/ dibujamos un cuadrado con el color de llenado contexto.fillRect(0, 10, 145, 145); \/\/ fillRect(x, y, largo, alto) \/\/ le damos al contexto un tama\u00f1o y color de linea contexto.lineWidth = 3; contexto.strokeStyle = 'black'; \/\/ dibujamos un cuadrado pero solo de contorno contexto.strokeRect(1, 10, 143, 134); \/\/ strokeRect(x, y, largo, alto) [\/js] [![](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas1.png \"ref 1\")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas1.png) Ahora dibujemos el 'JS', lo voy a escribir en el canvas para mostrarles que se puede, pero el m\u00e9todo que voy a utilizar de dibujar texto tiene graves problemas de performance, es preferible hacer una imagen o una imagen por letra y dibujar la\/s imagen\/es (como en los viejos, pero muy viejos tiempos). [js] \/\/ cambiamos el color de llenado del contexto contexto.fillStyle = '#333'; \/\/ asignamos al contexto el tipo de letra, tama\u00f1o y posicion inicial contexto.font = 'bold 64px sans-serif'; contexto.textBaseline = 'top'; \/\/ dibujamos el texto contexto.fillText('JS', 2, 5); \/\/ fillText(texto, x, y); [\/js] [![](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas2.png \"ref 2\")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas2.png) Como se dar\u00e1n cuenta a esta altura, el contexto tiene propiedades que son aplicadas al momento de dibujar un elemento. Por ejemplo *contexto.fillStyle*, ese valor lo podr\u00edamos asignar al principio de un set de dibujos y todos van a ser aplicados con el mismo color de fondo. Esto pasa con varias propiedades, *.font*, *.strokeStyle*, *.lineWidth*, etc. Pero qu\u00e9 pasa si tenemos el siguiente escenario?: 1. Seteo un estilo\n2. Dibujo con ese estilo\n3. Seteo otro estilo\n4. Dibujo con el nuevo estilo\n5. Necesito el primer estilo para dibujar algo nuevo\n\n En el \u00faltimo paso deber\u00edamos volver a ejecutar el c\u00f3digo (repetirnos) para setearle al contexto el estilo que ten\u00edamos antes. Bueno, hay dos funciones que nos ayudan en eso: [js highlight=\"4,9\"] contexto.fillStyle = 'blue'; contexto.fillRect(10, 10, 10, 10); \/\/ Dibujo cuadrado azul contexto.save(); \/\/Guardo el fillStyle = 'blue' contexto.fillStyle = 'red'; \/\/ Lo cambio a rojo contexto.fillRect(20, 20, 10, 10); \/\/ Dibujo cuadrado rojo contexto.restore(); \/\/Recupero el fillStyle = 'blue' contexto.fillRect(30, 30, 10, 10); \/\/ Dibujo cuadrado azul [\/js] Con las functiones *.save()* y *.restore()* podemos guardar y recuperar configuraciones de nuestro contexto y s\u00ed, se pueden anidar, es decir con 2 veces *.save()* y 2 veces *.restore()* vuelvo al primer estado. Volviendo con el dibujo del logo, vamos a *estirar* la palabra JS, pero para esto vamos a tener que escalar el contexto y en este momento ser\u00eda \u00fatil guardar la configuraci\u00f3n de contexto actual, as\u00ed que vamos a editar donde dibujamos la palabra: [js highlight=\"2,5,14\"] \/\/ me guardo la configuraci\u00f3n de contexto actual contexto.save(); \/\/ escalo el contexto (ampl\u00edo) contexto.scale(1.8, 2.4); \/\/.scale(ancho, alto) \/\/ dibujo la palabra JS, pero ahora con la escala contexto.fillStyle = '#333'; contexto.font = 'bold 64px sans-serif'; contexto.textBaseline = 'top'; contexto.fillText('JS', 2, 5); \/\/ recupero la configuracion del contexto guardada con .save() contexto.restore(); [\/js] [![](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas3.png \"ref 3\")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas3.png) De esta forma continuamos dibujando despu\u00e9s del *.restore()* y la configuraci\u00f3n del contexto que aplicamos para la palabra JS se elimin\u00f3. Ahora vamos a dibujar la imagen del vaso en el canvas, esta es nuestra imagen: [![](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/glassup.png \"ref \")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/glassup.png) [js highlight=\"5\"] var vaso = new Image(); vaso.onload = function() { \/\/.drawImage(imagen, x, y); contexto.drawImage(vaso, 0, 0); }; vaso.src = \"[URL DE LA IMAGEN]\"; [\/js] [![](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas4.png \"ref 4\")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas4.png) Primero creamos un objeto *Image()* de javascript, que es b\u00e1sicamente DOM, como lo genera el explorador cuando agregamos un tag *<img>* en el HTML. Luego me suscribo al evento *onload* para asegurarme que la imagen est\u00e9 cargada antes de dibujarla en el canvas. La funci\u00f3n .drawImage() tiene muchas \"sobrecargas\", use las m\u00e1s simple de todas. El par\u00e1metro de imagen tambi\u00e9n puede recibir una imagen embebida del tipo: 'data:image\/gif;base64,R0lGODlhCwA ...', lo cual nos viene genial ya que no necesitamos esperar a que se descargue porque al ser texto ya lo bajamos junto con el archivo js. Lo \u00faltimo que nos quedar\u00eda es dibujar las l\u00edneas para enfatizar el vaso. Esas l\u00edneas las podemos pensar como tri\u00e1ngulos, y para dibujarlos tenemos que armar un *path*: [js highlight=\"5,17,20\"] \/\/ seteo el estilo de llenado del contexto a negro. contexto.fillStyle = 'black'; \/\/ comienzo un path contexto.beginPath(); \/\/ muevo el puntero para empezar en (80,25) contexto.moveTo(80,25); \/\/ [1] en la imagen \/\/ dibujo una l\u00ednea hasta (115,10) contexto.lineTo(115,10); \/\/ [2] en la imagen \/\/ dibujo otra l\u00ednea desde el \u00faltimo punto hasta (125,10) contexto.lineTo(125,10); \/\/ [3] en la imagen \/\/ cierro el path, lo cual genera la \u00faltima l\u00ednea contexto.closePath(); \/\/ lleno el path con el color negro contexto.fill(); [\/js] [![](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas5.png \"ref 5\")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas5.png) Bastante bien, no?, bueno despu\u00e9s simplemente realizamos los otros tri\u00e1ngulos y nos queda el logo terminado: [![](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas6.png \"ref 6\")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas6.png) Les dejo un jsFiddle con el c\u00f3digo completo por si quieren modificarlo y hacer pruebas <iframe frameborder=\"1\" height=\"240\" src=\"http:\/\/jsfiddle.net\/pjnovas\/ZfgQG\/embedded\/\" style=\"width: 100%; height: 300px;\" width=\"320\"><\/iframe> Hay much\u00edsimo m\u00e1s por explorar en lo que respecta a CANVAS, pero es un buen punto de partida conocer de que se trata y sus funciones b\u00e1sicas.\n","html":"Canvas de HTML5 es simplemente un TAG, un contenedor en donde vamos a dibujar ya sea desde l\u00edneas, cuadrados y c\u00edrculos hasta im\u00e1genes y texto. Aparte de tener el poder de dibujar tenemos otra ventaja ... no utilizamos el DOM, es decir, si tuvi\u00e9ramos que realizar lo mismo con divs, spans, etc. por cada elemento vamos a estar utilizando el DOM y re-flows del explorador, pero dentro de canvas no se va a crear un elemento DOM para lo que dibujemos (ojo que al no tener DOM tampoco tenemos eventos como mouseover, click, etc. por cada elemento que dibujemos, pero si por todo el tag canvas).\r\n<h3>Compatibilidad<\/h3>\r\nHay que tener en cuenta que al ser HTML 5 no va a funcionar en cualquier explorador viejo:\r\n\r\n[caption id=\"attachment_692\" align=\"alignnone\" width=\"926\" caption=\"Compatibilidad de funciones b\u00e1sicas con exploradores\"][fuente: <a href=\"http:\/\/caniuse.com\">Can I Use<\/a>]<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/canvas_table.jpg\"><img class=\"size-full wp-image-692\" title=\"Compatibilidad de CANVAS - HTML5\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/canvas_table.jpg\" alt=\"Compatibilidad de CANVAS - HTML5\" width=\"926\" height=\"161\" \/><\/a>[\/caption]\r\n\r\n<blockquote>\r\nSi necesitamos que funcione en IE, hay algunas opciones para lograr el soporte, les dejo la de Google: <a title=\"Explore Canvas\" href=\"http:\/\/code.google.com\/p\/explorercanvas\/\" target=\"_blank\">Explore Canvas<\/a>\r\n<\/blockquote>\r\n\r\n<h3>Configurando<\/h3>\r\n[html]\r\n&lt;canvas id=&quot;miCanvas&quot; width=&quot;145px&quot; height=&quot;145px&quot;&gt;\r\n &lt;span&gt;Tu explorador es anciano, renovalo si queres ver la magia&lt;\/span&gt;\r\n&lt;\/canvas&gt;\r\n[\/html]\r\n\r\nTan simple como eso, agregamos al html el tag <em>&lt;canvas&gt;<\/em> y seteamos el tama\u00f1o. Noten que ingrese el tama\u00f1o como atributo del tag y no como CSS, es importante hacerlo as\u00ed ya que en algunos exploradores no funciona bien si lo hacemos por CSS. \r\n<blockquote>\r\nSi no asignamos el <em>width<\/em> o <em>height<\/em>, por default cada uno es 160px.\r\n<\/blockquote>\r\nEl contenido dentro de los tags se va a mostrar si el explorador desconoce lo que significa el tag canvas (tambien se puede poner html, no solo texto).\r\n\r\nPara comenzar a dibujar obtenemos el contexto del canvas en javascript:\r\n<!--more-->\r\n[js highlight=\"2\"]\r\nvar canvas = document.getElementById('miCanvas');\r\nvar contexto = canvas.getContext('2d');\r\n[\/js]\r\n\r\n<h3>Dibujando<\/h3>\r\nPara hacerlo m\u00e1s divertido, vamos a recrear el logo de FernetJS en canvas:\r\n\r\nComencemos por dibujar el cuadrado amarillo del fondo:\r\n\r\n[js]\r\nvar canvas = document.getElementById('miCanvas');\r\nvar contexto = canvas.getContext('2d');\r\n\r\n\/\/ le damos un color de llenado al contexto\r\ncontexto.fillStyle = '#F0DB4F';\r\n\r\n\/\/ dibujamos un cuadrado con el color de llenado\r\ncontexto.fillRect(0, 10, 145, 145); \/\/ fillRect(x, y, largo, alto)\r\n\r\n\/\/ le damos al contexto un tama\u00f1o y color de linea\r\ncontexto.lineWidth = 3;\r\ncontexto.strokeStyle = 'black';\r\n\r\n\/\/ dibujamos un cuadrado pero solo de contorno\r\ncontexto.strokeRect(1, 10, 143, 134); \/\/ strokeRect(x, y, largo, alto)\r\n[\/js]\r\n\r\n<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas1.png\"><img class=\"alignnone size-full wp-image-742\" title=\"ref 1\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas1.png\" alt=\"\" width=\"145\" height=\"145\" \/><\/a>\r\n\r\nAhora dibujemos el 'JS', lo voy a escribir en el canvas para mostrarles que se puede, pero el m\u00e9todo que voy a utilizar de dibujar texto tiene graves problemas de performance, es preferible hacer una imagen o una imagen por letra y dibujar la\/s imagen\/es (como en los viejos, pero muy viejos tiempos).\r\n\r\n[js]\r\n\/\/ cambiamos el color de llenado del contexto\r\ncontexto.fillStyle = '#333';\r\n\r\n\/\/ asignamos al contexto el tipo de letra, tama\u00f1o y posicion inicial\r\ncontexto.font = 'bold 64px sans-serif';\r\ncontexto.textBaseline = 'top';\r\n\r\n\/\/ dibujamos el texto\r\ncontexto.fillText('JS', 2, 5); \/\/ fillText(texto, x, y);\r\n[\/js]\r\n\r\n<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas2.png\"><img class=\"alignnone size-full wp-image-743\" title=\"ref 2\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas2.png\" alt=\"\" width=\"145\" height=\"145\" \/><\/a>\r\n\r\nComo se dar\u00e1n cuenta a esta altura, el contexto tiene propiedades que son aplicadas al momento de dibujar un elemento. Por ejemplo <em>contexto.fillStyle<\/em>, ese valor lo podr\u00edamos asignar al principio de un set de dibujos y todos van a ser aplicados con el mismo color de fondo. Esto pasa con varias propiedades, <em>.font<\/em>, <em>.strokeStyle<\/em>, <em>.lineWidth<\/em>, etc.\r\n\r\nPero qu\u00e9 pasa si tenemos el siguiente escenario?:\r\n<ol>\r\n\t<li>Seteo un estilo<\/li>\r\n\t<li>Dibujo con ese estilo<\/li>\r\n\t<li>Seteo otro estilo<\/li>\r\n\t<li>Dibujo con el nuevo estilo<\/li>\r\n\t<li>Necesito el primer estilo para dibujar algo nuevo<\/li>\r\n<\/ol>\r\nEn el \u00faltimo paso deber\u00edamos volver a ejecutar el c\u00f3digo (repetirnos) para setearle al contexto el estilo que ten\u00edamos antes. Bueno, hay dos funciones que nos ayudan en eso:\r\n\r\n[js highlight=\"4,9\"]\r\ncontexto.fillStyle = 'blue';\r\ncontexto.fillRect(10, 10, 10, 10);  \/\/ Dibujo cuadrado azul\r\n\r\ncontexto.save(); \/\/Guardo el fillStyle = 'blue'\r\n\r\ncontexto.fillStyle = 'red'; \/\/ Lo cambio a rojo\r\ncontexto.fillRect(20, 20, 10, 10); \/\/ Dibujo cuadrado rojo\r\n\r\ncontexto.restore(); \/\/Recupero el fillStyle = 'blue'\r\n\r\ncontexto.fillRect(30, 30, 10, 10);  \/\/ Dibujo cuadrado azul\r\n[\/js]\r\n\r\nCon las functiones <em>.save()<\/em> y <em>.restore()<\/em> podemos guardar y recuperar configuraciones de nuestro contexto y s\u00ed, se pueden anidar, es decir con 2 veces <em>.save()<\/em> y 2 veces <em>.restore()<\/em> vuelvo al primer estado.\r\n\r\nVolviendo con el dibujo del logo, vamos a <em>estirar<\/em> la palabra JS, pero para esto vamos a tener que escalar el contexto y en este momento ser\u00eda \u00fatil guardar la configuraci\u00f3n de contexto actual, as\u00ed que vamos a editar donde dibujamos la palabra:\r\n\r\n[js highlight=\"2,5,14\"]\r\n\/\/ me guardo la configuraci\u00f3n de contexto actual\r\ncontexto.save();\r\n\r\n\/\/ escalo el contexto (ampl\u00edo)\r\ncontexto.scale(1.8, 2.4);  \/\/.scale(ancho, alto)\r\n\r\n\/\/ dibujo la palabra JS, pero ahora con la escala\r\ncontexto.fillStyle = '#333';\r\ncontexto.font = 'bold 64px sans-serif';\r\ncontexto.textBaseline = 'top';\r\ncontexto.fillText('JS', 2, 5);\r\n\r\n\/\/ recupero la configuracion del contexto guardada con .save()\r\ncontexto.restore();\r\n[\/js]\r\n\r\n<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas3.png\"><img class=\"alignnone size-full wp-image-744\" title=\"ref 3\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas3.png\" alt=\"\" width=\"145\" height=\"145\" \/><\/a>\r\n\r\nDe esta forma continuamos dibujando despu\u00e9s del <em>.restore()<\/em> y la configuraci\u00f3n del contexto que aplicamos para la palabra JS se elimin\u00f3.\r\n\r\nAhora vamos a dibujar la imagen del vaso en el canvas, esta es nuestra imagen:\r\n<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/glassup.png\"><img class=\"alignnone size-full wp-image-739\" title=\"ref \" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/glassup.png\" alt=\"\" width=\"145\" height=\"145\" \/><\/a>\r\n\r\n[js highlight=\"5\"]\r\nvar vaso = new Image();\r\nvaso.onload = function() {\r\n\r\n    \/\/.drawImage(imagen, x, y);\r\n    contexto.drawImage(vaso, 0, 0);\r\n};\r\nvaso.src = &quot;[URL DE LA IMAGEN]&quot;;\r\n[\/js]\r\n\r\n<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas4.png\"><img class=\"alignnone size-full wp-image-745\" title=\"ref 4\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas4.png\" alt=\"\" width=\"145\" height=\"145\" \/><\/a>\r\n\r\nPrimero creamos un objeto <em>Image()<\/em> de javascript, que es b\u00e1sicamente DOM, como lo genera el explorador cuando agregamos un tag <em>&lt;img&gt;<\/em> en el HTML. Luego me suscribo al evento <em>onload<\/em> para asegurarme que la imagen est\u00e9 cargada antes de dibujarla en el canvas.\r\nLa funci\u00f3n .drawImage() tiene muchas \"sobrecargas\", use las m\u00e1s simple de todas. \r\nEl par\u00e1metro de imagen tambi\u00e9n puede recibir una imagen embebida del tipo: 'data:image\/gif;base64,R0lGODlhCwA ...', lo cual nos viene genial ya que no necesitamos esperar a que se descargue porque al ser texto ya lo bajamos junto con el archivo js.\r\n\r\nLo \u00faltimo que nos quedar\u00eda es dibujar las l\u00edneas para enfatizar el vaso. Esas l\u00edneas las podemos pensar como tri\u00e1ngulos, y para dibujarlos tenemos que armar un <em>path<\/em>:\r\n\r\n[js highlight=\"5,17,20\"]\r\n\/\/ seteo el estilo de llenado del contexto a negro.\r\ncontexto.fillStyle = 'black';\r\n\r\n\/\/ comienzo un path\r\ncontexto.beginPath();\r\n\r\n\/\/ muevo el puntero para empezar en (80,25)\r\ncontexto.moveTo(80,25);  \/\/ [1] en la imagen\r\n\r\n\/\/ dibujo una l\u00ednea hasta (115,10)\r\ncontexto.lineTo(115,10); \/\/ [2] en la imagen\r\n\r\n\/\/ dibujo otra l\u00ednea desde el \u00faltimo punto hasta (125,10)\r\ncontexto.lineTo(125,10);  \/\/ [3] en la imagen\r\n\r\n\/\/ cierro el path, lo cual genera la \u00faltima l\u00ednea\r\ncontexto.closePath();\r\n\r\n\/\/ lleno el path con el color negro\r\ncontexto.fill();\r\n[\/js]\r\n\r\n<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas5.png\"><img class=\"alignnone size-full wp-image-746\" title=\"ref 5\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas5.png\" alt=\"\" width=\"445\" height=\"165\" \/><\/a>\r\n\r\nBastante bien, no?, bueno despu\u00e9s simplemente realizamos los otros tri\u00e1ngulos y nos queda el logo terminado:\r\n\r\n<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas6.png\"><img class=\"alignnone size-full wp-image-747\" title=\"ref 6\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/11\/logo_canvas6.png\" alt=\"\" width=\"145\" height=\"145\" \/><\/a>\r\n\r\nLes dejo un jsFiddle con el c\u00f3digo completo por si quieren modificarlo y hacer pruebas\r\n<iframe style=\"width: 100%; height: 300px;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/ZfgQG\/embedded\/\" frameborder=\"1\" width=\"320\" height=\"240\"><\/iframe>\r\n\r\nHay much\u00edsimo m\u00e1s por explorar en lo que respecta a CANVAS, pero es un buen punto de partida conocer de que se trata y sus funciones b\u00e1sicas.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Tue, 29 Nov 2011 21:56:10 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:54:21 +0000","updated_by":1,"published_at":"Tue, 29 Nov 2011 21:56:10 +0000","published_by":1},{"id":804,"title":"Ejecuciones Asincr\u00f3nicas de funciones","slug":"ejecuciones-asincronicas-de-funciones","markdown":"\nEn javascript no tenemos la posibilidad de hacer un *new Thread()* como en otros lenguajes, pero podemos *simular* ese comportamiento y es ahi donde entran las funciones setTimeout() y setInterval():\n\n<dl><dt>**.setTimeout ( *funci\u00f3n , tiempo* )**<\/dt><dd>Ejecuta una funci\u00f3n **al** X tiempo, siendo X milisegundos<\/dd><dt>**.setInterval ( *funci\u00f3n , tiempo* )**<\/dt><dd>Ejecuta una funci\u00f3n **cada** X tiempo, siendo X milisegundos<\/dd><\/dl> As\u00ed de simple, setTimeout va a ejecutar la funcion que le enviemos por par\u00e1metro en el tiempo que le digamos y setInterval ejecuta la funci\u00f3n *n* veces esperando por cada ejecuci\u00f3n el tiempo que le digamos. Supongamos que necesitamos realizar una llamada a ajax cada *x* tiempo y refrescar una lista de entidades:  [js title=\"Utilizando 1=setTimeout\" highlight=\"4,5,6,9\" language=\"un\"] function obtenerDatos(){ \/\/ l\u00f3gica para obtener y mostrar los datos setTimeout(function(){ obtenerDatos(); }, 10000); } obtenerDatos(); [\/js] [js title=\"Utilizando 1=setInterval\" highlight=\"5,6,7\" language=\"un\"] function obtenerDatos(){ \/\/ l\u00f3gica para obtener y mostrar los datos } var relojito = setInterval(function(){ obtenerDatos(); }, 10000); [\/js] En el primer caso llamo a la funci\u00f3n y esta se llama a si misma cada 10 segundos, pero en el segundo caso inicio una llamada a la funcion con un intervalo de 10 segundos en cada llamada. > En el segundo caso (setInterval) la funci\u00f3n va a ser llamada por primera vez a los 10 segundos de setear el intervalo.\n\n Cual utilizar y cuando va a depender de lo que queramos hacer, pero es importante entender sus diferencias al momento de elejir. Y si queremos dejar de llamar a la funcion en alg\u00fan momento dado?, supongamos a la 5ta llamada. Como ser\u00eda para cada caso?: [js title=\"Utilizando 1=setTimeout\" highlight=\"1,3,7\" language=\"un\"] var cantidadDeLlamadas = 0; function obtenerDatos(){ cantidadDeLlamadas++; \/\/ l\u00f3gica para obtener y mostrar los datos if (cantidadDeLlamadas < 5) { setTimeout(function(){ obtenerDatos(); }, 10000); } } obtenerDatos(); [\/js] [js title=\"Utilizando 1=setInterval\" highlight=\"1,3,7,8\" language=\"un\"] var cantidadDeLlamadas = 0; function obtenerDatos(){ cantidadDeLlamadas++; \/\/ l\u00f3gica para obtener y mostrar los datos if (cantidadDeLlamadas === 5) clearInterval(relojito); } var relojito = setInterval(function(){ obtenerDatos(); }, 10000); [\/js] Genial, en el primer caso simplemente comprobamos la cantidad y no llamamos al setTimeout, pero en el segundo realizamos un clearInterval() de la variable donde guardamos el intervalo. Bueno, hay que tener algo muy importante en cuenta para el clearInterval. Qu\u00e9 pasa si hago lo siguiente?: [js title=\"Utilizando 1=clearInterval\" highlight=\"16,17,18\" language=\"el\"] var cantidadDeLlamadas = 0; function obtenerDatos(){ cantidadDeLlamadas++; \/\/ l\u00f3gica para obtener y mostrar los datos if (cantidadDeLlamadas === 5) clearInterval(relojito); } var relojito = setInterval(function(){ obtenerDatos(); }, 10000); \/\/ creo otro setInterval y lo guardo en la misma variable que el anterior relojito = setInterval(function(){ obtenerDatos(); }, 10000); [\/js] Lamentablemente al realizar el segundo setInterval perdimos toda referencia al primero, pero ambos siguen ejecutandose, por lo que cuando ejecute el *clearInterval(relojito)* solo va a detener el segundo intervalo, quedando el primero corriendo infinitamente sin posibilidad de detenerlo. Ahora que sabemos esto, vamos a hacer un cambio en el c\u00f3digo: [js title=\"Utilizando 1=clearInterval\" highlight=\"2,12\" language=\"el\"] var cantidadDeLlamadas = 0; var relojito; function obtenerDatos(){ cantidadDeLlamadas++; \/\/ l\u00f3gica para obtener y mostrar los datos if (cantidadDeLlamadas === 5) clearInterval(relojito); } clearInterval(relojito); relojito = setInterval(function(){ obtenerDatos(); }, 10000); [\/js] Simplemente realizo un clearInterval antes de asignarle uno nuevo, de esta manera me aseguro de no pisar un intervalo anterior al momento de crear uno. Realizar un clear antes de crear un nuevo intervalo es una recomendaci\u00f3n personal, pero creanme que puede ser muy frustrante descubrir un problema de ese tipo. \n","html":"En javascript no tenemos la posibilidad de hacer un <em>new Thread()<\/em> como en otros lenguajes, pero podemos <em>simular<\/em> ese comportamiento y es ahi donde entran las funciones setTimeout() y setInterval():\r\n\r\n<dl>\r\n<dt><strong>.setTimeout ( <em>funci\u00f3n , tiempo<\/em> )<\/strong><\/dt>\r\n<dd>Ejecuta una funci\u00f3n <strong>al<\/strong> X tiempo, siendo X milisegundos<\/dd>\r\n<dt><strong>.setInterval ( <em>funci\u00f3n , tiempo<\/em> )<\/strong><\/dt>\r\n<dd>Ejecuta una funci\u00f3n <strong>cada<\/strong> X tiempo, siendo X milisegundos<\/dd>\r\n<\/dl>\r\n\r\nAs\u00ed de simple, setTimeout va a ejecutar la funcion que le enviemos por par\u00e1metro en el tiempo que le digamos y setInterval ejecuta la funci\u00f3n <em>n<\/em> veces esperando por cada ejecuci\u00f3n el tiempo que le digamos.\r\n\r\nSupongamos que necesitamos realizar una llamada a ajax cada <em>x<\/em> tiempo y refrescar una lista de entidades:\r\n<!--more-->\r\n[js title=\"Utilizando 1=setTimeout\" highlight=\"4,5,6,9\" language=\"un\"]\r\nfunction obtenerDatos(){\r\n    \/\/ l\u00f3gica para obtener y mostrar los datos\r\n\r\n    setTimeout(function(){\r\n        obtenerDatos();\r\n    }, 10000);\r\n}\r\n\r\nobtenerDatos();\r\n[\/js]\r\n\r\n[js title=\"Utilizando 1=setInterval\" highlight=\"5,6,7\" language=\"un\"]\r\nfunction obtenerDatos(){\r\n    \/\/ l\u00f3gica para obtener y mostrar los datos\r\n}\r\n\r\nvar relojito = setInterval(function(){\r\n        obtenerDatos();\r\n    }, 10000);\r\n[\/js]\r\n\r\nEn el primer caso llamo a la funci\u00f3n y esta se llama a si misma cada 10 segundos, pero en el segundo caso inicio una llamada a la funcion con un intervalo de 10 segundos en cada llamada.\r\n\r\n<blockquote>\r\nEn el segundo caso (setInterval) la funci\u00f3n va a ser llamada por primera vez a los 10 segundos de setear el intervalo.\r\n<\/blockquote>\r\n\r\nCual utilizar y cuando va a depender de lo que queramos hacer, pero es importante entender sus diferencias al momento de elejir. \r\n\r\nY si queremos dejar de llamar a la funcion en alg\u00fan momento dado?, supongamos a la 5ta llamada. Como ser\u00eda para cada caso?:\r\n\r\n[js title=\"Utilizando 1=setTimeout\" highlight=\"1,3,7\" language=\"un\"]\r\nvar cantidadDeLlamadas = 0;\r\nfunction obtenerDatos(){\r\n    cantidadDeLlamadas++;\r\n\r\n    \/\/ l\u00f3gica para obtener y mostrar los datos\r\n\r\n    if (cantidadDeLlamadas &lt; 5) {\r\n        setTimeout(function(){\r\n             obtenerDatos();\r\n        }, 10000);\r\n    }\r\n}\r\n\r\nobtenerDatos();\r\n[\/js]\r\n\r\n[js title=\"Utilizando 1=setInterval\" highlight=\"1,3,7,8\" language=\"un\"]\r\nvar cantidadDeLlamadas = 0;\r\nfunction obtenerDatos(){\r\n    cantidadDeLlamadas++;\r\n\r\n    \/\/ l\u00f3gica para obtener y mostrar los datos\r\n\r\n    if (cantidadDeLlamadas === 5)\r\n        clearInterval(relojito);\r\n}\r\n\r\nvar relojito = setInterval(function(){\r\n        obtenerDatos();\r\n    }, 10000);\r\n[\/js]\r\n\r\nGenial, en el primer caso simplemente comprobamos la cantidad y no llamamos al setTimeout, pero en el segundo realizamos un clearInterval() de la variable donde guardamos el intervalo. Bueno, hay que tener algo muy importante en cuenta para el clearInterval. Qu\u00e9 pasa si hago lo siguiente?:\r\n\r\n[js title=\"Utilizando 1=clearInterval\" highlight=\"16,17,18\" language=\"el\"]\r\nvar cantidadDeLlamadas = 0;\r\nfunction obtenerDatos(){\r\n    cantidadDeLlamadas++;\r\n\r\n    \/\/ l\u00f3gica para obtener y mostrar los datos\r\n\r\n    if (cantidadDeLlamadas === 5)\r\n        clearInterval(relojito);\r\n}\r\n\r\nvar relojito = setInterval(function(){\r\n        obtenerDatos();\r\n    }, 10000);\r\n\r\n\/\/ creo otro setInterval y lo guardo en la misma variable que el anterior \r\nrelojito = setInterval(function(){\r\n        obtenerDatos();\r\n    }, 10000);\r\n[\/js]\r\n\r\nLamentablemente al realizar el segundo setInterval perdimos toda referencia al primero, pero ambos siguen ejecutandose, por lo que cuando ejecute el <em>clearInterval(relojito)<\/em> solo va a detener el segundo intervalo, quedando el primero corriendo infinitamente sin posibilidad de detenerlo.\r\n\r\nAhora que sabemos esto, vamos a hacer un cambio en el c\u00f3digo:\r\n\r\n[js title=\"Utilizando 1=clearInterval\" highlight=\"2,12\" language=\"el\"]\r\nvar cantidadDeLlamadas = 0;\r\nvar relojito;\r\nfunction obtenerDatos(){\r\n    cantidadDeLlamadas++;\r\n\r\n    \/\/ l\u00f3gica para obtener y mostrar los datos\r\n\r\n    if (cantidadDeLlamadas === 5)\r\n        clearInterval(relojito);\r\n}\r\n\r\nclearInterval(relojito);\r\nrelojito = setInterval(function(){\r\n        obtenerDatos();\r\n    }, 10000);\r\n\r\n[\/js]\r\n\r\nSimplemente realizo un clearInterval antes de asignarle uno nuevo, de esta manera me aseguro de no pisar un intervalo anterior al momento de crear uno. Realizar un clear antes de crear un nuevo intervalo es una recomendaci\u00f3n personal, pero creanme que puede ser muy frustrante descubrir un problema de ese tipo.\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 30 Nov 2011 19:34:23 +0000","created_by":1,"updated_at":"Fri, 02 Mar 2012 10:53:53 +0000","updated_by":1,"published_at":"Wed, 30 Nov 2011 19:34:23 +0000","published_by":1},{"id":841,"title":"Creando y utilizando callbacks","slug":"creando-y-utilizando-callbacks","markdown":"\nComo la palabra en ingl\u00e9s lo indica un callback es una \"llamada de vuelta\" y este es un concepto importante al momento de escribir c\u00f3digo. Es simple: llamo a una funcion y le env\u00edo por par\u00e1metro otra funci\u00f3n (un callback) esperando que la funci\u00f3n que llam\u00e9 se encargue de ejecutar esa funci\u00f3n *callback*. Para ver mas esto de utilizar funciones como variables pasen por [aca](http:\/\/www.fernetjs.com\/2011\/10\/alcance-de-variables-parte-2-funciones\/ \"Alcance de Variables \u2013 Parte 2: funciones\") [js] function haceAlgo(miCallback){ \/\/hago algo y llamo al callback avisando que termin\u00e9 miCallback(); } haceAlgo(function(){ console.log('termin\u00f3 de hacer algo'); }); [\/js] Tambi\u00e9n podemos enviar y recibir par\u00e1metros:  [js] function haceAlgo(miCallback){ \/\/hago algo y llamo al callback avisando que termin\u00e9 miCallback('cualquier cosa'); } haceAlgo(function(queHizo){ console.log('termin\u00f3 de hacer ' + queHizo); }); [\/js] Pero callback no significa que voy a llamar cuando termino algo, simplemente puedo tener distintos callbacks que se van llamando en determinados casos. La idea es disparar eventos en las funciones que llamaron \"avisando\" que esta sucendiendo, por ejemplo: [js] function haceAlgo(callbackPaso1, callbackPaso2, callbackTermino){ \/\/algo aca callbackPaso1('paso 1'); \/\/sigo... algo aca callbackPaso2('paso 2'); \/\/sigo ... y termino callbackTermino('termin\u00f3'); } haceAlgo( function(quePaso){ console.log(quePaso); }, function(quePaso){ console.log(quePaso); }, function(queHizo){ console.log(queHizo); }); [\/js] Tambi\u00e9n lo podemos utilizar declarando funciones nombradas y separando la l\u00f3gica: [js] function haceAlgo(callbackPaso1, callbackPaso2, callbackTermino){ \/\/algo aca callbackPaso1('paso 1'); \/\/sigo... algo aca callbackPaso2('paso 2'); \/\/sigo ... y termino callbackTermino('termin\u00f3'); } function paso1(quePaso){ console.log(quePaso); } function paso2(quePaso){ console.log(quePaso); } function termino(queHizo){ console.log(queHizo); } haceAlgo(paso1, paso2, termino); [\/js] De esta forma creamos funciones nombradas fuera de la llamada y estas a su vez podrian disparar otros eventos (con collbacks) tambien. Por \u00faltimo y no menos importante, los callbacks **No son asincr\u00f3nicos**, es decir, dispara el callback y cuando termina la ejecuci\u00f3n de esa funci\u00f3n de callback continua desde donde lo dispar\u00f3. En el ejemplo anterior dispara el *callbackPaso1()* y cuando este termina, continua continua la ejecuci\u00f3n disparando el *callbackPaso2()*. Para realizarlo asincronicamente deberiamos utilizar un [setTimeout()](http:\/\/www.fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/ \"Ejecuciones Asincr\u00f3nicas de funciones\")\n\n\n","html":"Como la palabra en ingl\u00e9s lo indica un callback es una \"llamada de vuelta\" y este es un concepto importante al momento de escribir c\u00f3digo. Es simple: llamo a una funcion y le env\u00edo por par\u00e1metro otra funci\u00f3n (un callback) esperando que la funci\u00f3n que llam\u00e9 se encargue de ejecutar esa funci\u00f3n <em>callback<\/em>.\r\n\r\nPara ver mas esto de utilizar funciones como variables pasen por <a title=\"Alcance de Variables \u2013 Parte 2: funciones\" href=\"http:\/\/www.fernetjs.com\/2011\/10\/alcance-de-variables-parte-2-funciones\/\"  target=\"_blank\">aca<\/a>\r\n\r\n[js]\r\n\r\nfunction haceAlgo(miCallback){\r\n    \/\/hago algo y llamo al callback avisando que termin\u00e9\r\n    miCallback();\r\n}\r\n\r\nhaceAlgo(function(){\r\n   console.log('termin\u00f3 de hacer algo');\r\n});\r\n\r\n[\/js]\r\n\r\nTambi\u00e9n podemos enviar y recibir par\u00e1metros:\r\n<!--more-->\r\n[js]\r\n\r\nfunction haceAlgo(miCallback){\r\n    \/\/hago algo y llamo al callback avisando que termin\u00e9\r\n    miCallback('cualquier cosa');\r\n}\r\n\r\nhaceAlgo(function(queHizo){\r\n   console.log('termin\u00f3 de hacer ' + queHizo);\r\n});\r\n\r\n[\/js]\r\n\r\nPero callback no significa que voy a llamar cuando termino algo, simplemente puedo tener distintos callbacks que se van llamando en determinados casos.\r\nLa idea es disparar eventos en las funciones que llamaron \"avisando\" que esta sucendiendo, por ejemplo:\r\n\r\n[js]\r\n\r\nfunction haceAlgo(callbackPaso1, callbackPaso2, callbackTermino){\r\n    \/\/algo aca\r\n    callbackPaso1('paso 1');\r\n\r\n    \/\/sigo... algo aca\r\n    callbackPaso2('paso 2');\r\n\r\n    \/\/sigo ... y termino\r\n    callbackTermino('termin\u00f3');\r\n}\r\n\r\nhaceAlgo(\r\n    function(quePaso){\r\n       console.log(quePaso);\r\n    },\r\n    function(quePaso){\r\n       console.log(quePaso);\r\n    },\r\n    function(queHizo){\r\n       console.log(queHizo);\r\n    });\r\n\r\n[\/js]\r\n\r\nTambi\u00e9n lo podemos utilizar declarando funciones nombradas y separando la l\u00f3gica:\r\n\r\n[js]\r\n\r\nfunction haceAlgo(callbackPaso1, callbackPaso2, callbackTermino){\r\n    \/\/algo aca\r\n    callbackPaso1('paso 1');\r\n\r\n    \/\/sigo... algo aca\r\n    callbackPaso2('paso 2');\r\n\r\n    \/\/sigo ... y termino\r\n    callbackTermino('termin\u00f3');\r\n}\r\n\r\nfunction paso1(quePaso){\r\n     console.log(quePaso);\r\n}\r\n\r\nfunction paso2(quePaso){\r\n     console.log(quePaso);\r\n}\r\n\r\nfunction termino(queHizo){\r\n     console.log(queHizo);\r\n}\r\n\r\nhaceAlgo(paso1, paso2, termino);\r\n\r\n[\/js]\r\n\r\nDe esta forma creamos funciones nombradas fuera de la llamada y estas a su vez podrian disparar otros eventos (con collbacks) tambien.\r\n\r\nPor \u00faltimo y no menos importante, los callbacks <strong>No son asincr\u00f3nicos<\/strong>, es decir, dispara el callback y cuando termina la ejecuci\u00f3n de esa funci\u00f3n de callback continua desde donde lo dispar\u00f3. En el ejemplo anterior dispara el <em>callbackPaso1()<\/em> y cuando este termina, continua continua la ejecuci\u00f3n disparando el <em>callbackPaso2()<\/em>.\r\n\r\nPara realizarlo asincronicamente deberiamos utilizar un <a title=\"Ejecuciones Asincr\u00f3nicas de funciones\" href=\"http:\/\/www.fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/\" target=\"_blank\">setTimeout()<\/a>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 01 Dec 2011 14:54:14 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:51:45 +0000","updated_by":1,"published_at":"Thu, 01 Dec 2011 14:54:14 +0000","published_by":1},{"id":801,"title":"Animando en CANVAS - HTML5","slug":"animando-en-canvas-html5","markdown":"\nContinuando con el post de [Dibujando en Canvas - HTML5](http:\/\/www.fernetjs.com\/2011\/11\/dibujando-en-canvas-html5\/ \"Dibujando en CANVAS \u2013 HTML5\") vamos a ver como animar lo que dibujamos. Animar el DOM no es tan dif\u00edcil, podemos utilizar librer\u00edas como jQuery ([jQuery .animate() y .stop()](http:\/\/www.fernetjs.com\/2011\/11\/jquery-animate-y-stop\/ \"jQuery .animate y .stop\")) o simplemente modificando las propiedades CSS, como ser top, left, width, height, etc. Pero en Canvas es distinto, ya que no poseemos de DOM para lo que dibujemos y, por lo tanto, tampoco de CSS. Tenemos que pensarlo como una secuencia de dibujar, limpiar y volver a dibujar: dibujamos un objeto en una posici\u00f3n Y, limpiamos el contexto y lo volvemos a dibujar en la posici\u00f3n Y+1, pero nos falta algo mas ... tenemos que hacerlo asincr\u00f3nicamente, realizar esos pasos cada X tiempo, as\u00ed el usuario puede apreciar la animaci\u00f3n. Ya que tenemos el logo de FernetJS en Canvas, vamos a animarlo.  Primero necesitamos un loop de animaci\u00f3n, es decir una funci\u00f3n recursiva que se ejecute cada x tiempo realizando los cambios necesarios para animar (como ser una disminuci\u00f3n de posiciones x, y de la imagen del vaso): [js highlight=\"1, 8, 16, 23\"] function loop(posX, posY) { \/\/limpio el contexto contexto.clearRect(0, 0, 145, 145); dibujarFondo(); \/\/dibujo la imagen del vaso contexto.drawImage(vaso, posX, posY); dibujarContorno(); if (posX > 0 || posY > 0) { setTimeout(function(){ \/\/llamada a s\u00ed misma restando 10 pixeles loop(posX-10, posY-10); }, 40); } else dibujarEnfasis(); } loop(150, 150); [\/js] Ese es mi loop para animar el vaso, la idea es que llamando a la funci\u00f3n loop envi\u00e1ndole las coordenadas iniciales x, y se va a llamar a s\u00ed misma cada 40 milisegundos con un [setTimeout()](http:\/\/www.fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/ \"Ejecuciones Asincr\u00f3nicas de funciones\") rest\u00e1ndole 10 pixeles a cada coordenada hasta que llegue a 0. [![](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/12\/logo_canvas7.png \"ref7\")](http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/12\/logo_canvas7.png) De esta manera podr\u00edamos encadenar animaciones y realizar de a una a medida que van terminando. Ahora podr\u00edamos hacer un [callback ](http:\/\/www.fernetjs.com\/2011\/12\/creando-y-utilizando-callbacks\/ \"Creando y utilizando callbacks\") cuando termine esa animaci\u00f3n para disparar otra: [js highlight=\"1, 17, 21\"] function animar(termino){ function loop(posX, posY) { contexto.clearRect(0, 0, 145, 145); dibujarFondo(); contexto.drawImage(vaso, posX, posY); dibujarContorno(); if (posX > 0 || posY > 0) { setTimeout(function(){ loop(posX-10, posY-10); }, 40); } else termino(); } } animar(function() { dibujarEnfasis(); \/\/realizo otra animacion o algo mas }); [\/js] Como se puede ver es bastante diferente a un .animate() de jQuery o a modificar propiedades del DOM. Si tuvi\u00e9ramos que hacer todo esto con im\u00e1genes?, funciona bien, pero es mas carga y si queremos cambiar algo tenemos que hacer las im\u00e1genes de nuevo. De esta manera vamos a tener una buena experiencia de animaci\u00f3n, mantenible y con performance ... aparte de poder realizar animaciones dibujando lo cual le da un toque mas interesante a crear im\u00e1genes. Les dejo un jsFiddle con toda la animaci\u00f3n terminada y un evento on-click en el canvas. <iframe frameborder=\"1\" height=\"240\" src=\"http:\/\/jsfiddle.net\/pjnovas\/e6zep\/embedded\/\" style=\"width: 100%; height: 300px;\" width=\"320\"><\/iframe>\n\n\n","html":"Continuando con el post de <a title=\"Dibujando en CANVAS \u2013 HTML5\" href=\"http:\/\/www.fernetjs.com\/2011\/11\/dibujando-en-canvas-html5\/\">Dibujando en Canvas - HTML5<\/a> vamos a ver como animar lo que dibujamos.\r\n\r\nAnimar el DOM no es tan dif\u00edcil, podemos utilizar librer\u00edas como jQuery (<a title=\"jQuery .animate y .stop\" href=\"http:\/\/www.fernetjs.com\/2011\/11\/jquery-animate-y-stop\/\">jQuery .animate() y .stop()<\/a>) o simplemente modificando las propiedades CSS, como ser top, left, width, height, etc. Pero en Canvas es distinto, ya que no poseemos de DOM para lo que dibujemos y, por lo tanto, tampoco de CSS. Tenemos que pensarlo como una secuencia de dibujar, limpiar y volver a dibujar: dibujamos un objeto en una posici\u00f3n Y, limpiamos el contexto y lo volvemos a dibujar en la posici\u00f3n Y+1, pero nos falta algo mas ... tenemos que hacerlo asincr\u00f3nicamente, realizar esos pasos cada X tiempo, as\u00ed el usuario puede apreciar la animaci\u00f3n.\r\n\r\nYa que tenemos el logo de FernetJS en Canvas, vamos a animarlo.\r\n<!--more-->\r\nPrimero necesitamos un loop de animaci\u00f3n, es decir una funci\u00f3n recursiva que se ejecute cada x tiempo realizando los cambios necesarios para animar (como ser una disminuci\u00f3n de posiciones x, y de la imagen del vaso):\r\n\r\n[js highlight=\"1, 8, 16, 23\"]\r\nfunction loop(posX, posY) {\r\n    \/\/limpio el contexto\r\n    contexto.clearRect(0, 0, 145, 145);\r\n\r\n    dibujarFondo();\r\n\r\n    \/\/dibujo la imagen del vaso\r\n    contexto.drawImage(vaso, posX, posY);\r\n\r\n    dibujarContorno();\r\n\r\n    if (posX &gt; 0 || posY &gt; 0) {\r\n\r\n        setTimeout(function(){\r\n            \/\/llamada a s\u00ed misma restando 10 pixeles\r\n            loop(posX-10, posY-10);\r\n        }, 40);\r\n\r\n    }\r\n    else dibujarEnfasis();\r\n}\r\n\r\nloop(150, 150);\r\n[\/js]\r\n\r\nEse es mi loop para animar el vaso, la idea es que llamando a la funci\u00f3n loop envi\u00e1ndole las coordenadas iniciales x, y se va a llamar a s\u00ed misma cada 40 milisegundos con un <a title=\"Ejecuciones Asincr\u00f3nicas de funciones\" href=\"http:\/\/www.fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/\">setTimeout()<\/a> rest\u00e1ndole 10 pixeles a cada coordenada hasta que llegue a 0.\r\n\r\n<a href=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/12\/logo_canvas7.png\"><img class=\"alignnone size-full wp-image-890\" title=\"ref7\" src=\"http:\/\/www.fernetjs.com\/wp-content\/uploads\/2011\/12\/logo_canvas7.png\" alt=\"\" width=\"270\" height=\"280\" \/><\/a>\r\n\r\nDe esta manera podr\u00edamos encadenar animaciones y realizar de a una a medida que van terminando. Ahora podr\u00edamos hacer un <a title=\"Creando y utilizando callbacks\" href=\"http:\/\/www.fernetjs.com\/2011\/12\/creando-y-utilizando-callbacks\/\">callback\r\n<\/a> cuando termine esa animaci\u00f3n para disparar otra:\r\n\r\n[js highlight=\"1, 17, 21\"]\r\nfunction animar(termino){\r\n\r\n    function loop(posX, posY) {\r\n        contexto.clearRect(0, 0, 145, 145);\r\n\r\n        dibujarFondo();\r\n\r\n        contexto.drawImage(vaso, posX, posY);\r\n\r\n        dibujarContorno();\r\n\r\n        if (posX &gt; 0 || posY &gt; 0) {\r\n            setTimeout(function(){\r\n                loop(posX-10, posY-10);\r\n            }, 40);\r\n        }\r\n        else termino();\r\n    }\r\n}\r\n\r\nanimar(function() {\r\n    dibujarEnfasis();\r\n    \/\/realizo otra animacion o algo mas\r\n});\r\n\r\n[\/js]\r\n\r\nComo se puede ver es bastante diferente a un .animate() de jQuery o a modificar propiedades del DOM. Si tuvi\u00e9ramos que hacer todo esto con im\u00e1genes?, funciona bien, pero es mas carga y si queremos cambiar algo tenemos que hacer las im\u00e1genes de nuevo. De esta manera vamos a tener una buena experiencia de animaci\u00f3n, mantenible y con performance ... aparte de poder realizar animaciones dibujando lo cual le da un toque mas interesante a crear im\u00e1genes.\r\n\r\nLes dejo un jsFiddle con toda la animaci\u00f3n terminada y un evento on-click en el canvas.\r\n<iframe style=\"width: 100%; height: 300px;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/e6zep\/embedded\/\" frameborder=\"1\" width=\"320\" height=\"240\"><\/iframe>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 07 Dec 2011 22:46:55 +0000","created_by":1,"updated_at":"Thu, 08 Dec 2011 19:36:15 +0000","updated_by":1,"published_at":"Wed, 07 Dec 2011 22:46:55 +0000","published_by":1},{"id":922,"title":"Configurando NodeJS","slug":"configurando-nodejs","markdown":"\nQueres arrancar con NodeJS?, bueno arm\u00e9 este post para que veas la opci\u00f3n que te sirve m\u00e1s y puedas estar tirando c\u00f3digo lo mas r\u00e1pido posible. NodeJS tiene un \"repositorio\" de paquetes o frameworks que pod\u00e9s utilizar mientras desarrollas, hay muchos, son todos abiertos y de muy f\u00e1cil instalaci\u00f3n. Los vas a encontrar como [NodePackageManager(NPM)](http:\/\/npmjs.org\/ \"Node Package Manager\"), y [ac\u00e1](http:\/\/search.npmjs.org\/ \"Search Node Package Manager\") los podes ver.\n\n- [Windows](#windows)\n- [Linux](#linux)\n- [Mac OS](#ios)\n- [En la Nube (Cloud 9 Ide)](#cloud9ide)\n\n- - - - - -\n\n[]()### Windows\n\n Empecemos por descargar el instalador de la pagina (node-v0.X.msi Windows installer) de [NodeJS](http:\/\/nodejs.org\/ \"NodeJS\") Simplemente corremos el instalador, abrimos la consola (cmd.exe) y probamos la version de node instalada: [cpp] node -v [\/cpp] Esto nos va a mostrar la version que instalamos, lo que nos queda es probar algo de javascript para ser felices, asi que en la consola escribimos node y presionamos enter para entrar en la consola y despues tiramos algo de js: [js] node > var prueba = 'Hola Node'; > console.log(prueba); [\/js] listo!, node instalado en windows. Para lo que respecta NPM, ya lo tenemos, vamos a ver la version: [cpp] npm -v [\/cpp] Eso es todo, ya tenemos node y npm instalado para empezar a codear. Si queremos instalar paquetes del NPM: [cpp] npm install [paquete] [\/cpp] Se van a instalar con sus dependencias solito. - - - - - -\n\n[]()### Linux\n\n Voy a ir sobre los pasos con Ubuntu pero no deber\u00edas tener problema con otra distribuci\u00f3n. En linux la forma de tener NodeJS es bajando el source (de la version que mas nos guste), compilarlo, e instalarlo. Para descargarlo se puede hacer de varias opciones, yendo a la p\u00e1gina y descargando el node-v0.X.tar.gz, o podemos usar git haciendo un clone del source. Si quieren elejir y tirar un *cURL* (o descargar) una version en particular pueden verlo en [Distribuciones de Node](http:\/\/nodejs.org\/dist\/ \"Distribuciones de Node\") Despu\u00e9s de tener el tar.gz vamos a hacer los pasos de descomprimir, crear una carpeta, configurar el paquete, compilarlo e instalarlo: Abrimos el terminal, nos posicionamos donde tenemos el .tar.gz y hacemos lo siguiente: [cpp] tar -zxf node-v0.6.5.tar.gz cd node-v0.6.5 .\/configure make sudo make install [\/cpp] Ya tenemos node!, podemos comprobarlo poniendo en el terminal: [cpp] node -v [\/cpp] y nos va a retornar la version de node instalada. Tiremos algo de codigo javascript para un momento de emoci\u00f3n: simplemente tenemos que escribir node, y darle al ENTER, para abrir la consola de node, y empezamos a tirar codigo js: [js] node > var prueba = 'Hola Node'; > console.log(prueba); [\/js] Presionamos Ctrl+C 2 veces y volvemos al terminal. Desde la version 0.6 de node ya tenemos el NPM incluido, pero por si necesitan instalarlo, en el terminal pomenos: [cpp] curl http:\/\/npmjs.org\/install.sh | sh [\/cpp] > Si no reconoce el comando cURL, no lo tienen instalado, primero ingresen en el terminal: [cpp] sudo apt-get install curl [\/cpp]\n\n listo!, comprobemos la version en el terminal: [cpp] npm -v [\/cpp] y ahora es simplemente agregar paquetes a nuestro gusto utilizando: [cpp] npm install [paquete] [\/cpp] - - - - - -\n\n[]()### Mac OS\n\n Como prerequisito tenemos que tener instalado Xcode. La forma m\u00e1s sencilla es descargar desde la p\u00e1gina el instalador para Macintosh (node-vX.pkg Macintosh installer), ejecutarlo y seguir los pasos. Por defecto instala tanto Node como NPM. Al terminar se indica que la ruta donde se copiaron los archivos es \/usr\/local\/bin. La otra forma de instalarlo es la misma que la de\u00a0[Linux](#linux)\u00a0explicada m\u00e1s arriba. Comprobamos las versi\u00f3n de node: [cpp] node -v [\/cpp] ... y de NPM: [cpp] npm -v [\/cpp] Listo! Todo en orden, tenemos NodeJS instalado en nuestra Mac. - - - - - -\n\n[]()### En la Nube (Cloud 9 Ide)\n\n Una forma interesante de usar nodejs es en la nube, no importa sobre que SO estemos, simplemente abrimos un explorador y arrancamos a escribir c\u00f3digo. [Cloud9IDE](http:\/\/cloud9ide.com\/ \"Cloud9IDE\") es una buena opci\u00f3n para empezar con NodeJS evitando instalaciones y configuraciones, y hasta es un IDE, por lo que no necesitamos nada, s\u00f3lo registrarnos en la p\u00e1gina. Trabaja con github para guardar los proyectos que realicemos por lo que es necesario tener una cuenta en gitub tambi\u00e9n, est\u00e1 todo muy bien explicado en el sitio. Y por si fuera poco, tambien tenemos la opci\u00f3n de descargarnos el IDE y trabajar en local, y est\u00e1 dentro de los del NPM: [cpp] npm install cloud9 cloud9 [\/cpp] - - - - - -\n\n**EDIT:** Les dejo [como configurar NPM si estan con un proxy](http:\/\/www.dosideas.com\/wiki\/Node.js)- - - - - -\n\n Les dejo algunos links \u00fatiles: #### GitHub\n\n- [joyent\/node](http:\/\/github.com\/joyent\/node \"joyent\/node\") (Github de NodeJS)\n- [isaacs\/npm](http:\/\/github.com\/isaacs\/npm \"isaacs\/npm\") (Github de NPM)\n\n#### NPM\n\n- [ExpressJS](http:\/\/expressjs.com\/ \"ExpressJS\") (Web para Node, con muchas utilidades como ser, routing, sesi\u00f3n, configuraciones de entorno, etc)\n- [Jade](http:\/\/jade-lang.com\/ \"Jade\") (Motor para paginas web)\n- [Socket.IO](http:\/\/socket.io\/ \"Socket.IO\") (Aplicaciones web en tiempo real, con un gran soporte de exploradores y mobile)\n- [NowJS](http:\/\/nowjs.com\/ \"NowJS\") (Aplicaciones web en tiempo real de forma muy simple, con llamadas a functiones js cliente-servidor\/ servidor-cliente)\n- [EveryAuth](http:\/\/github.com\/bnoguchi\/everyauth \"EveryAuth\") (Autenticaciones oAuth hecho simple con soporte a muchas redes sociales)\n- [Mongoose](http:\/\/mongoosejs.com\/ \"Mongoose\") (Driver para MongoDB)\n\n#### Hosting\n\n- [Nodester](http:\/\/nodester.com\/ \"Nodester\") (Hosting open-source y gratis como servicio utilizando Git)\n- [Nodejitsu](http:\/\/www.nodejitsu.com\/ \"Nodejitsu\")\n- [Heroku](http:\/\/www.heroku.com\/ \"Heroku\")\n- [SmartMachines](http:\/\/no.de\/ \"SmartMachines\")\n\n Por \u00faltimo un sitio con un ranking de recursos para Node [NodeCloud](http:\/\/www.nodecloud.org\/ \"NodeCloud\")\n","html":"Queres arrancar con NodeJS?, bueno arm\u00e9 este post para que veas la opci\u00f3n que te sirve m\u00e1s y puedas estar tirando c\u00f3digo lo mas r\u00e1pido posible.\r\n\r\nNodeJS tiene un \"repositorio\" de paquetes o frameworks que pod\u00e9s utilizar mientras desarrollas, hay muchos, son todos abiertos y de muy f\u00e1cil instalaci\u00f3n. Los vas a encontrar como <a title=\"Node Package Manager\" href=\"http:\/\/npmjs.org\/\" target=\"_blank\">NodePackageManager(NPM)<\/a>, y <a title=\"Search Node Package Manager\" href=\"http:\/\/search.npmjs.org\/\" target=\"_blank\">ac\u00e1<\/a> los podes ver.\r\n<ul>\r\n\t<li><a href=\"#windows\">Windows<\/a><\/li>\r\n\t<li><a href=\"#linux\">Linux<\/a><\/li>\r\n\t<li><a href=\"#ios\">Mac OS<\/a><\/li>\r\n\t<li><a href=\"#cloud9ide\">En la Nube (Cloud 9 Ide)<\/a><\/li>\r\n<\/ul>\r\n<!--more-->\r\n<hr\/>\r\n<a name=\"windows\" rel=\"bookmark\"><\/a>\r\n<h3>Windows<\/h3>\r\nEmpecemos por descargar el instalador de la pagina (node-v0.X.msi Windows installer) de <a title=\"NodeJS\" href=\"http:\/\/nodejs.org\/\" target=\"_blank\">NodeJS<\/a>\r\n\r\nSimplemente corremos el instalador, abrimos la consola (cmd.exe) y probamos la version de node instalada:\r\n\r\n[cpp]\r\nnode -v\r\n[\/cpp]\r\n\r\nEsto nos va a mostrar la version que instalamos, lo que nos queda es probar algo de javascript para ser felices, asi que en la consola escribimos node y presionamos enter para entrar en la consola y despues tiramos algo de js:\r\n\r\n[js]\r\nnode\r\n&gt; var prueba = 'Hola Node';\r\n&gt; console.log(prueba);\r\n[\/js]\r\n\r\nlisto!, node instalado en windows. Para lo que respecta NPM, ya lo tenemos, vamos a ver la version:\r\n\r\n[cpp]\r\nnpm -v\r\n[\/cpp]\r\n\r\nEso es todo, ya tenemos node y npm instalado para empezar a codear. Si queremos instalar paquetes del NPM:\r\n\r\n[cpp]\r\nnpm install [paquete]\r\n[\/cpp]\r\n\r\nSe van a instalar con sus dependencias solito.\r\n<hr\/>\r\n<a name=\"linux\" rel=\"bookmark\"><\/a>\r\n<h3>Linux<\/h3>\r\nVoy a ir sobre los pasos con Ubuntu pero no deber\u00edas tener problema con otra distribuci\u00f3n.\r\nEn linux la forma de tener NodeJS es bajando el source (de la version que mas nos guste), compilarlo, e instalarlo.\r\n\r\nPara descargarlo se puede hacer de varias opciones, yendo a la p\u00e1gina y descargando el node-v0.X.tar.gz, o podemos usar git haciendo un clone del source. Si quieren elejir y tirar un <em>cURL<\/em> (o descargar) una version en particular pueden verlo en <a title=\"Distribuciones de Node\" href=\"http:\/\/nodejs.org\/dist\/\" target=\"_blank\">Distribuciones de Node<\/a>\r\n\r\nDespu\u00e9s de tener el tar.gz vamos a hacer los pasos de descomprimir, crear una carpeta, configurar el paquete, compilarlo e instalarlo:\r\n\r\nAbrimos el terminal, nos posicionamos donde tenemos el .tar.gz y hacemos lo siguiente:\r\n\r\n[cpp]\r\ntar -zxf node-v0.6.5.tar.gz\r\ncd node-v0.6.5\r\n.\/configure\r\nmake\r\nsudo make install\r\n[\/cpp]\r\n\r\nYa tenemos node!, podemos comprobarlo poniendo en el terminal:\r\n\r\n[cpp]\r\nnode -v\r\n[\/cpp]\r\n\r\ny nos va a retornar la version de node instalada.\r\n\r\nTiremos algo de codigo javascript para un momento de emoci\u00f3n: simplemente tenemos que escribir node, y darle al ENTER, para abrir la consola de node, y empezamos a tirar codigo js:\r\n\r\n[js]\r\nnode\r\n&gt; var prueba = 'Hola Node';\r\n&gt; console.log(prueba);\r\n[\/js]\r\n\r\nPresionamos Ctrl+C 2 veces y volvemos al terminal.\r\n\r\nDesde la version 0.6 de node ya tenemos el NPM incluido, pero por si necesitan instalarlo, en el terminal pomenos:\r\n\r\n[cpp]\r\ncurl http:\/\/npmjs.org\/install.sh | sh\r\n[\/cpp]\r\n<blockquote>Si no reconoce el comando cURL, no lo tienen instalado, primero ingresen en el terminal:\r\n\r\n[cpp]\r\nsudo apt-get install curl\r\n[\/cpp]<\/blockquote>\r\nlisto!, comprobemos la version en el terminal:\r\n\r\n[cpp]\r\nnpm -v\r\n[\/cpp]\r\n\r\ny ahora es simplemente agregar paquetes a nuestro gusto utilizando:\r\n\r\n[cpp]\r\nnpm install [paquete]\r\n[\/cpp]\r\n<hr\/>\r\n<a name=\"ios\" rel=\"bookmark\"><\/a>\r\n<h3>Mac OS<\/h3>\r\nComo prerequisito tenemos que tener instalado Xcode.\r\n\r\nLa forma m\u00e1s sencilla es descargar desde la p\u00e1gina el instalador para Macintosh (node-vX.pkg Macintosh installer), ejecutarlo y seguir los pasos. Por defecto instala tanto Node como NPM.\r\n\r\nAl terminar se indica que la ruta donde se copiaron los archivos es \/usr\/local\/bin.\r\n\r\nLa otra forma de instalarlo es la misma que la de\u00a0<a href=\"#linux\">Linux<\/a>\u00a0explicada m\u00e1s arriba.\r\n\r\nComprobamos las versi\u00f3n de node:\r\n\r\n[cpp]\r\nnode -v\r\n[\/cpp]\r\n\r\n... y de NPM:\r\n\r\n[cpp]\r\nnpm -v\r\n[\/cpp]\r\n\r\nListo! Todo en orden, tenemos NodeJS instalado en nuestra Mac.\r\n<hr\/>\r\n<a name=\"cloud9ide\" rel=\"bookmark\"><\/a>\r\n<h3>En la Nube (Cloud 9 Ide)<\/h3>\r\nUna forma interesante de usar nodejs es en la nube, no importa sobre que SO estemos, simplemente abrimos un explorador y arrancamos a escribir c\u00f3digo. <a title=\"Cloud9IDE\" href=\"http:\/\/cloud9ide.com\/\" target=\"_blank\">Cloud9IDE<\/a> es una buena opci\u00f3n para empezar con NodeJS evitando instalaciones y configuraciones, y hasta es un IDE, por lo que no necesitamos nada, s\u00f3lo registrarnos en la p\u00e1gina.\r\nTrabaja con github para guardar los proyectos que realicemos por lo que es necesario tener una cuenta en gitub tambi\u00e9n, est\u00e1 todo muy bien explicado en el sitio.\r\nY por si fuera poco, tambien tenemos la opci\u00f3n de descargarnos el IDE y trabajar en local, y est\u00e1 dentro de los del NPM:\r\n\r\n[cpp]\r\nnpm install cloud9\r\ncloud9\r\n[\/cpp]\r\n<hr\/>\r\n\r\n<strong>EDIT:<\/strong> Les dejo <a href=\"http:\/\/www.dosideas.com\/wiki\/Node.js\">como configurar NPM si estan con un proxy<\/a> \r\n<hr\/>\r\n\r\nLes dejo algunos links \u00fatiles:\r\n<h4>GitHub<\/h4>\r\n<ul>\r\n\t<li><a title=\"joyent\/node\" href=\"http:\/\/github.com\/joyent\/node\" target=\"_blank\">joyent\/node<\/a> (Github de NodeJS)<\/li>\r\n\t<li><a title=\"isaacs\/npm\" href=\"http:\/\/github.com\/isaacs\/npm\" target=\"_blank\">isaacs\/npm<\/a> (Github de NPM)<\/li>\r\n<\/ul>\r\n<h4>NPM<\/h4>\r\n<ul>\r\n\t<li><a title=\"ExpressJS\" href=\"http:\/\/expressjs.com\/\" target=\"_blank\">ExpressJS<\/a> (Web para Node, con muchas utilidades como ser, routing, sesi\u00f3n, configuraciones de entorno, etc)<\/li>\r\n\t<li><a title=\"Jade\" href=\"http:\/\/jade-lang.com\/\" target=\"_blank\">Jade<\/a> (Motor para paginas web)<\/li>\r\n\t<li><a title=\"Socket.IO\" href=\"http:\/\/socket.io\/\" target=\"_blank\">Socket.IO<\/a> (Aplicaciones web en tiempo real, con un gran soporte de exploradores y mobile)<\/li>\r\n\t<li><a title=\"NowJS\" href=\"http:\/\/nowjs.com\/\" target=\"_blank\">NowJS<\/a> (Aplicaciones web en tiempo real de forma muy simple, con llamadas a functiones js cliente-servidor\/ servidor-cliente)<\/li>\r\n\t<li><a title=\"EveryAuth\" href=\"http:\/\/github.com\/bnoguchi\/everyauth\" target=\"_blank\">EveryAuth<\/a> (Autenticaciones oAuth hecho simple con soporte a muchas redes sociales)<\/li>\r\n\t<li><a title=\"Mongoose\" href=\"http:\/\/mongoosejs.com\/\" target=\"_blank\">Mongoose<\/a> (Driver para MongoDB)<\/li>\r\n<\/ul>\r\n<h4>Hosting<\/h4>\r\n<ul>\r\n\t<li><a title=\"Nodester\" href=\"http:\/\/nodester.com\/\" target=\"_blank\">Nodester<\/a> (Hosting open-source y gratis como servicio utilizando Git)<\/li>\r\n\t<li><a title=\"Nodejitsu\" href=\"http:\/\/www.nodejitsu.com\/\" target=\"_blank\">Nodejitsu<\/a><\/li>\r\n\t<li><a title=\"Heroku\" href=\"http:\/\/www.heroku.com\/\" target=\"_blank\">Heroku<\/a><\/li>\r\n\t<li><a title=\"SmartMachines\" href=\"http:\/\/no.de\/\" target=\"_blank\">SmartMachines<\/a><\/li>\r\n<\/ul>\r\nPor \u00faltimo un sitio con un ranking de recursos para Node <a title=\"NodeCloud\" href=\"http:\/\/www.nodecloud.org\/\" target=\"_blank\">NodeCloud<\/a>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Fri, 09 Dec 2011 20:24:41 +0000","created_by":1,"updated_at":"Sat, 11 Feb 2012 10:32:33 +0000","updated_by":1,"published_at":"Fri, 09 Dec 2011 20:24:41 +0000","published_by":1},{"id":1042,"title":"Que es jQuery?","slug":"que-es-jquery","markdown":"\njQuery es una libreria, una referencia a un js en nuestro documento HTML para trabajar en el cliente con el [DOM](http:\/\/fernetjs.com\/2011\/10\/introduccion\/ \"DOM\") de una manera mucho mas f\u00e1cil y legible. jQuery NO es un lenguaje de programaci\u00f3n, ni tampoco la soluci\u00f3n a todos tus problemas. Esto \u00faltimo es dificil de entender para muchos programadores. Si bien jQuery nos brinda muchas facilidades, no nos resuelve todos los problemas y hay muchos casos en los que es mejor no usarlo y no abusar de su grandioso *selector* (en un ratito vuelvo con un ejemplo)\n\n### $() ... qu\u00e9 es eso?, por qu\u00e9?\n\n Pensemos a jQuery como una funci\u00f3n, si ... simplemente una funci\u00f3n que recibe parametros. La funci\u00f3n est\u00e1 nombrada como jQuery(*parametros*), por ejemplo:  [js] var todosLosDivs = jQuery('div'); [\/js] Llamamos a la funci\u00f3n jQuery pasandole como par\u00e1metro un string, en \u00e9ste caso 'div' y eso nos retornar\u00e1 todos los *divs* en nuestro documento. Bueno, a esto se le llama *selector*, un *selector* es un cadena (string) en la cual, por medio de standares como ser CSS, xPath, customs de jQuery, etc; definimos lo que vamos a buscar en nuestro documento. Y el signo $?, bueno, $() es lo mismo que jQuery(). Es un nombre alias para lo mismo, como javascript permite nombres de variables y funciones que empiecen con $ tenemos declarado ese alias para ahorrarnos escribir jQuery(), por lo que usando el ejemplo anterior, esto es lo mismo: [js] var todosLosDivs = $('div'); [\/js] ### Selectores\n\n Como dije, es una cadena (string) en la cual definimos lo que queremos buscar. Pensemoslo como un *query* aplicado al DOM. Hay muchos tipos de selectores, ya sean: [js title=\"por CSS\"] var divs_con_clase_foo = $('div.foo'); var elemento_con_id_baz = $('#baz'); [\/js] [js title=\"por Atributos\"] var inputs_con_id_termina_en_chau = $('input[id$=chau]'); var botones = $('input[type=button]'); var checkboxs = $('input[type=checkbox]'); [\/js] [js title=\"customs de jQuery\"] var botones = $(':button'); var checkboxs = $(':checkbox'); var checkboxs_con_checked_true = $(':checkbox :checked'); [\/js] Hay muchas formas m\u00e1s de *seleccionar* o hacer un *query* en el DOM, por ejemplo enviandole un elemento *nativo* de DOM: [js] var ele = document.getElementById('miElemento'); var boton = $(ele); [\/js] Pero no termina ah\u00ed, el punto no es solo *buscar* de una manera mas f\u00e1cil en el DOM, sino tambi\u00e9n manipularlo. Lo que nos devuelve esa b\u00fasqueda es un objeto de jQuery (conocido como *jQuery wrapped set*, o envoltorio de jQuery), este objeto es un arreglo de elementos DOM, a los cuales les podemos aplicar alguna funci\u00f3n de todas las que nos brinda jQuery, por ejemplo, agregarles a todos una clase CSS 'baz': [js] var divs = $('div.foo'); if (divs.length > 0) { divs.addClass('baz'); } [\/js] Como se puede ver tengo un atributo *length* y ya que es un arreglo puedo comprobar cuantos elementos encontr\u00f3. Despues le agregamos la clase CSS a todos los elementos. ### Listo!, soluciona mi vida?: NO\n\n jQuery no es la soluci\u00f3n a tu vida con javascript y el DOM, esos *queries* que hacemos necesitan procesamiento, tambi\u00e9n crear el jquery wrapper, y no queremos procesamientos con uso de memoria si no son necesarios. Un ejemplo muy com\u00fan donde pierde sentido es: [js] $('.boton').bind('click', function(){ var id_del_boton = $(this).attr('id'); if (id === 'foo') { \/\/ algo } }); [\/js] Lo que estoy haciendo es bindear el evento *click* de un bot\u00f3n y cuando se dispare compruebo su id y realizo algo. Bueno, es muy com\u00fan que en el primer amor a jQuery hagamos ese tipo de cosas, donde estamos creando un objeto jQuery solo para comprobar su id, algo que es mejor hacer utlizando el atributo nativo: [js] $('.boton').bind('click', function(){ if (this.id === 'foo') { \/\/ algo } }); [\/js] Ese es uno, entre otros ejemplos en donde NO es necesario usar jQuery. jQuery es mi librer\u00eda favorita para el uso del DOM, pero hay que usarla cuando es necesario. Es importante entender que nos ayudda mucho, pero **s\u00f3lo para lo que fue creada**. \n","html":"jQuery es una libreria, una referencia a un js en nuestro documento HTML para trabajar en el cliente con el <a href=\"http:\/\/fernetjs.com\/2011\/10\/introduccion\/\" title=\"DOM\" target=\"_blank\">DOM<\/a> de una manera mucho mas f\u00e1cil y legible. \r\njQuery NO es un lenguaje de programaci\u00f3n, ni tampoco la soluci\u00f3n a todos tus problemas. Esto \u00faltimo es dificil de entender para muchos programadores. Si bien jQuery nos brinda muchas facilidades, no nos resuelve todos los problemas y hay muchos casos en los que es mejor no usarlo y no abusar de su grandioso <em>selector<\/em> (en un ratito vuelvo con un ejemplo)\r\n\r\n<h3>$() ... qu\u00e9 es eso?, por qu\u00e9?<\/h3>\r\nPensemos a jQuery como una funci\u00f3n, si ... simplemente una funci\u00f3n que recibe parametros. La funci\u00f3n est\u00e1 nombrada como jQuery(<em>parametros<\/em>), por ejemplo:\r\n<!--more-->\r\n[js]\r\nvar todosLosDivs = jQuery('div');\r\n[\/js]\r\n\r\nLlamamos a la funci\u00f3n jQuery pasandole como par\u00e1metro un string, en \u00e9ste caso 'div' y eso nos retornar\u00e1 todos los <em>divs<\/em> en nuestro documento. Bueno, a esto se le llama <em>selector<\/em>, un <em>selector<\/em> es un cadena (string) en la cual, por medio de standares como ser CSS, xPath, customs de jQuery, etc; definimos lo que vamos a buscar en nuestro documento. \r\n\r\nY el signo $?, bueno, $() es lo mismo que jQuery(). Es un nombre alias para lo mismo, como javascript permite nombres de variables y funciones que empiecen con $ tenemos declarado ese alias para ahorrarnos escribir jQuery(), por lo que usando el ejemplo anterior, esto es lo mismo:\r\n\r\n[js]\r\nvar todosLosDivs = $('div');\r\n[\/js]\r\n\r\n<h3>Selectores<\/h3>\r\nComo dije, es una cadena (string) en la cual definimos lo que queremos buscar. Pensemoslo como un <em>query<\/em> aplicado al DOM. Hay muchos tipos de selectores, ya sean:\r\n\r\n[js title=\"por CSS\"]\r\nvar divs_con_clase_foo = $('div.foo');\r\nvar elemento_con_id_baz = $('#baz');\r\n[\/js]\r\n\r\n[js title=\"por Atributos\"]\r\nvar inputs_con_id_termina_en_chau = $('input[id$=chau]');\r\nvar botones = $('input[type=button]');\r\nvar checkboxs = $('input[type=checkbox]');\r\n[\/js]\r\n\r\n[js title=\"customs de jQuery\"]\r\nvar botones = $(':button');\r\nvar checkboxs = $(':checkbox');\r\nvar checkboxs_con_checked_true = $(':checkbox :checked');\r\n[\/js]\r\n\r\nHay muchas formas m\u00e1s de <em>seleccionar<\/em> o hacer un <em>query<\/em> en el DOM, por ejemplo enviandole un elemento <em>nativo<\/em> de DOM:\r\n\r\n[js]\r\nvar ele = document.getElementById('miElemento');\r\nvar boton = $(ele);\r\n[\/js]\r\n\r\nPero no termina ah\u00ed, el punto no es solo <em>buscar<\/em> de una manera mas f\u00e1cil en el DOM, sino tambi\u00e9n manipularlo. Lo que nos devuelve esa b\u00fasqueda es un objeto de jQuery (conocido como <em>jQuery wrapped set<\/em>, o envoltorio de jQuery), este objeto es un arreglo de elementos DOM, a los cuales les podemos aplicar alguna funci\u00f3n de todas las que nos brinda jQuery, por ejemplo, agregarles a todos una clase CSS 'baz':\r\n\r\n[js]\r\nvar divs = $('div.foo');\r\nif (divs.length &gt; 0) {\r\n    divs.addClass('baz');\r\n}\r\n[\/js]\r\n\r\nComo se puede ver tengo un atributo <em>length<\/em> y ya que es un arreglo puedo comprobar cuantos elementos encontr\u00f3. Despues le agregamos la clase CSS a todos los elementos.\r\n\r\n<h3>Listo!, soluciona mi vida?: NO<\/h3>\r\njQuery no es la soluci\u00f3n a tu vida con javascript y el DOM, esos <em>queries<\/em> que hacemos necesitan procesamiento, tambi\u00e9n crear el jquery wrapper, y no queremos procesamientos con uso de memoria si no son necesarios. Un ejemplo muy com\u00fan donde pierde sentido es:\r\n\r\n[js]\r\n$('.boton').bind('click', function(){\r\n    var id_del_boton = $(this).attr('id');\r\n    if (id === 'foo') {\r\n       \/\/ algo\r\n    }\r\n});\r\n[\/js]\r\n\r\nLo que estoy haciendo es bindear el evento <em>click<\/em> de un bot\u00f3n y cuando se dispare compruebo su id y realizo algo. Bueno, es muy com\u00fan que en el primer amor a jQuery hagamos ese tipo de cosas, donde estamos creando un objeto jQuery solo para comprobar su id, algo que es mejor hacer utlizando el atributo nativo:\r\n\r\n[js]\r\n$('.boton').bind('click', function(){\r\n    if (this.id === 'foo') {\r\n       \/\/ algo\r\n    }\r\n});\r\n[\/js]\r\n\r\nEse es uno, entre otros ejemplos en donde NO es necesario usar jQuery.\r\n\r\njQuery es mi librer\u00eda favorita para el uso del DOM, pero hay que usarla cuando es necesario. Es importante entender que nos ayudda mucho, pero <strong>s\u00f3lo para lo que fue creada<\/strong>. \r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 14 Dec 2011 00:10:59 +0000","created_by":1,"updated_at":"Thu, 15 Dec 2011 12:04:17 +0000","updated_by":1,"published_at":"Wed, 14 Dec 2011 00:10:59 +0000","published_by":1},{"id":1022,"title":"La era del package.json","slug":"la-era-del-package-json","markdown":"\nLeyendo sobre \"[el que pas\u00f3](http:\/\/blog.jquery.com\/2011\/12\/08\/what-is-happening-to-the-jquery-plugins-site\/)\" con la p\u00e9rdida de la base de datos de jquery plugins por *Adam J. Sontag* hace referencia a empezar a utilizar el archivo package.json para marcar dependencias y versiones de los futuros plugins que se desarrollen, como lo hace [NPM](http:\/\/www.npm.org\/ \"Node Package Manager\") y muchos otros proyectos en [GitHub](https:\/\/github.com\/ \"GitHub\"). No es algo muy nuevo, yo lo desconocia hasta que *Matias Arriola* me lo mostr\u00f3 en una de las juntadas de FernetJS. Este archivo (o mejor dicho standard) nace desde una especificaci\u00f3n de implementaciones para paquetes de javascript (server-side) por [CommonJS](http:\/\/www.commonjs.org \"CommonJS\") Simplemente es crear un archivo con el nombre package.json en el root del paquete\/ proyecto con su informaci\u00f3n, dependecias y otras *yerbas*. Un ejemplo ser\u00eda: [js] { \"name\": \"miPaquete\" , \"version\": \"0.0.1\" , \"description\": \"un paquete de nodeJs con dependencias a express y socket.io de NPM.\" , \"dependencies\": { \"express\": \"2.5.1\" , \"socket.io\": \">= 0.2.3\" } } [\/js] B\u00e1sicamente definimos el *nombre* del paquete, su *versi\u00f3n* y *descripci\u00f3n*, tambi\u00e9n podemos definir dependencias con otros paquetes. Como ver\u00e1n, es un json (Javascript Object Notation), si desconocen [JSON](http:\/\/json.org\/), es un buen momento para aprenderlo. Ya que es algo nuevo para mi, y lo estoy viendo por todos lados, quer\u00eda compartirlo. [Aca](http:\/\/wiki.commonjs.org\/wiki\/Packages\/1.1 \"Packages 1.1 - CommonJS\") pueden encontrar la especificaci\u00f3n completa.\n\n\n","html":"Leyendo sobre \"<a href=\"http:\/\/blog.jquery.com\/2011\/12\/08\/what-is-happening-to-the-jquery-plugins-site\/\" target=\"_blank\">el que pas\u00f3<\/a>\" con la p\u00e9rdida de la base de datos de jquery plugins por <em>Adam J. Sontag<\/em> hace referencia a empezar a utilizar el archivo package.json para marcar dependencias y versiones de los futuros plugins que se desarrollen, como lo hace <a href=\"http:\/\/www.npm.org\/\" title=\"Node Package Manager\" target=\"_blank\">NPM<\/a> y muchos otros proyectos en <a href=\"https:\/\/github.com\/\" title=\"GitHub\" target=\"_blank\">GitHub<\/a>. No es algo muy nuevo, yo lo desconocia hasta que <em>Matias Arriola<\/em> me lo mostr\u00f3 en una de las juntadas de FernetJS.\r\n\r\nEste archivo (o mejor dicho standard) nace desde una especificaci\u00f3n de implementaciones para paquetes de javascript (server-side) por <a href=\"http:\/\/www.commonjs.org\" title=\"CommonJS\" target=\"_blank\">CommonJS<\/a>\r\n\r\nSimplemente es crear un archivo con el nombre package.json en el root del paquete\/ proyecto con su informaci\u00f3n, dependecias y otras <em>yerbas<\/em>. Un ejemplo ser\u00eda:\r\n\r\n[js]\r\n{\r\n    &quot;name&quot;: &quot;miPaquete&quot;\r\n  , &quot;version&quot;: &quot;0.0.1&quot;\r\n  , &quot;description&quot;: &quot;un paquete de nodeJs con dependencias a express y socket.io de NPM.&quot;\r\n  , &quot;dependencies&quot;: {\r\n      &quot;express&quot;: &quot;2.5.1&quot;\r\n    , &quot;socket.io&quot;: &quot;&gt;= 0.2.3&quot;\r\n  }\r\n}\r\n[\/js]\r\n\r\nB\u00e1sicamente definimos el <em>nombre<\/em> del paquete, su <em>versi\u00f3n<\/em> y <em>descripci\u00f3n<\/em>, tambi\u00e9n podemos definir dependencias con otros paquetes.\r\nComo ver\u00e1n, es un json (Javascript Object Notation), si desconocen <a href=\"http:\/\/json.org\/\" target=\"_blank\">JSON<\/a>, es un buen momento para aprenderlo.\r\n\r\nYa que es algo nuevo para mi, y lo estoy viendo por todos lados, quer\u00eda compartirlo.\r\n<a href=\"http:\/\/wiki.commonjs.org\/wiki\/Packages\/1.1\" title=\"Packages 1.1 - CommonJS\" target=\"_blank\">Aca<\/a> pueden encontrar la especificaci\u00f3n completa.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 15 Dec 2011 12:06:49 +0000","created_by":1,"updated_at":"Thu, 15 Dec 2011 12:08:32 +0000","updated_by":1,"published_at":"Thu, 15 Dec 2011 12:06:49 +0000","published_by":1},{"id":1086,"title":"ECMAScript 5.1 - Strict Mode y JSON ","slug":"ecmascript-5-1-strict-mode-y-json","markdown":"\nYa podemos empezar a utilizar lo nuevo del [ECMAScript](http:\/\/en.wikipedia.org\/wiki\/ECMAScript) en los \u00faltimos exploradores. Estas son dos interesantes del [nuevo standard (5.1)](http:\/\/www.ecma-international.org\/publications\/standards\/Ecma-262.htm):\n\n- Strict Mode\n- JSON\n\nSoporte de exploradores (para los temas de este post, no todo el ECMAScript 5.1): - Firefox 4\n- Chrome 13\n- Safari 5.1\n- Opera 11.6\n- Internet Explorer 9 (s\u00f3lo *JSON*, *Strict Mode* va a estar para la versi\u00f3n 10)\n\n- - - - - -\n\n### Strict Mode\n\n Aplicando el Modo Estricto en el c\u00f3digo es una forma de restringir lo que hacemos en nuestro javascript validando *esas cosas* que javascript nos deja hacer y despues tenemos problemas dif\u00edciles de solucionar. [js] \"use strict\"; [\/js] Eso es todo, simplemente un string y el interpretador se va a encargar de usarlo. Al ser un string, los exploradores que no lo conocen simplemente no lo van a utilizar, pero tampoco va a dar ningun tipo de error. Lo interesante de este *modo* es que nos ayuda a programar de una forma *m\u00e1s sana* en javascript, alguna de las cosas que nos va a validar: <dl><dt>**variables**<\/dt><dd> Declaraci\u00f3n de variables obligatoria: Dispara un error si asignamos una variable que no declaramos con var previamente. [js] function variables(){ var foo; bus = true; \/\/ Error foo = true \/\/OK var baz = true \/\/OK } [\/js] <\/dd><dt>**delete**<\/dt><dd> Utilizar *delete* para borrar una variable, funci\u00f3n o argumento dispara un error. [js] var foo = true; delete foo; \/\/ Error function mifuncion(){} delete mifuncion; \/\/ Error function mifunction2(args) { delete args; \/\/ Error } [\/js] <\/dd><dt>**eval y with**<\/dt><dd> Utilizar *eval* o *with* est\u00e1 prohibido, por lo que cualquier uso de los mismos dispara un error. [js] eval(\"alert('algo');\"); \/\/ Error with document { \/\/ Error write('algo1'); write('algo2'); } [\/js] <\/dd><dt>**propiedades o parametros duplicados**<\/dt><dd> Definir propiedades mas de una vez en un objeto literal o definir mas de una vez parametros en una funci\u00f3n resultan en error. [js] var persona = { nombre: 'jos\u00e9', edad: 25, nombre: 'pepe' \/\/ Error }; function unaFuncionPersona(nombre, edad, nombre) { \/\/ Error \/\/ algo } [\/js] <\/dd><\/dl> Por \u00faltimo, podemos utilizar el modo estricto encapsulado, es decir, este *modo* cumple con el alcance (scope) de una variable\/ funci\u00f3n en js, por lo que podriamos decir: [js] \/\/ c\u00f3digo no estricto function mifunction(){ \"use strict\"; \/\/ c\u00f3digo estricto } \/\/ c\u00f3digo no estricto [\/js] - - - - - -\n\n### JSON\n\n Si ya estuvieron trabajando con serializaciones de objetos en javascript (JSON) seguramente usaron el famoso script [*json2.js*](http:\/\/www.json.org\/ \"JSON\") o alguna otra librer\u00eda. [html title=\"referencia a la librer\u00eda\"] <script type=\"text\/javascript\" src=\"json2.js\" ><\/script> [\/html] [js title=\"Uso de la librer\u00eda\"] function objeto_a_string(objeto) { return JSON.stringlify(obj); } var cad = objeto_a_string({nombre:'pepe', edad:25}); function string_a_objeto(cadena) { return JSON.parse(cadena); } var obj = string_a_objeto(\"{'nombre':'pepe', 'edad':25}\"); [\/js] Bueno, en este nuevo standard ya tenemos la clase JSON incluida, no necesitamos referenciarla a otra librer\u00eda. Lo bueno es que si usabamos json2.js, no necesitamos cambiar nada en el c\u00f3digo, ya que los m\u00e9todos de la clase JSON siguen siendo iguales. S\u00f3lo deberiamos cambiar la referencia en el HTML para que si es una version de explorador que no lo soporta, est\u00e9 incluida. Por ejemplo: [html] <!--[if lt IE 8]> <script type=\"text\/javascript\" src=\"json2.js\" ><\/script> <![endif]--> [\/html] De esta manera cubrimos el caso en que est\u00e9 utilizando un explorador viejo de internet explorer, sino, dejamos que el motor del explorador se encargue. Si utilizan otra librer\u00eda, no saquen su referencia todavia y piensen en cambiarlo de a poco. Para el cliente es un pedido y una descarga menos del servidor. \n","html":"Ya podemos empezar a utilizar lo nuevo del <a href=\"http:\/\/en.wikipedia.org\/wiki\/ECMAScript\" target=\"_blank\">ECMAScript<\/a> en los \u00faltimos exploradores.\r\nEstas son dos interesantes del <a href=\"http:\/\/www.ecma-international.org\/publications\/standards\/Ecma-262.htm\" target=\"_blank\">nuevo standard (5.1)<\/a>:\r\n\r\n<ul> \r\n<li>Strict Mode<\/li>\r\n<li>JSON<\/li>\r\n<\/ul>\r\n<!--more-->Soporte de exploradores (para los temas de este post, no todo el ECMAScript 5.1):\r\n<ul> \r\n<li>Firefox 4<\/li>\r\n<li>Chrome 13<\/li>\r\n<li>Safari 5.1<\/li>\r\n<li>Opera 11.6<\/li>\r\n<li>Internet Explorer 9 (s\u00f3lo <em>JSON<\/em>, <em>Strict Mode<\/em> va a estar para la versi\u00f3n 10)<\/li>\r\n<\/ul>\r\n\r\n<hr\/>\r\n<h3>Strict Mode<\/h3>\r\nAplicando el Modo Estricto en el c\u00f3digo es una forma de restringir lo que hacemos en nuestro javascript validando <em>esas cosas<\/em> que javascript nos deja hacer y despues tenemos problemas dif\u00edciles de solucionar.\r\n\r\n[js]\r\n&quot;use strict&quot;;\r\n[\/js]\r\n\r\nEso es todo, simplemente un string y el interpretador se va a encargar de usarlo. Al ser un string, los exploradores que no lo conocen simplemente no lo van a utilizar, pero tampoco va a dar ningun tipo de error.\r\n\r\nLo interesante de este <em>modo<\/em> es que nos ayuda a programar de una forma <em>m\u00e1s sana<\/em> en javascript, alguna de las cosas que nos va a validar:\r\n\r\n<dl>\r\n<dt><strong>variables<\/strong><\/dt>\r\n<dd>\r\nDeclaraci\u00f3n de variables obligatoria: Dispara un error si asignamos una variable que no declaramos con var previamente.\r\n[js]\r\nfunction variables(){\r\n    var foo;\r\n\r\n    bus = true; \/\/ Error\r\n\r\n    foo = true \/\/OK\r\n    var baz = true \/\/OK\r\n}\r\n[\/js]\r\n<\/dd>\r\n<dt><strong>delete<\/strong><\/dt>\r\n<dd>\r\nUtilizar <em>delete<\/em> para borrar una variable, funci\u00f3n o argumento dispara un error.\r\n[js]\r\nvar foo = true;\r\ndelete foo; \/\/ Error\r\n\r\nfunction mifuncion(){}\r\ndelete mifuncion; \/\/ Error\r\n\r\nfunction mifunction2(args) {\r\n    delete args; \/\/ Error\r\n}\r\n\r\n[\/js]\r\n<\/dd>\r\n<dt><strong>eval y with<\/strong><\/dt>\r\n<dd>\r\nUtilizar <em>eval<\/em> o <em>with<\/em> est\u00e1 prohibido, por lo que cualquier uso de los mismos dispara un error.\r\n[js]\r\neval(&quot;alert('algo');&quot;); \/\/ Error\r\n\r\nwith document { \/\/ Error\r\n   write('algo1');\r\n   write('algo2');\r\n} \r\n[\/js]\r\n<\/dd>\r\n<dt><strong>propiedades o parametros duplicados<\/strong><\/dt>\r\n<dd>\r\nDefinir propiedades mas de una vez en un objeto literal o definir mas de una vez parametros en una funci\u00f3n resultan en error.\r\n[js]\r\nvar persona = {\r\n   nombre: 'jos\u00e9',\r\n   edad: 25,\r\n   nombre: 'pepe' \/\/ Error\r\n};\r\n\r\nfunction unaFuncionPersona(nombre, edad, nombre) { \/\/ Error\r\n   \/\/ algo\r\n}\r\n[\/js]\r\n\r\n<\/dd>\r\n<\/dl>\r\n\r\nPor \u00faltimo, podemos utilizar el modo estricto encapsulado, es decir, este <em>modo<\/em> cumple con el alcance (scope) de una variable\/ funci\u00f3n en js, por lo que podriamos decir:\r\n\r\n[js] \r\n\/\/ c\u00f3digo no estricto\r\n\r\nfunction mifunction(){\r\n  &quot;use strict&quot;;\r\n   \/\/ c\u00f3digo estricto\r\n}\r\n\r\n\/\/ c\u00f3digo no estricto\r\n[\/js]\r\n\r\n<hr\/>\r\n<h3>JSON<\/h3>\r\nSi ya estuvieron trabajando con serializaciones de objetos en javascript (JSON) seguramente usaron el famoso script <a href=\"http:\/\/www.json.org\/\" title=\"JSON\" target=\"_blank\"><em>json2.js<\/em><\/a> o alguna otra librer\u00eda. \r\n\r\n[html title=\"referencia a la librer\u00eda\"]\r\n&lt;script type=&quot;text\/javascript&quot; src=&quot;json2.js&quot; &gt;&lt;\/script&gt;\r\n[\/html]\r\n\r\n[js title=\"Uso de la librer\u00eda\"]\r\nfunction objeto_a_string(objeto) {\r\n   return JSON.stringlify(obj);\r\n}\r\nvar cad = objeto_a_string({nombre:'pepe', edad:25});\r\n\r\n\r\nfunction string_a_objeto(cadena) {\r\n   return JSON.parse(cadena);\r\n}\r\nvar obj = string_a_objeto(&quot;{'nombre':'pepe', 'edad':25}&quot;);\r\n[\/js]\r\n\r\nBueno, en este nuevo standard ya tenemos la clase JSON incluida, no necesitamos referenciarla a otra librer\u00eda. Lo bueno es que si usabamos json2.js, no necesitamos cambiar nada en el c\u00f3digo, ya que los m\u00e9todos de la clase JSON siguen siendo iguales. S\u00f3lo deberiamos cambiar la referencia en el HTML para que si es una version de explorador que no lo soporta, est\u00e9 incluida. \r\n\r\nPor ejemplo:\r\n[html]\r\n&lt;!--[if lt IE 8]&gt;\r\n   &lt;script type=&quot;text\/javascript&quot; src=&quot;json2.js&quot; &gt;&lt;\/script&gt;\r\n&lt;![endif]--&gt;\r\n[\/html]\r\n\r\nDe esta manera cubrimos el caso en que est\u00e9 utilizando un explorador viejo de internet explorer, sino, dejamos que el motor del explorador se encargue.\r\nSi utilizan otra librer\u00eda, no saquen su referencia todavia y piensen en cambiarlo de a poco. Para el cliente es un pedido y una descarga menos del servidor.\r\n\r\n\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Fri, 16 Dec 2011 15:12:15 +0000","created_by":1,"updated_at":"Fri, 16 Dec 2011 15:12:15 +0000","updated_by":1,"published_at":"Fri, 16 Dec 2011 15:12:15 +0000","published_by":1},{"id":1121,"title":"Juegos en javascript para el Ludum Dare 22","slug":"juegos-en-javascript-para-ludum-dare","markdown":"\nComo amante de los juegos, del arte, de la programaci\u00f3n, de javascript, no pude resistirme a escribir sobre esto. Esperemos que haya gente que no se pueda resistir a leerlo, o al menos a saltar m\u00e1s abajo y probar alguno de los juegos. <span class=\"Apple-style-span\" style=\"font-size: 20px; font-weight: bold;\">El concurso<\/span> Para los que no lo conocen, Ludum Dare es un concurso internacional cuyo objetivo es desarrollar un juego en 48 horas. Se define una fecha, en esa fecha se define una tem\u00e1tica para el juego, y los concursantes arrancan con el desarrollo del mismo. La competencia es individual, la tecnolog\u00eda es a libre elecci\u00f3n. Premios? Cuanto dinero hay en el medio? - No, el ganador no gana plata. el objetivo principal de todo esto es incentivar a los desarrolladores a arrancar un juego y terminarlo. M\u00e1s all\u00e1 de eso, lo m\u00e1s valorable: la experiencia vivida, la oportunidad para aprender nuevas tecnolog\u00edas, y la posibilidad de tener una idea armada que sirva como puntapi\u00e9 para seguir desarrollando luego del concurso. [existen casos de juegos que m\u00e1s tarde fueron distribuidos en las appstore, etc.] El \u00faltimo concurso arranc\u00f3 el d\u00eda 16 y termin\u00f3 el 18 de diciembre ( aunque hay variantes del concurso (el jam), para m\u00e1s info visiten [la p\u00e1gina](http:\/\/www.ludumdare.com\/compo\/rules\/ \"Reglas Ludum Dare\") ). Par\u00e9ntesis anidados, qu\u00e9 bueno.\u00a0Para darse una idea de la popularidad del concurso, hubieron m\u00e1s de 700 juegos que fueron submitidos, de todo tipo, respetando la tem\u00e1tica que en esta ocasi\u00f3n fue \"alone\" (solo). Ya est\u00e1n [disponibles](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/ \"Cat\u00e1logo de juegos Ludum Dare 22\") para ser jugados y calificados por los participantes mismos.\n\nLos juegos\n----------\n\n Hice una recopilaci\u00f3n de los juegos basados en javascript \/ HTML \/ Canvas que se submitieron, algunos est\u00e1n m\u00e1s terminados que otros, pero tengan en cuenta que fueron hechos en menos de 48hs, incluyendo gr\u00e1ficos y sonidos. En n\u00famero, no son muchos comparados con el total de juegos, pero claramente se v\u00e9 el aumento del uso y del inter\u00e9s sobre la plataforma web para el desarrollo de juegos (pueden comprobarlo visitando concursos anteriores). Aqu\u00ed est\u00e1 la lista: [ el orden de los juegos se basa en una combinaci\u00f3n de azar y gustos personales\/cuestionables] - <div style=\"display: block; height: 270px;\">### A ninja\n\n![A Ninja Screenshot](http:\/\/fernetjs.com\/wp-content\/uploads\/2011\/12\/aNinja.jpg \"A Ninja\") Juego bastante entretenido, muy bien logrado para mi gusto, jugabilidad, las f\u00edsicas, la sencillez. [Jugar](http:\/\/frozenfractal.com\/play\/ninja\/) \u2013 [C\u00f3digo](http:\/\/frozenfractal.com\/play\/ninja\/main.js) \u2013 [Entrada original](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=7882)\n\n<\/div>\n- <div style=\"display: block; height: 270px;\">### I was here\n\n![I was here Screenshot](http:\/\/fernetjs.com\/wp-content\/uploads\/2011\/12\/IwasHere.jpg \"IwasHere\") Concepto bastante original!! Me enganch\u00f3 como por media hora, excelente! Incluye una implementaci\u00f3n de raycasting bastante interesante. [Jugar](http:\/\/dl.dropbox.com\/u\/4936312\/LD22\/index.html) \u2013 [C\u00f3digo](https:\/\/github.com\/cboissie\/HTML5-JS-Stuff\/) \u2013 [Entrada original](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=6851)<\/div>\n- <div style=\"display: block; height: 280px;\">### Space Ghost\n\n![Space ghost screenshot](http:\/\/fernetjs.com\/wp-content\/uploads\/2011\/12\/SpaceGhost.jpg \"SpaceGhost\") Juego donde disparas misiles para matar a un fantasma. Controles? La f\u00f3rmula matem\u00e1tica que describe la trayectoria del misil. Se pueden usar variables temporales, o incluso acceder a funciones de Math como Math.tan(). Para ver el c\u00f3digo del juego, basta con ver el codigo de fuente de la p\u00e1gina en el navegador, no esta ofuscado ni minificado. [Jugar](http:\/\/madmaw.com\/alone\/index.html) \u2013 [Entrada original](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=5068)<\/div>\n- <div style=\"display: block; height: 260px;\">### Lone Kitty\n\n![Lone Kitty Screenshot](http:\/\/fernetjs.com\/wp-content\/uploads\/2011\/12\/LoneKytten.jpg \"LoneKytten\") Usa audio de HTML5 e implementa [exCanvas](http:\/\/excanvas.sourceforge.net\/), que permite que el juego funcione bajo internet explorer. [Jugar](http:\/\/lorancou.free.fr\/bulk\/lonekitty\/) \u2013 [C\u00f3digo](https:\/\/github.com\/lorancou\/lonekitty\/) \u2013 [Entrada original](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=8588)<\/div>\n- ### The square <span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Juego inspirado en la pel\u00edcula \u201cEl cubo\u201d. Tiene puzzles y se deja jugar. <\/span>[Jugar](http:\/\/softwarebakery.com\/frozencow\/ludum22\/)<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span>[C\u00f3digo](http:\/\/softwarebakery.com\/frozencow\/ludum22\/source.tar.bz2)<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span>[Entrada original](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=8588)\n- ### Iron santa <span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Bastante sencillo, muy corto, con un toque humor\u00edstico, pero bueno, capaz sirve para ver como implementa <\/span>[jawjs ](http:\/\/jawsjs.com\/) [Jugar](http:\/\/memetika.com\/iron_santa\/ludum-dare-22\/)<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span>[C\u00f3digo](https:\/\/github.com\/dmitrizagidulin\/IronSanta\/tree\/0e7cc41b96c755bab8e2ae341cc19f963395f6ba)<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span>[Entrada original](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=7625)\n- ### No mother alone <span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Prototipo bastante sencillo donde te perd\u00e9s en el supermercado y ten\u00e9s que buscar a tu mam\u00e1. (para jugarlo bajar el c\u00f3digo) <\/span>[C\u00f3digo](https:\/\/github.com\/brodavi\/No-Mother-Alone)<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span>[Entrada original](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=8067)\n- ### Midnight Runner <span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Tambien usa jawjs. No me funcion\u00f3 bajo chromium 15, aparentemente hay algun problema en el c\u00f3digo al crear el men\u00fa; pero creo que merece su lugar por incluir el c\u00f3digo. <\/span>[http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=3407](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=3407)\n\n### Otros <span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Por otro lado, no pude probar <\/span>[Forgotten Memories](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&uid=8158)<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">, pero promete bastante. Usa WebGl y PHP y MySQL como backend. Todos los juegos inclu\u00eddos en este art\u00edculo fueron obtenidos de\u00a0[http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&q=javascript](http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&q=javascript)\u00a0(hay un par mas que no est\u00e1n inclu\u00eddos ac\u00e1).\u00a0<\/span>\n\nCerrando\n--------\n\n Dentro de la p\u00e1gina de Ludum Dare se pueden ver montones de relatos de distintas personas, retrospectivas, comentarios t\u00e9cnicos, screencasts que son muy interesantes, tal vez no acerca de javascript, pero del proceso de desarrollo en s\u00ed mismo. Al leer los comentarios de la gente que trabaj\u00f3 en los juegos presentados antes, muchos de ellos hicieron por primera vez un juego en javascript, pero lo lograron dentro del plazo establecido. Esto es algo muy valorable, y que nos deja pensando: \"Si esto se puede hacer en menos de dos di\u00edas, \u00bfQu\u00e9 se puede hacer con m\u00e1s tiempo?\u00bfY conociendo de antemano las tecnolog\u00edas? \u00bfwebgl?\". El ecosistema que existe dentro de un browser, ya sin la necesidad de nombrar plugins (ll\u00e1mese flash, silverlight, etc.), demuestra cierto grado de madurez como plataforma para gaming. Ni pensar en un futuro cercano, con cosas que est\u00e1n tocando la puerta, como son la [fullscreen API](http:\/\/www.google.com.ar\/search?q=fullscreen+api \"Buscar fullscreen api\") y la [gamepad API](http:\/\/www.google.com.ar\/search?q=gamepad+API \"buscar gamepad api\"). En mi caso, esto me trajo toda la motivaci\u00f3n para prepararme para el Ludum Dare de Abril del 2012; lo mejor es que hay muchas cosas para aprender, desde el manejo avanzado de canvas, pasando por\u00a0[animaciones](http:\/\/fernetjs.com\/2011\/12\/animando-en-canvas-html5\/ \"Animando en CANVAS \u2013 HTML5\"), hasta c\u00f3mo implementar f\u00edsicas!\n","html":"Como amante de los juegos, del arte, de la programaci\u00f3n, de javascript, no pude resistirme a escribir sobre esto. Esperemos que haya gente que no se pueda resistir a leerlo, o al menos a saltar m\u00e1s abajo y probar alguno de los juegos.\r\n\r\n<span class=\"Apple-style-span\" style=\"font-size: 20px; font-weight: bold;\">El concurso<\/span>\r\n\r\nPara los que no lo conocen, Ludum Dare es un concurso internacional cuyo objetivo es desarrollar un juego en 48 horas. Se define una fecha, en esa fecha se define una tem\u00e1tica para el juego, y los concursantes arrancan con el desarrollo del mismo. La competencia es individual, la tecnolog\u00eda es a libre elecci\u00f3n. Premios? Cuanto dinero hay en el medio? - No, el ganador no gana plata. el objetivo principal de todo esto es incentivar a los desarrolladores a arrancar un juego y terminarlo. M\u00e1s all\u00e1 de eso, lo m\u00e1s valorable: la experiencia vivida, la oportunidad para aprender nuevas tecnolog\u00edas, y la posibilidad de tener una idea armada que sirva como puntapi\u00e9 para seguir desarrollando luego del concurso. [existen casos de juegos que m\u00e1s tarde fueron distribuidos en las appstore, etc.]\r\n\r\nEl \u00faltimo concurso arranc\u00f3 el d\u00eda 16 y termin\u00f3 el 18 de diciembre ( aunque hay variantes del concurso (el jam), para m\u00e1s info visiten <a title=\"Reglas Ludum Dare\" href=\"http:\/\/www.ludumdare.com\/compo\/rules\/\" target=\"_blank\">la p\u00e1gina<\/a> ). Par\u00e9ntesis anidados, qu\u00e9 bueno.\u00a0Para darse una idea de la popularidad del concurso, hubieron m\u00e1s de 700 juegos que fueron submitidos, de todo tipo, respetando la tem\u00e1tica que en esta ocasi\u00f3n fue \"alone\" (solo). Ya est\u00e1n <a title=\"Cat\u00e1logo de juegos Ludum Dare 22\" href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/\">disponibles<\/a> para ser jugados y calificados por los participantes mismos.\r\n<h2>Los juegos<\/h2>\r\nHice una recopilaci\u00f3n de los juegos basados en javascript \/ HTML \/ Canvas que se submitieron, algunos est\u00e1n m\u00e1s terminados que otros, pero tengan en cuenta que fueron hechos en menos de 48hs, incluyendo gr\u00e1ficos y sonidos. En n\u00famero, no son muchos comparados con el total de juegos, pero claramente se v\u00e9 el aumento del uso y del inter\u00e9s sobre la plataforma web para el desarrollo de juegos (pueden comprobarlo visitando concursos anteriores).\r\n\r\n<!--more-->Aqu\u00ed est\u00e1 la lista: [ el orden de los juegos se basa en una combinaci\u00f3n de azar y gustos personales\/cuestionables]\r\n<ul style=\"list-style-type: none;\">\r\n\t<li>\r\n<div style=\"display: block; height: 270px;\">\r\n<h3>A ninja<\/h3>\r\n<img class=\"alignleft size-full wp-image-1124\" title=\"A Ninja\" src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2011\/12\/aNinja.jpg\" alt=\"A Ninja Screenshot\" width=\"315\" height=\"237\" \/>\r\n\r\nJuego bastante entretenido, muy bien logrado para mi gusto, jugabilidad, las f\u00edsicas, la sencillez.\r\n<p style=\"text-align: right;\"><a href=\"http:\/\/frozenfractal.com\/play\/ninja\/\">Jugar<\/a> \u2013 <a href=\"http:\/\/frozenfractal.com\/play\/ninja\/main.js\">C\u00f3digo<\/a> \u2013 <a href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=7882\">Entrada original<\/a><\/p>\r\n\r\n<\/div><\/li>\r\n\t<li>\r\n<div style=\"display: block; height: 270px;\">\r\n<h3>I was here<\/h3>\r\n<img class=\"alignleft size-full wp-image-1125\" title=\"IwasHere\" src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2011\/12\/IwasHere.jpg\" alt=\"I was here Screenshot\" width=\"315\" height=\"232\" \/>\r\n\r\nConcepto bastante original!! Me enganch\u00f3 como por media hora, excelente! Incluye una implementaci\u00f3n de raycasting bastante interesante.\r\n\r\n<a href=\"http:\/\/dl.dropbox.com\/u\/4936312\/LD22\/index.html\">Jugar<\/a> \u2013 <a href=\"https:\/\/github.com\/cboissie\/HTML5-JS-Stuff\/\">C\u00f3digo<\/a> \u2013 <a href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=6851\">Entrada original<\/a>\r\n\r\n<\/div><\/li>\r\n\t<li>\r\n<div style=\"display: block; height: 280px;\">\r\n<h3>Space Ghost<\/h3>\r\n<img class=\"alignleft size-full wp-image-1127\" title=\"SpaceGhost\" src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2011\/12\/SpaceGhost.jpg\" alt=\"Space ghost screenshot\" width=\"315\" height=\"236\" \/>\r\n\r\nJuego donde disparas misiles para matar a un fantasma. Controles? La f\u00f3rmula matem\u00e1tica que describe la trayectoria del misil. Se pueden usar variables temporales, o incluso acceder a funciones de Math como Math.tan(). Para ver el c\u00f3digo del juego, basta con ver el codigo de fuente de la p\u00e1gina en el navegador, no esta ofuscado ni minificado.\r\n\r\n<a href=\"http:\/\/madmaw.com\/alone\/index.html\">Jugar<\/a> \u2013 <a href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=5068\">Entrada original<\/a>\r\n\r\n<\/div><\/li>\r\n\t<li>\r\n<div style=\"display: block; height: 260px;\">\r\n<h3>Lone Kitty<\/h3>\r\n<img class=\"alignleft size-full wp-image-1126\" title=\"LoneKytten\" src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2011\/12\/LoneKytten.jpg\" alt=\"Lone Kitty Screenshot\" width=\"193\" height=\"208\" \/>\r\n\r\nUsa audio de HTML5 e implementa <a href=\"http:\/\/excanvas.sourceforge.net\/\">exCanvas<\/a>, que permite que el juego funcione bajo internet explorer.\r\n\r\n<a href=\"http:\/\/lorancou.free.fr\/bulk\/lonekitty\/\">Jugar<\/a> \u2013 <a href=\"https:\/\/github.com\/lorancou\/lonekitty\/\">C\u00f3digo<\/a> \u2013 <a href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=8588\">Entrada original<\/a>\r\n\r\n<\/div><\/li>\r\n\t<li>\r\n<h3>The square\r\n<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Juego inspirado en la pel\u00edcula \u201cEl cubo\u201d. Tiene puzzles y se deja jugar.\r\n<\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"http:\/\/softwarebakery.com\/frozencow\/ludum22\/\">Jugar<\/a><span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"http:\/\/softwarebakery.com\/frozencow\/ludum22\/source.tar.bz2\">C\u00f3digo<\/a><span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=8588\">Entrada original<\/a><\/h3>\r\n<\/li>\r\n\t<li>\r\n<h3>Iron santa\r\n<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Bastante sencillo, muy corto, con un toque humor\u00edstico, pero bueno, capaz sirve para ver como implementa <\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"http:\/\/jawsjs.com\/\">jawjs\r\n<\/a><a style=\"font-size: 13px; font-weight: normal;\" href=\"http:\/\/memetika.com\/iron_santa\/ludum-dare-22\/\">Jugar<\/a><span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"https:\/\/github.com\/dmitrizagidulin\/IronSanta\/tree\/0e7cc41b96c755bab8e2ae341cc19f963395f6ba\">C\u00f3digo<\/a><span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=7625\">Entrada original<\/a><\/h3>\r\n<\/li>\r\n\t<li>\r\n<h3>No mother alone\r\n<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Prototipo bastante sencillo donde te perd\u00e9s en el supermercado y ten\u00e9s que buscar a tu mam\u00e1. (para jugarlo bajar el c\u00f3digo)\r\n<\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"https:\/\/github.com\/brodavi\/No-Mother-Alone\">C\u00f3digo<\/a><span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\"> \u2013 <\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=8067\">Entrada original<\/a><\/h3>\r\n<\/li>\r\n\t<li>\r\n<h3>Midnight Runner\r\n<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Tambien usa jawjs. No me funcion\u00f3 bajo chromium 15, aparentemente hay algun problema en el c\u00f3digo al crear el men\u00fa; pero creo que merece su lugar por incluir el c\u00f3digo.\r\n<\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=3407\">http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=3407<\/a><\/h3>\r\n<\/li>\r\n<\/ul>\r\n<h3>Otros\r\n<span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">Por otro lado, no pude probar <\/span><a style=\"font-size: 13px; font-weight: normal;\" href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;uid=8158\">Forgotten Memories<\/a><span class=\"Apple-style-span\" style=\"font-size: 13px; font-weight: normal;\">, pero promete bastante. Usa WebGl y PHP y MySQL como backend. Todos los juegos inclu\u00eddos en este art\u00edculo fueron obtenidos de\u00a0<a href=\"http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;q=javascript\">http:\/\/www.ludumdare.com\/compo\/ludum-dare-22\/?action=preview&amp;q=javascript<\/a>\u00a0(hay un par mas que no est\u00e1n inclu\u00eddos ac\u00e1).\u00a0<\/span><\/h3>\r\n<h2>Cerrando<\/h2>\r\nDentro de la p\u00e1gina de Ludum Dare se pueden ver montones de relatos de distintas personas, retrospectivas, comentarios t\u00e9cnicos, screencasts que son muy interesantes, tal vez no acerca de javascript, pero del proceso de desarrollo en s\u00ed mismo.\r\n\r\nAl leer los comentarios de la gente que trabaj\u00f3 en los juegos presentados antes, muchos de ellos hicieron por primera vez un juego en javascript, pero lo lograron dentro del plazo establecido. Esto es algo muy valorable, y que nos deja pensando: \"Si esto se puede hacer en menos de dos di\u00edas, \u00bfQu\u00e9 se puede hacer con m\u00e1s tiempo?\u00bfY conociendo de antemano las tecnolog\u00edas? \u00bfwebgl?\".\r\n\r\nEl ecosistema que existe dentro de un browser, ya sin la necesidad de nombrar plugins (ll\u00e1mese flash, silverlight, etc.), demuestra cierto grado de madurez como plataforma para gaming. Ni pensar en un futuro cercano, con cosas que est\u00e1n tocando la puerta, como son la <a title=\"Buscar fullscreen api\" href=\"http:\/\/www.google.com.ar\/search?q=fullscreen+api\">fullscreen API<\/a> y la <a title=\"buscar gamepad api\" href=\"http:\/\/www.google.com.ar\/search?q=gamepad+API\">gamepad API<\/a>.\r\n\r\nEn mi caso, esto me trajo toda la motivaci\u00f3n para prepararme para el Ludum Dare de Abril del 2012; lo mejor es que hay muchas cosas para aprender, desde el manejo avanzado de canvas, pasando por\u00a0<a title=\"Animando en CANVAS \u2013 HTML5\" href=\"http:\/\/fernetjs.com\/2011\/12\/animando-en-canvas-html5\/\">animaciones<\/a>, hasta c\u00f3mo implementar f\u00edsicas!","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Tue, 20 Dec 2011 09:37:47 +0000","created_by":1,"updated_at":"Tue, 20 Dec 2011 22:17:27 +0000","updated_by":1,"published_at":"Tue, 20 Dec 2011 09:37:47 +0000","published_by":1},{"id":1149,"title":"Aprendiendo con javascript-koans","slug":"aprendiendo-con-javascript-koans","markdown":"\nNavegando por internet me encontr\u00e9 con el[ javascript-koans](https:\/\/github.com\/liammclennan\/JavaScript-Koans \"js koans\"), inspirado en [ruby-koans](http:\/\/rubykoans.com\/ \"Ruby Koans\"). Es un ambiente para aprender sobre el lenguaje en base a tests. Se nos provee con una serie de tests, divididos en m\u00f3dulos seg\u00fan la tem\u00e1tica. Todos est\u00e1n fallando, con asserts para completar, a modo de \"llenar los espacios en blanco\". Veamos un ejemplo: [js] test(\"typeof\", function() { equals(typeof({}), __, 'what is the type of an empty object?'); equals(typeof('apple'), __, 'what is the type of a string?'); equals(typeof(-5), __, 'what is the type of -5?'); equals(typeof(false), __, 'what is the type of false?'); }); [\/js]  Este koans usa como motor de tests el conocido [QUnit\u00a0 ](http:\/\/docs.jquery.com\/QUnit \"docs de QUnit\")( [source](https:\/\/github.com\/jquery\/qunit \"source qunit\") ), y si bien uno nunca us\u00f3 QUnit, es muy intuitivo como para usarlo con este prop\u00f3sito. Es m\u00e1s, ac\u00e1 tenemos un ejercicio para aprenderlo: [js] module(\"About Asserts (topics\/about_asserts.js)\"); test(\"ok\", function() { ok(__, 'what will satisfy the ok assertion?'); }); test(\"not\", function() { not(__, 'what is a false value?'); }); test(\"equals\", function() { equals(1+1, __, 'what will satisfy the equals assertion?'); }); [\/js] La resoluci\u00f3n ser\u00eda algo as\u00ed: [js] module(\"About Asserts (topics\/about_asserts.js)\"); test(\"ok\", function() { ok(true, 'what will satisfy the ok assertion?'); }); test(\"not\", function() { not(false, 'what is a false value?'); }); test(\"equals\", function() { equals(1+1, 2, 'what will satisfy the equals assertion?'); }); [\/js] Ahora tenemos la forma de seguir adelante. Todos los ejercicios que tenemos que resolver se encuentran ubicados en la carpeta \/topics. Ojo que si bien parece muy para principiantes muchas veces puede servir como un \"refresher\", d\u00edgase refresca-memoria: [js] test(\"hasOwnProperty\", function() { \/\/ hasOwnProperty returns true if the parameter is a property directly on the object, \/\/ but not if it is a property accessible via the prototype chain. var keys = []; var fruits = ['apple', 'orange']; for(propertyName in fruits) { keys.push(propertyName); } ok(keys.equalTo(['__', '__', '__']), 'what are the properties of the array?'); var ownKeys = []; for(propertyName in fruits) { if (fruits.hasOwnProperty(propertyName)) { ownKeys.push(propertyName); } } ok(ownKeys.equalTo(['__', '__']), 'what are the own properties of the array?'); }); [\/js] Forkeen y agreguen ejercicios!!! Se las dejo picando\n\n\n","html":"Navegando por internet me encontr\u00e9 con el<a title=\"js koans\" href=\"https:\/\/github.com\/liammclennan\/JavaScript-Koans\" target=\"_blank\"> javascript-koans<\/a>, inspirado en <a title=\"Ruby Koans\" href=\"http:\/\/rubykoans.com\/\" target=\"_blank\">ruby-koans<\/a>. Es un ambiente para aprender sobre el lenguaje en base a tests.\r\n\r\nSe nos provee con una serie de tests, divididos en m\u00f3dulos seg\u00fan la tem\u00e1tica. Todos est\u00e1n fallando, con asserts para completar, a modo de \"llenar los espacios en blanco\". Veamos un ejemplo:\r\n\r\n[js]\r\ntest(&quot;typeof&quot;, function() {\r\n    equals(typeof({}), __, 'what is the type of an empty object?');\r\n    equals(typeof('apple'), __, 'what is the type of a string?');\r\n    equals(typeof(-5), __, 'what is the type of -5?');\r\n    equals(typeof(false), __, 'what is the type of false?');\r\n});\r\n[\/js]\r\n\r\n<!--more-->\r\n\r\nEste koans usa como motor de tests el conocido <a title=\"docs de QUnit\" href=\"http:\/\/docs.jquery.com\/QUnit\" target=\"_blank\">QUnit\u00a0 <\/a>( <a title=\"source qunit\" href=\"https:\/\/github.com\/jquery\/qunit\" target=\"_blank\">source<\/a> ), y si bien uno nunca us\u00f3 QUnit, es muy intuitivo como para usarlo con este prop\u00f3sito. Es m\u00e1s, ac\u00e1 tenemos un ejercicio para aprenderlo:\r\n\r\n[js]\r\nmodule(&quot;About Asserts (topics\/about_asserts.js)&quot;);\r\n\r\ntest(&quot;ok&quot;, function() {\r\nok(__, 'what will satisfy the ok assertion?');\r\n});\r\n\r\ntest(&quot;not&quot;, function() {\r\nnot(__, 'what is a false value?');\r\n});\r\n\r\ntest(&quot;equals&quot;, function() {\r\nequals(1+1, __, 'what will satisfy the equals assertion?');\r\n});\r\n[\/js]\r\n\r\nLa resoluci\u00f3n ser\u00eda algo as\u00ed:\r\n\r\n[js]\r\nmodule(&quot;About Asserts (topics\/about_asserts.js)&quot;);\r\n\r\ntest(&quot;ok&quot;, function() {\r\nok(true, 'what will satisfy the ok assertion?');\r\n});\r\n\r\ntest(&quot;not&quot;, function() {\r\nnot(false, 'what is a false value?');\r\n});\r\n\r\ntest(&quot;equals&quot;, function() {\r\nequals(1+1, 2, 'what will satisfy the equals assertion?');\r\n});\r\n[\/js]\r\n\r\nAhora tenemos la forma de seguir adelante. Todos los ejercicios que tenemos que resolver se encuentran ubicados en la carpeta \/topics. \r\nOjo que si bien parece muy para principiantes muchas veces puede servir como un \"refresher\", d\u00edgase refresca-memoria:\r\n\r\n[js]\r\ntest(&quot;hasOwnProperty&quot;, function() {\r\n    \/\/ hasOwnProperty returns true if the parameter is a property directly on the object, \r\n    \/\/ but not if it is a property accessible via the prototype chain.\r\n    var keys = [];\r\n    var fruits =  ['apple', 'orange'];\r\n    for(propertyName in fruits) {\r\n        keys.push(propertyName);\r\n    }\r\n    ok(keys.equalTo(['__', '__', '__']), 'what are the properties of the array?');\r\n\r\n    var ownKeys = [];\r\n    for(propertyName in fruits) {\r\n        if (fruits.hasOwnProperty(propertyName)) {\r\n            ownKeys.push(propertyName);\r\n        }\r\n    }\r\n    ok(ownKeys.equalTo(['__', '__']), 'what are the own properties of the array?');\r\n});\r\n[\/js]\r\n\r\nForkeen y agreguen ejercicios!!! Se las dejo picando\r\n  \r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Fri, 23 Dec 2011 20:32:16 +0000","created_by":1,"updated_at":"Fri, 23 Dec 2011 20:32:16 +0000","updated_by":1,"published_at":"Fri, 23 Dec 2011 20:32:16 +0000","published_by":1},{"id":1154,"title":"null vs. undefined","slug":"null-vs-undefined","markdown":"\nEstos dos tipos de datos primitivos de javascript pueden causar confusi\u00f3n as\u00ed que hay que tener bien en claro de que estamos hablando de cosas distintas. Por un lado, null puede tener solo un valor y ese valor es null :). El tipo de datos Null es considerado un 'placeholder' para un objeto no existente. Se podr\u00eda decir que null es un tipo especial de objeto ya que:  [js] alert(typeof(null)); \/\/object [\/js] Se puede decir que null es un placeholder que contiene nada, su espacio en memoria est\u00e1 seteado como vac\u00edo. Por otro lado, undefined significa que el valor a\u00fan no fue seteado, ni siquiera seteado como vac\u00edo. Por ejemplo, una variable que fue declarada pero no inicializada va a tener un valor de undefined: [js] var fernetjs; alert(typeof fernetjs); \/\/undefined [\/js] De acuerdo al ECMAcore, ambos tipos de datos al igual que el resto de los tipos de datos primitivos de javascript (a excepci\u00f3n del string) ocupan un cl\u00faster de 8B en la memoria stack que es mucho m\u00e1s r\u00e1pida que el heap que es donde van a parar los tipos de datos por referencia con un tama\u00f1o de almacenamiento variable. M\u00e1s info en [Uso de memoria](http:\/\/rx4ajax-jscore.com\/ecmacore\/more\/memory.html \"Uso de memoria\") En una de las reuniones de fernetJS pjnovas coment\u00f3 el caso de que tuvo que asignar null a todas las variables de un juego para poder destruirlas (como se dijo anteriormente el espacio ocupado por null es vac\u00edo), sin embargo no es posible hacer eso si les hubiese asignado undefined. Algo curioso que se da en terminos de comparaci\u00f3n entre estos dos tipos de datos es lo siguiente: [js] alert(null == undefined); \/\/true alert(null === undefined); \/\/false [\/js] como pueden ver, esto puede ser el causante de muchos problemas en la aplicaci\u00f3n (ver [Diferencia entre == y ===](http:\/\/fernetjs.com\/2011\/11\/operadores-de-igualdad-y\/ \"Diferencia entre == y ===\")) por eso siempre es necesario utilizar los operadores de igualdad correctos.\n\n\n","html":"Estos dos tipos de datos primitivos de javascript pueden causar confusi\u00f3n as\u00ed que hay que tener bien en claro de que estamos hablando de cosas distintas. \r\nPor un lado, null puede tener solo un valor y ese valor es null :). El tipo de datos Null es considerado un 'placeholder' para un objeto no existente. Se podr\u00eda decir que null es un tipo especial de objeto ya que:\r\n\r\n<!--more-->\r\n\r\n[js]\r\nalert(typeof(null)); \/\/object\r\n[\/js]\r\n\r\nSe puede decir que null es un placeholder que contiene nada, su espacio en memoria est\u00e1 seteado como vac\u00edo.\r\nPor otro lado, undefined significa que el valor a\u00fan no fue seteado, ni siquiera seteado como vac\u00edo. Por ejemplo, una variable que fue declarada pero no inicializada va a tener un valor de undefined: \r\n\r\n[js]\r\nvar fernetjs; \r\nalert(typeof fernetjs); \/\/undefined\r\n[\/js]\r\n\r\nDe acuerdo al ECMAcore, ambos tipos de datos al igual que el resto de los tipos de datos primitivos de javascript (a excepci\u00f3n del string) ocupan un cl\u00faster de 8B en la memoria stack que es mucho m\u00e1s r\u00e1pida que el heap que es donde van a parar los tipos de datos por referencia con un tama\u00f1o de almacenamiento variable. M\u00e1s info en <a href=\"http:\/\/rx4ajax-jscore.com\/ecmacore\/more\/memory.html\" title=\"Uso de memoria\">Uso de memoria<\/a>\r\nEn una de las reuniones de fernetJS pjnovas coment\u00f3 el caso de que tuvo que asignar null a todas las variables de un juego para poder destruirlas (como se dijo anteriormente el espacio ocupado por null es vac\u00edo), sin embargo no es posible hacer eso si les hubiese asignado undefined.\r\n\r\nAlgo curioso que se da en terminos de comparaci\u00f3n entre estos dos tipos de datos es lo siguiente:\r\n\r\n[js]\r\nalert(null == undefined); \/\/true\r\n\r\nalert(null === undefined); \/\/false\r\n[\/js]\r\n\r\ncomo pueden ver, esto puede ser el causante de muchos problemas en la aplicaci\u00f3n (ver <a href=\"http:\/\/fernetjs.com\/2011\/11\/operadores-de-igualdad-y\/\" title=\"Diferencia entre == y ===\">Diferencia entre == y ===<\/a>) por eso siempre es necesario utilizar los operadores de igualdad correctos.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":4,"created_at":"Mon, 26 Dec 2011 17:58:30 +0000","created_by":1,"updated_at":"Mon, 26 Dec 2011 17:58:30 +0000","updated_by":1,"published_at":"Mon, 26 Dec 2011 17:58:30 +0000","published_by":1},{"id":1162,"title":"El futuro de Javascript - ECMAScript 6","slug":"el-futuro-de-javascript-ecmascript-6","markdown":"\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"360\" src=\"http:\/\/www.youtube.com\/embed\/u4IdoBU1uKE?hd=1\" width=\"640\"><\/iframe>\n\n En este video Dave Herman, ingeniero de Mozilla Labs, repasa todo lo que se est\u00e1 teniendo en cuenta para publicar el nuevo est\u00e1ndar del ECMAScript 6 que se cree saldr\u00e1 publicado en 2013, aunque algunas de sus novedades se ver\u00e1n antes en los \u00faltimos navegadores. Como \u00e9l dice al final del video, se est\u00e1 tratando de hacer Javascript mejor para aplicaciones complejas, bibliotecas y generadores de c\u00f3digo bas\u00e1ndose en soluciones simples, generales y compuestas que puedan ser cohesivas como un todo. Entre estas soluciones se destacan el uso de m\u00f3dulos, \u00fatil tanto para javascript como para nodejs; el uso de la palabra let; los function generator al igual que en python; los proxies que van a posibilitar 'wrappear' y por ejemplo monitorear un objeto; manejo para binary data (StructTypes); el concepto de destructuring; rest-args y defaults para dejar de usar arguments; custom object iterations, un nuevo iterador; comprehensions, que nos va a permitir iterar por ejemplo al estilo de un lenguaje funcional como Haskell; string templates y safeHTML; Object-keyed tables, hash tables; etc...Les recomiendo que vean el video ya que as\u00ed como nos puede mostrar lo que se viene tambi\u00e9n nos permite darnos cuenta cuanto sabemos del est\u00e1ndar actual.\n","html":"<p><iframe width=\"640\" height=\"360\" src=\"http:\/\/www.youtube.com\/embed\/u4IdoBU1uKE?hd=1\" frameborder=\"0\" allowfullscreen><\/iframe><\/p>\r\n\r\nEn este video Dave Herman, ingeniero de Mozilla Labs, repasa todo lo que se est\u00e1 teniendo en cuenta para publicar el nuevo est\u00e1ndar del ECMAScript 6 que se cree saldr\u00e1 publicado en 2013, aunque algunas de sus novedades se ver\u00e1n antes en los \u00faltimos navegadores. Como \u00e9l dice al final del video, se est\u00e1 tratando de hacer Javascript mejor para aplicaciones complejas, bibliotecas y generadores de c\u00f3digo bas\u00e1ndose en soluciones simples, generales y compuestas que puedan ser cohesivas como un todo. Entre estas soluciones se destacan el uso de m\u00f3dulos, \u00fatil tanto para javascript como para nodejs; el uso de la palabra let; los function generator al igual que en python; los proxies que van a posibilitar 'wrappear' y por ejemplo monitorear un objeto; manejo para binary data (StructTypes); el concepto de destructuring; rest-args y defaults para dejar de usar arguments; custom object iterations, un nuevo iterador; comprehensions, que nos va a permitir iterar por ejemplo al estilo de un lenguaje funcional como Haskell; string templates y safeHTML; Object-keyed tables, hash tables; etc...Les recomiendo que vean el video ya que as\u00ed como nos puede mostrar lo que se viene tambi\u00e9n nos permite darnos cuenta cuanto sabemos del est\u00e1ndar actual.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":4,"created_at":"Tue, 27 Dec 2011 22:41:12 +0000","created_by":1,"updated_at":"Tue, 27 Dec 2011 22:41:12 +0000","updated_by":1,"published_at":"Tue, 27 Dec 2011 22:41:12 +0000","published_by":1},{"id":1167,"title":"Feliz a\u00f1o ((++[[]]....","slug":"feliz-2012","markdown":"\nEste humilde post no es m\u00e1s que para saludar a todos junto a los que compartimos este 2011 y estamos arrancando el 2012. Gracias por los comentarios, la buena onda y las ganas de darle para adelante con js!! Como ya hay muy buenas [retrospectivas](http:\/\/badassjs.com\/post\/15082876071\/2011-a-badass-javascript-year-in-review \"badassjs 2011\") del 2011 sobre javascript en internet, y tambi\u00e9n ya hay un overflow de \"Feliz a\u00f1o nuevo\", qu\u00e9 m\u00e1s podemos decir? [js] var \u0ca0_\u0ca0 = ((++[[]][[+[]]])+(++[[]][[+[]]])+[])+(+[])+(++[[]][[+[]]])+(++[[]][[+[]]]+(++[[]][[+[]]])); console.log('feliz ' + \u0ca0_\u0ca0 + '!!!!'); [\/js]  Vamos a seguir con todo el entusiasmo que nos brinda la comunidad, sus nuevos experimentos, proyectos, est\u00e1ndares, plataformas y bibliotecas, de este ecosistema javascripter que est\u00e1 en plena revoluci\u00f3n. Por eso me la juego y aseguro que 2012 va a ser un a\u00f1o REALMENTE interesante. Hablando de fernetjs, este a\u00f1o vamos a arrancar ya con reuniones y juntadas para compartir un par de fernets y nuestras experiencias en javascript (Nos vemos ah\u00ed!). Como deseo para este a\u00f1o, queremos terminar de llevar a la pr\u00e1ctica la idea original de fernetjs, que esto no sea solo un blog, que no sea un twitter, sino que sea una comunidad basada en la COLABORACI\u00d3N y buena onda. Notas al pie: Para los que indagan por qu\u00e9 es v\u00e1lido el identificador \u0ca0_\u0ca0: [why-arent-and-valid-javascript-variable-names](http:\/\/stackoverflow.com\/questions\/7451524\/why-arent-and-valid-javascript-variable-names \"js identifier\") O para los que se preguntan que pasa con esa mara\u00f1a de corchetes: [can-you-explain-why-10](http:\/\/stackoverflow.com\/questions\/7202157\/can-you-explain-why-10 \"Significado de los corchetes locos\") Saludos, los mejores deseos para todos.\n\n\n","html":"Este humilde post no es m\u00e1s que para saludar a todos junto a los que compartimos este 2011 y estamos arrancando el 2012. Gracias por los comentarios, la buena onda y las ganas de darle para adelante con js!!\r\n\r\nComo ya hay muy buenas <a href=\"http:\/\/badassjs.com\/post\/15082876071\/2011-a-badass-javascript-year-in-review\" title=\"badassjs 2011\" target=\"_blank\">retrospectivas<\/a> del 2011 sobre javascript en internet, y tambi\u00e9n ya hay un overflow de \"Feliz a\u00f1o nuevo\", qu\u00e9 m\u00e1s podemos decir?\r\n\r\n[js]\r\nvar \u0ca0_\u0ca0 = ((++[[]][[+[]]])+(++[[]][[+[]]])+[])+(+[])+(++[[]][[+[]]])+(++[[]][[+[]]]+(++[[]][[+[]]]));\r\nconsole.log('feliz ' + \u0ca0_\u0ca0 + '!!!!');\r\n[\/js]\r\n\r\n<!--more-->\r\nVamos a seguir con todo el entusiasmo que nos brinda la comunidad, sus nuevos experimentos, proyectos, est\u00e1ndares, plataformas y bibliotecas, de este ecosistema javascripter que est\u00e1 en plena revoluci\u00f3n. Por eso me la juego y aseguro que 2012 va a ser un a\u00f1o REALMENTE interesante.   \r\n\r\nHablando de fernetjs, este a\u00f1o vamos a arrancar ya con reuniones y juntadas para compartir un par de fernets y nuestras experiencias en javascript (Nos vemos ah\u00ed!). Como deseo para este a\u00f1o, queremos terminar de llevar a la pr\u00e1ctica la idea original de fernetjs, que esto no sea solo un blog, que no sea un twitter, sino que sea una comunidad basada en la COLABORACI\u00d3N y buena onda.\r\n\r\nNotas al pie:\r\nPara los que indagan por qu\u00e9 es v\u00e1lido el identificador \u0ca0_\u0ca0: <a href=\"http:\/\/stackoverflow.com\/questions\/7451524\/why-arent-and-valid-javascript-variable-names\" title=\"js identifier\" target=\"_blank\">why-arent-and-valid-javascript-variable-names<\/a> \r\nO para los que se preguntan que pasa con esa mara\u00f1a de corchetes: <a href=\"http:\/\/stackoverflow.com\/questions\/7202157\/can-you-explain-why-10\" title=\"Significado de los corchetes locos\" target=\"_blank\">can-you-explain-why-10<\/a>\r\n\r\nSaludos, los mejores deseos para todos.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Sat, 31 Dec 2011 20:11:05 +0000","created_by":1,"updated_at":"Sat, 31 Dec 2011 20:13:06 +0000","updated_by":1,"published_at":"Sat, 31 Dec 2011 20:11:05 +0000","published_by":1},{"id":1176,"title":"El mejor IDE para Javascript","slug":"el-mejor-ide-para-javascript","markdown":"\nArmo este post para que hagamos entre todos alguna suerte de opinion sobre los IDEs que hayan utilizado, que pros y contras les encuentran para ver por donde podriamos apuntar a un buen ide de javascript. Algunos de los que utilice, o no y me gustaria probar en el futuro cercano:\n\n<dl><dt>[Aptana Studio](http:\/\/aptana.com\/ \"Aptana Studio\")<\/dt><dd>Es el que estoy usando ultimamente, tiene una version stand-alone y una como add-on de Eclipse. Un excelente IDE que corre en windows, linux y mac. Lo recomiendo!, hasta el momento uno de los mejores que prob\u00e9.<\/dd><dt>[Sublime Text 2](http:\/\/www.sublimetext.com\/2 \"Sublime Text 2\") (compartido por [@pedrotgimenez](https:\/\/twitter.com\/#!\/pedrotgimenez))<\/dt><dd>Muy buena opci\u00f3n, tiene poder y es muy liviano. Tiene una version portable y corre en cualquier lado. Hasta dir\u00eda que es un buen reemplazo al Notepad++<\/dd><dt>[Cloud9IDE](http:\/\/cloud9ide.com\/ \"Cloud9 IDE\")<\/dt><dd>Otra muy buena opcion, ya que tenemos un IDE en la nube (con posibilidad de version local).<\/dd><dt>[WebStorm - JetBrains](http:\/\/www.jetbrains.com\/webstorm\/ \"WebStorm - JetBrains\")<\/dt><dd>Opcion paga con muy buenas referencias, la verdad que no lo prob\u00e9 pero es un buen candidato para jugar con la version Trial<\/dd><dt>[IxEdit](http:\/\/www.ixedit.com\/ \"IxEdit\")<\/dt><dd>No es un IDE como los anteriores, pero esta bastante bien armado para el uso del DOM y jQuery (incluido jQueryUI)<\/dd><dt>[NetBeans](http:\/\/netbeans.org\/features\/javascript\/ \"NetBeans\")(compartido por [@ideasagiles](https:\/\/twitter.com\/#!\/ideasagiles))<\/dt><dd>NetBeans IDE tiene soporte para HTML\/CSS\/Javascript que funciona bastante bien. En particular soporta autocompletar, refactors, control de compatibilidad para navegadores, y otras cositas m\u00e1s.<\/dd><\/dl> Probaron alguno?, conocen otros?. Me gustaria hacer una buena referencia de IDEs con buen soporte de Javascript. \n","html":"Armo este post para que hagamos entre todos alguna suerte de opinion sobre los IDEs que hayan utilizado, que pros y contras les encuentran para ver por donde podriamos apuntar a un buen ide de javascript.\r\n\r\nAlgunos de los que utilice, o no y me gustaria probar en el futuro cercano:\r\n\r\n<dl>\r\n\r\n<dt><a href=\"http:\/\/aptana.com\/\" title=\"Aptana Studio\" target=\"_blank\">Aptana Studio<\/a><\/dt>\r\n<dd>Es el que estoy usando ultimamente, tiene una version stand-alone y una como add-on de Eclipse. Un excelente IDE que corre en windows, linux y mac. Lo recomiendo!, hasta el momento uno de los mejores que prob\u00e9.<\/dd>\r\n\r\n<dt><a href=\"http:\/\/www.sublimetext.com\/2\" title=\"Sublime Text 2\" target=\"_blank\">Sublime Text 2<\/a> (compartido por <a href=\"https:\/\/twitter.com\/#!\/pedrotgimenez\" target=\"_blank\">@pedrotgimenez<\/a>)<\/dt>\r\n<dd>Muy buena opci\u00f3n, tiene poder y es muy liviano. Tiene una version portable y corre en cualquier lado. Hasta dir\u00eda que es un buen reemplazo al Notepad++<\/dd>\r\n\r\n<dt><a href=\"http:\/\/cloud9ide.com\/\" title=\"Cloud9 IDE\" target=\"_blank\">Cloud9IDE<\/a><\/dt>\r\n<dd>Otra muy buena opcion, ya que tenemos un IDE en la nube (con posibilidad de version local).<\/dd>\r\n\r\n<dt><a href=\"http:\/\/www.jetbrains.com\/webstorm\/\" title=\"WebStorm - JetBrains\" target=\"_blank\">WebStorm - JetBrains<\/a><\/dt>\r\n<dd>Opcion paga con muy buenas referencias, la verdad que no lo prob\u00e9 pero es un buen candidato para jugar con la version Trial<\/dd>\r\n\r\n<dt><a href=\"http:\/\/www.ixedit.com\/\" title=\"IxEdit\" target=\"_blank\">IxEdit<\/a><\/dt>\r\n<dd>No es un IDE como los anteriores, pero esta bastante bien armado para el uso del DOM y jQuery (incluido jQueryUI)<\/dd>\r\n\r\n<dt><a href=\"http:\/\/netbeans.org\/features\/javascript\/\" title=\"NetBeans\" target=\"_blank\">NetBeans<\/a>(compartido por <a href=\"https:\/\/twitter.com\/#!\/ideasagiles\" target=\"_blank\">@ideasagiles<\/a>)<\/dt>\r\n<dd>NetBeans IDE tiene soporte para HTML\/CSS\/Javascript que funciona bastante bien. En particular soporta autocompletar, refactors, control de compatibilidad para navegadores, y otras cositas m\u00e1s.<\/dd>\r\n\r\n<\/dl>\r\n\r\nProbaron alguno?, conocen otros?. Me gustaria hacer una buena referencia de IDEs con buen soporte de Javascript.\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 09 Jan 2012 12:07:38 +0000","created_by":1,"updated_at":"Fri, 27 Jan 2012 08:50:30 +0000","updated_by":1,"published_at":"Mon, 09 Jan 2012 12:07:38 +0000","published_by":1},{"id":1186,"title":"Extendiendo javascript: String.trim()","slug":"extendiendo-javascript-string-trim","markdown":"\nEl famoso trim, que casi siempre esta presente, javascript no lo tiene (o por lo menos todav\u00eda). Vamos a usar ese tan necesario metodo para ver un poco como podemos extender nuestro javascript; pero es importante no utilizar una libreria, por ej: jQuery tiene $.trim() lo cual es muy \u00fatil, pero la idea no es referenciar una libreria por un m\u00e9todo. [js highlight=\"12\"] Function.prototype.nuevoMetodo = function(nombre, funcion) { if (!this.prototype[nombre]) { this.prototype[nombre] = funcion; return this; } } String.nuevoMetodo('trim', function(){ return this.replace(\/^\\s+|\\s+$\/g, ''); }); var trimeado = ' hola'.trim(); console.log(trimeado); \/\/ 'hola' [\/js] Primero extendemos el objeto Function de javascript mediante prototype con una funcion nuestra que llam\u00e9 *nuevoMetodo*, la cual recibe un nombre y una funcion. Lo primero que hacemos es comprobar que no lo tenga, como vimos [en este post](http:\/\/fernetjs.com\/2011\/10\/usando-for-each-con-arrays\/ \"Usando for each con Arrays\") podemos acceder a propiedades de un objeto en forma de array, y ya que el valor *undefined* es falso podemos hacer la condici\u00f3n: Si no existe, lo agregamos. De esta manera estamos prototipando *Function* con una funci\u00f3n generica para agregar m\u00e9todos y extender nuestro javascript. Ahora simplemente llamamos a *nuevoMetodo* desde String (ahora lo posee por herencia) y le agregamos la funci\u00f3n trim, que basicamente es un regular expression que remueve los espacios. Es una forma segura y limpia de extender nuestro javascript para casos especificos sin tener que hacernos una funcion colgada de una palmera. Fuente: [JavaScript: The Good Parts - Douglas Crockford](http:\/\/shop.oreilly.com\/product\/9780596517748.do \"JavaScript: The Good Parts\")\n\n\n","html":"El famoso trim, que casi siempre esta presente, javascript no lo tiene (o por lo menos todav\u00eda). Vamos a usar ese tan necesario metodo para ver un poco como podemos extender nuestro javascript; pero es importante no utilizar una libreria, por ej: jQuery tiene $.trim() lo cual es muy \u00fatil, pero la idea no es referenciar una libreria por un m\u00e9todo. \r\n\r\n[js highlight=\"12\"]\r\nFunction.prototype.nuevoMetodo = function(nombre, funcion) {\r\n    if (!this.prototype[nombre]) {\r\n        this.prototype[nombre] = funcion;\r\n        return this;\r\n    }\r\n}\r\n\r\nString.nuevoMetodo('trim', function(){\r\n    return this.replace(\/^\\s+|\\s+$\/g, '');\r\n});\r\n\r\nvar trimeado = '    hola'.trim();\r\nconsole.log(trimeado); \/\/ 'hola'\r\n[\/js]\r\n\r\nPrimero extendemos el objeto Function de javascript mediante prototype con una funcion nuestra que llam\u00e9 <em>nuevoMetodo<\/em>, la cual recibe un nombre y una funcion. Lo primero que hacemos es comprobar que no lo tenga, como vimos <a href=\"http:\/\/fernetjs.com\/2011\/10\/usando-for-each-con-arrays\/\" title=\"Usando for each con Arrays\" target=\"_blank\">en este post<\/a> podemos acceder a propiedades de un objeto en forma de array, y ya que el valor <em>undefined<\/em> es falso podemos hacer la condici\u00f3n: Si no existe, lo agregamos. De esta manera estamos prototipando <em>Function<\/em> con una funci\u00f3n generica para agregar m\u00e9todos y extender nuestro javascript.\r\n\r\nAhora simplemente llamamos a <em>nuevoMetodo<\/em> desde String (ahora lo posee por herencia) y le agregamos la funci\u00f3n trim, que basicamente es un regular expression que remueve los espacios.\r\n\r\nEs una forma segura y limpia de extender nuestro javascript para casos especificos sin tener que hacernos una funcion colgada de una palmera.\r\n\r\nFuente: <a href=\"http:\/\/shop.oreilly.com\/product\/9780596517748.do\" title=\"JavaScript: The Good Parts\" target=\"_blank\">JavaScript: The Good Parts - Douglas Crockford<\/a>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Tue, 10 Jan 2012 18:59:21 +0000","created_by":1,"updated_at":"Tue, 10 Jan 2012 18:59:21 +0000","updated_by":1,"published_at":"Tue, 10 Jan 2012 18:59:21 +0000","published_by":1},{"id":1242,"title":"JavaScript idiom\u00e1tico","slug":"javascript-idiomatico","markdown":"\nPor ah\u00ed la gente m\u00e1s experimentada en lenguajes de programaci\u00f3n, o acostumbrada a trabajar en equipos con varias personas, conoce la importancia de los est\u00e1ndares de c\u00f3digo. D\u00edgase gu\u00edas de estilo, guideline, standard, \"hacelo as\u00ed o cobr\u00e1s\", etc. Est\u00e1s gu\u00edas, una vez definidas y aplicadas con cierta rigurosidad - *dependiendo del proyecto* -, pueden mejorar notablemente la mantenibilidad del programa. S\u00e9 que hay veces que s\u00f3lo queremos hackear, \"tirar c\u00f3digo\", experimentar, hacer una prueba de concepto, donde estos est\u00e1ndares no son tan necesarios. Pero conocer las 'mejores pr\u00e1cticas' no da\u00f1a a nadie, no? En este post no hablemos de proponer o conocer est\u00e1ndares comunes a casi cualquier lenguaje, como por ejemplo: \"no escribir un m\u00e9todo de m\u00e1s de 1000 l\u00edneas\", \"no hardcodear y evitar el uso de n\u00fameros m\u00e1gicos\". \u00a0Hablemos de reglas m\u00e1s espec\u00edficas a este lenguaje y \u00a0que nos ayuden a reforzar nuestro js. Si bien ya [hablamos de alguna que otra herramienta](http:\/\/fernetjs.com\/2011\/10\/intro-al-analisis-estatico-de-codigo-jslint-y-jshint\/ \"Intro al an\u00e1lisis estatico de c\u00f3digo. jslint y jshint\")\u00a0que nos asistan, hay muchas cosas que dependen m\u00e1s de nosotros. \u00bfA qu\u00e9 viene todo esto? Hace unos d\u00edas, casi accidentalmente le\u00ed [una gu\u00eda de estilos](https:\/\/github.com\/rwldrn\/idiomatic.js \"idiomatic.js (ingl\u00e9s)\")\u00a0en ingl\u00e9s hosteada en github, que se llama idiomatic.js. Me encant\u00f3, y [la traduje](https:\/\/github.com\/MatiasArriola\/idiomatic.js \"idiomatic.js - en espa\u00f1ol\"). Me gust\u00f3 mucho, tal vez sea porque:\n\n- Nos d\u00e1 una recomendaci\u00f3n bastante buena de c\u00f3mo escribir JavaScript\n- Se repasan varios aspectos del lenguaje (inclu\u00eddos los m\u00e1s traicioneros)\n- Se linkean herramientas y recursos de aprendizaje muy \u00fatiles\n- Le puede ser \u00fatil a principiantes como a expertos\n\n<div>Esperemos que a alguien m\u00e1s tambi\u00e9n le sirva, y que quede como otro material m\u00e1s de referencia para los javascripters de habla hispana!<\/div>#### De nuevo, ac\u00e1 est\u00e1 el link al repo\u00a0**[idiomatic.js](https:\/\/github.com\/MatiasArriola\/idiomatic.js \"idiomatic.js - En Espa\u00f1ol\"). Colaboraciones, y dem\u00e1s son bienvenidas!**\n\n\n","html":"Por ah\u00ed la gente m\u00e1s experimentada en lenguajes de programaci\u00f3n, o acostumbrada a trabajar en equipos con varias personas, conoce la importancia de los est\u00e1ndares de c\u00f3digo. D\u00edgase gu\u00edas de estilo, guideline, standard, \"hacelo as\u00ed o cobr\u00e1s\", etc.\r\n\r\nEst\u00e1s gu\u00edas, una vez definidas y aplicadas con cierta rigurosidad - <em>dependiendo del proyecto<\/em> -, pueden mejorar notablemente la mantenibilidad del programa.\r\n\r\nS\u00e9 que hay veces que s\u00f3lo queremos hackear, \"tirar c\u00f3digo\", experimentar, hacer una prueba de concepto, donde estos est\u00e1ndares no son tan necesarios. Pero conocer las 'mejores pr\u00e1cticas' no da\u00f1a a nadie, no? En este post no hablemos de proponer o conocer est\u00e1ndares comunes a casi cualquier lenguaje, como por ejemplo: \"no escribir un m\u00e9todo de m\u00e1s de 1000 l\u00edneas\", \"no hardcodear y evitar el uso de n\u00fameros m\u00e1gicos\". \u00a0Hablemos de reglas m\u00e1s espec\u00edficas a este lenguaje y \u00a0que nos ayuden a reforzar nuestro js. Si bien ya <a title=\"Intro al an\u00e1lisis estatico de c\u00f3digo. jslint y jshint\" href=\"http:\/\/fernetjs.com\/2011\/10\/intro-al-analisis-estatico-de-codigo-jslint-y-jshint\/\" target=\"_blank\">hablamos de alguna que otra herramienta<\/a>\u00a0que nos asistan, hay muchas cosas que dependen m\u00e1s de nosotros.\r\n\r\n\u00bfA qu\u00e9 viene todo esto? Hace unos d\u00edas, casi accidentalmente le\u00ed <a title=\"idiomatic.js (ingl\u00e9s)\" href=\"https:\/\/github.com\/rwldrn\/idiomatic.js\" target=\"_blank\">una gu\u00eda de estilos<\/a>\u00a0en ingl\u00e9s hosteada en github, que se llama idiomatic.js. Me encant\u00f3, y <a title=\"idiomatic.js - en espa\u00f1ol\" href=\"https:\/\/github.com\/MatiasArriola\/idiomatic.js\" target=\"_blank\">la traduje<\/a>.\r\nMe gust\u00f3 mucho, tal vez sea porque:\r\n<ul>\r\n\t<li>Nos d\u00e1 una recomendaci\u00f3n bastante buena de c\u00f3mo escribir JavaScript<\/li>\r\n\t<li>Se repasan varios aspectos del lenguaje (inclu\u00eddos los m\u00e1s traicioneros)<\/li>\r\n\t<li>Se linkean herramientas y recursos de aprendizaje muy \u00fatiles<\/li>\r\n\t<li>Le puede ser \u00fatil a principiantes como a expertos<\/li>\r\n<\/ul>\r\n<div>Esperemos que a alguien m\u00e1s tambi\u00e9n le sirva, y que quede como otro material m\u00e1s de referencia para los javascripters de habla hispana!<\/div>\r\n<h4>De nuevo, ac\u00e1 est\u00e1 el link al repo\u00a0<strong><a title=\"idiomatic.js - En Espa\u00f1ol\" href=\"https:\/\/github.com\/MatiasArriola\/idiomatic.js\" target=\"_blank\">idiomatic.js<\/a>. Colaboraciones, y dem\u00e1s son bienvenidas!<\/strong><\/h4>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Thu, 19 Jan 2012 09:30:20 +0000","created_by":1,"updated_at":"Thu, 19 Jan 2012 13:40:48 +0000","updated_by":1,"published_at":"Thu, 19 Jan 2012 09:30:20 +0000","published_by":1},{"id":1200,"title":"Patrones de Invocaci\u00f3n de Funciones: this","slug":"patrones-de-invocacion-de-funciones-this","markdown":"\nCada vez que llamamos a una funci\u00f3n en javascript se crea un nuevo contexto, en el cual tenemos *this* y *arguments*, el \u00faltimo lo pueden ver mejor explicado [en este post](http:\/\/fernetjs.com\/2011\/11\/funciones-argumentos-y-parametros\/ \"Funciones: Argumentos y Par\u00e1metros\"). El *this* se va a inicializar de distintas formas dependiendo de como invoquemos a la funci\u00f3n. Hay 4 patrones para invocar una funci\u00f3n:\n\n- como M\u00e9todo\n- como Funci\u00f3n\n- como Constructor\n- y con *Apply*\n\n### Patr\u00f3n de invocaci\u00f3n como M\u00e9todo\n\n Cuando una funci\u00f3n es guardada como una propiedad de un objeto, lo llamamos *m\u00e9todo*. En este caso *this* es inicializado con el objeto al que pertenece la funci\u00f3n. [js highlight=\"4\"] var obj = { valor: 0, incrementar: function(incremento){ this.valor += incremento; } }; obj.incrementar(2); console.log(obj.valor); \/\/ 2 [\/js] ### Patr\u00f3n de invocaci\u00f3n como Funci\u00f3n\n\n Cuando una funci\u00f3n no est\u00e1 dentro de un objeto es invocada como funci\u00f3n, y *this* es inicializado con el Objeto Global. Esto es un problema, ya que cuando llamamos a una funci\u00f3n dentro de otra, *this* sigue referenciando al Objeto Global y si queremos acceder al this de la funci\u00f3n padre tenemos que almacenarlo en una variable primero: [js highlight=\"4\"] var obj = { valor: 0, incrementar: function(incremento){ \/\/ es invocado como m\u00e9todo var that = this; function otraFuncion(unValor){ \/\/es invocado como funci\u00f3n \/\/en esta funci\u00f3n this referencia al Objeto Global that.valor += unValor; } otraFuncion(incremento); } }; obj.incrementar(2); console.log(obj.valor); \/\/ 2 [\/js] ### Patr\u00f3n de invocaci\u00f3n como Constructor\n\n Javascript es un lenguaje de herencia prototipada, lo que significa que un objeto puede heredar directamente propiedades de otro objeto y como su prototipado no es muy convincente, javascript ofrece una sintaxis estilo *creaci\u00f3n de objetos* como en los lenguajes clasicos de POO (Programaci\u00f3n Orientada a Objetos). Dicho esto, cuando invocamos una funci\u00f3n con *new* se crear\u00e1 un objeto con una referencia al valor de su miembro de funci\u00f3n prototipada (tambi\u00e9n llamado *constructor*) y *this* tendr\u00e1 una referencia a este nuevo objeto. [js highlight=\"2,5\"] var Persona = function(){ \/\/ nuestro \"constructor\" this.nombre = 'Jos\u00e9'; } Persona.prototype.mostrarNombre = function(){ console.log(this.nombre); \/\/con this accedemos al constructor } var p = new Persona(); p.mostrarNombre(); \/\/imprime 'Jos\u00e9' [\/js] > como vimos antes, si invocamos la funci\u00f3n Persona() sin el new, *this* se inicializa distinto y nuestra *clase* se va a comportar de forma muy extra\u00f1a, es por eso que como convenci\u00f3n llamamos a las *clases* con la primer letra en may\u00fascula.\n\n### Patr\u00f3n de invocaci\u00f3n con Apply\n\n La funci\u00f3n *apply* nos deja construir un arreglo de argumentos para usar al invocar una funci\u00f3n y tambi\u00e9n nos deja elegir el valor que tendr\u00e1 *this*. *apply* recibe 2 parametros, el primero es el valor para *this* y el segundo es un arreglo de par\u00e1metros. Usando el ejemplo anterior de prototipado, vamos a cambiar el *this* utilizando el *apply* [js highlight=\"5,10,15\"] var Persona = function(){ \/\/ nuestro \"constructor\" this.nombre = 'Jos\u00e9'; } Persona.prototype.mostrarNombre = function(){ console.log(this.nombre); \/\/con this accedemos al constructor } \/\/con apply cambiamos el this referenciado al objeto persona por otroObjeto var otroObjeto = { nombre: 'Pepe' }; var p = new Persona(); p.mostrarNombre(); \/\/imprime 'Jos\u00e9' p.mostrarNombre.apply(otroObjeto); \/\/ imprime 'Pepe' [\/js] Fuente: [JavaScript: The Good Parts - Douglas Crockford](http:\/\/shop.oreilly.com\/product\/9780596517748.do \"JavaScript: The Good Parts\")\n","html":"Cada vez que llamamos a una funci\u00f3n en javascript se crea un nuevo contexto, en el cual tenemos <em>this<\/em> y <em>arguments<\/em>, el \u00faltimo lo pueden ver mejor explicado <a href=\"http:\/\/fernetjs.com\/2011\/11\/funciones-argumentos-y-parametros\/\" title=\"Funciones: Argumentos y Par\u00e1metros\" target=\"_blank\">en este post<\/a>. El <em>this<\/em> se va a inicializar de distintas formas dependiendo de como invoquemos a la funci\u00f3n.\r\n \r\nHay 4 patrones para invocar una funci\u00f3n:\r\n<ul>\r\n<li>como M\u00e9todo<\/li>\r\n<li>como Funci\u00f3n<\/li>\r\n<li>como Constructor<\/li>\r\n<li>y con <em>Apply<\/em><\/li>\r\n<\/ul>\r\n\r\n\r\n<h3>Patr\u00f3n de invocaci\u00f3n como M\u00e9todo<\/h3>\r\nCuando una funci\u00f3n es guardada como una propiedad de un objeto, lo llamamos <em>m\u00e9todo<\/em>. En este caso <em>this<\/em> es inicializado con el objeto al que pertenece la funci\u00f3n.\r\n\r\n[js highlight=\"4\"]\r\nvar obj = {\r\n    valor: 0,\r\n    incrementar: function(incremento){\r\n       this.valor += incremento;\r\n    }\r\n};\r\n\r\nobj.incrementar(2);\r\nconsole.log(obj.valor); \/\/ 2\r\n[\/js]\r\n<!--more-->\r\n\r\n<h3>Patr\u00f3n de invocaci\u00f3n como Funci\u00f3n<\/h3>\r\nCuando una funci\u00f3n no est\u00e1 dentro de un objeto es invocada como funci\u00f3n, y <em>this<\/em> es inicializado con el Objeto Global. Esto es un problema, ya que cuando llamamos a una funci\u00f3n dentro de otra, <em>this<\/em> sigue referenciando al Objeto Global y si queremos acceder al this de la funci\u00f3n padre tenemos que almacenarlo en una variable primero:\r\n\r\n[js highlight=\"4\"]\r\nvar obj = {\r\n    valor: 0,\r\n    incrementar: function(incremento){ \/\/ es invocado como m\u00e9todo\r\n       var that = this;\r\n\r\n       function otraFuncion(unValor){ \/\/es invocado como funci\u00f3n\r\n           \/\/en esta funci\u00f3n this referencia al Objeto Global\r\n           that.valor += unValor;\r\n       }\r\n\r\n       otraFuncion(incremento);\r\n    }\r\n};\r\n\r\nobj.incrementar(2);\r\nconsole.log(obj.valor); \/\/ 2\r\n\r\n[\/js]\r\n\r\n<h3>Patr\u00f3n de invocaci\u00f3n como Constructor<\/h3>\r\nJavascript es un lenguaje de herencia prototipada, lo que significa que un objeto puede heredar directamente propiedades de otro objeto y como su prototipado no es muy convincente, javascript ofrece una sintaxis estilo <em>creaci\u00f3n de objetos<\/em> como en los lenguajes clasicos de POO (Programaci\u00f3n Orientada a Objetos).\r\nDicho esto, cuando invocamos una funci\u00f3n con <em>new<\/em> se crear\u00e1 un objeto con una referencia al valor de su miembro de funci\u00f3n prototipada (tambi\u00e9n llamado <em>constructor<\/em>) y <em>this<\/em> tendr\u00e1 una referencia a este nuevo objeto.\r\n\r\n[js highlight=\"2,5\"]\r\nvar Persona = function(){ \/\/ nuestro &quot;constructor&quot;\r\n    this.nombre = 'Jos\u00e9';\r\n}\r\nPersona.prototype.mostrarNombre = function(){\r\n    console.log(this.nombre); \/\/con this accedemos al constructor\r\n}\r\n\r\nvar p = new Persona();\r\np.mostrarNombre(); \/\/imprime 'Jos\u00e9'\r\n[\/js]\r\n\r\n<blockquote>\r\ncomo vimos antes, si invocamos la funci\u00f3n Persona() sin el new, <em>this<\/em> se inicializa distinto y nuestra <em>clase<\/em> se va a comportar de forma muy extra\u00f1a, es por eso que como convenci\u00f3n llamamos a las <em>clases<\/em> con la primer letra en may\u00fascula.\r\n<\/blockquote>\r\n\r\n<h3>Patr\u00f3n de invocaci\u00f3n con Apply<\/h3>\r\nLa funci\u00f3n <em>apply<\/em> nos deja construir un arreglo de argumentos para usar al invocar una funci\u00f3n y tambi\u00e9n nos deja elegir el valor que tendr\u00e1 <em>this<\/em>.\r\n<em>apply<\/em> recibe 2 parametros, el primero es el valor para <em>this<\/em> y el segundo es un arreglo de par\u00e1metros.\r\n\r\nUsando el ejemplo anterior de prototipado, vamos a cambiar el <em>this<\/em> utilizando el <em>apply<\/em>\r\n\r\n[js highlight=\"5,10,15\"]\r\nvar Persona = function(){ \/\/ nuestro &quot;constructor&quot;\r\n    this.nombre = 'Jos\u00e9';\r\n}\r\nPersona.prototype.mostrarNombre = function(){\r\n    console.log(this.nombre); \/\/con this accedemos al constructor\r\n}\r\n\r\n\/\/con apply cambiamos el this referenciado al objeto persona por otroObjeto\r\nvar otroObjeto = {\r\n    nombre: 'Pepe'\r\n};\r\n\r\nvar p = new Persona();\r\np.mostrarNombre(); \/\/imprime 'Jos\u00e9'\r\np.mostrarNombre.apply(otroObjeto); \/\/ imprime 'Pepe'\r\n[\/js]\r\n\r\nFuente: <a href=\"http:\/\/shop.oreilly.com\/product\/9780596517748.do\" title=\"JavaScript: The Good Parts\" target=\"_blank\">JavaScript: The Good Parts - Douglas Crockford<\/a>\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 23 Jan 2012 09:07:22 +0000","created_by":1,"updated_at":"Sun, 17 Aug 2014 16:21:43 +0000","updated_by":1,"published_at":"Mon, 23 Jan 2012 09:07:22 +0000","published_by":1},{"id":1230,"title":"Terremoto Web","slug":"terremoto-web","markdown":"\nDesde que vi el tilt de google, el snow, etc ... vengo con ganas de jugar con el poder que trae Canvas y CSS 3 combinados. Asi que les dejo un script divertido que hice para causar un \"terremoto\" en alguna pagina web usando Rotate y Translate de CSS3. Simplemente entren a una web, abran la consola con F12 (Firefox o Chrome), en el tab scripts peguen el siguiente codigo y EJECUTAR [js] function terremoto() { var ele = document.getElementsByTagName('body')[0], vel = 80, m = 1, tInterval, x = 0, tiempo = 20000; \/\/20 segs ele.style[\"overflow-x\"] = \"hidden\"; tInterval = setInterval(function() { m *= -1; x = x + (0.1 * m); aplicarEstilos(ele, x); }, vel); setTimeout(function() { clearInterval(tInterval); aplicarEstilos(ele, 0); ele.style[\"overflow-x\"] = \"auto\"; }, tiempo); } function aplicarEstilos(ele, x) { ele.style.webkitTransform = \"rotate(\" + (x*3) + \"deg) translate(\" + x*80 + \"px, \" + x*10 + \"px)\"; ele.style.MozTransform = \"rotate(\" + (x*3) + \"deg) translate(\" + x*80 + \"px, \" + x*10 + \"px)\"; } terremoto(); [\/js] <script type=\"text\/javascript\">function terremoto() {var ele = document.getElementsByTagName('body')[0],vel = 80,m = 1,tInterval,x = 0,tiempo = 20000;ele.style[\"overflow-x\"] = \"hidden\";tInterval = setInterval(function() {m *= -1;x = x + (0.1 * m);aplicarEstilos(ele, x);}, vel);setTimeout(function() {clearInterval(tInterval);aplicarEstilos(ele, 0);ele.style[\"overflow-x\"] = \"auto\";}, tiempo);} function aplicarEstilos(ele, x) {   ele.style.webkitTransform = \"rotate(\" + (x*3) + \"deg) translate(\" + x*80 + \"px, \" + x*10 + \"px)\";ele.style.MozTransform = \"rotate(\" + (x*3) + \"deg) translate(\" + x*80 + \"px, \" + x*10 + \"px)\";}<\/script> Lo pueden probar con FernetJS haciendo click [aca](javascript:terremoto(); \"Terremotooooooo\")\n\n\n","html":"Desde que vi el tilt de google, el snow, etc ... vengo con ganas de jugar con el poder que trae Canvas y CSS 3 combinados. Asi que les dejo un script divertido que hice para causar un \"terremoto\" en alguna pagina web usando Rotate y Translate de CSS3.\r\n\r\nSimplemente entren a una web, abran la consola con F12 (Firefox o Chrome), en el tab scripts peguen el siguiente codigo y EJECUTAR\r\n\r\n[js]\r\nfunction terremoto() {\r\n    var ele = document.getElementsByTagName('body')[0],\r\n         vel = 80,\r\n         m = 1,\r\n         tInterval,\r\n         x = 0,\r\n         tiempo = 20000; \/\/20 segs\r\n\r\n    ele.style[&quot;overflow-x&quot;] = &quot;hidden&quot;;\r\n\r\n    tInterval = setInterval(function() {\r\n        m *= -1;\r\n        x = x + (0.1 * m);\r\n        aplicarEstilos(ele, x);\r\n    }, vel);\r\n\r\n    setTimeout(function() {\r\n       clearInterval(tInterval);\r\n       aplicarEstilos(ele, 0);\r\n       ele.style[&quot;overflow-x&quot;] = &quot;auto&quot;;\r\n    }, tiempo);\r\n}\r\n\r\nfunction aplicarEstilos(ele, x) {\r\n    ele.style.webkitTransform = &quot;rotate(&quot; + (x*3) + &quot;deg) translate(&quot; + x*80 + &quot;px, &quot; + x*10 + &quot;px)&quot;;\r\n    ele.style.MozTransform = &quot;rotate(&quot; + (x*3) + &quot;deg) translate(&quot; + x*80 + &quot;px, &quot; + x*10 + &quot;px)&quot;;\r\n}\r\n\r\nterremoto();\r\n[\/js]\r\n\r\n<script type=\"text\/javascript\">function terremoto() {var ele = document.getElementsByTagName('body')[0],vel = 80,m = 1,tInterval,x = 0,tiempo = 20000;ele.style[\"overflow-x\"] = \"hidden\";tInterval = setInterval(function() {m *= -1;x = x + (0.1 * m);aplicarEstilos(ele, x);}, vel);setTimeout(function() {clearInterval(tInterval);aplicarEstilos(ele, 0);ele.style[\"overflow-x\"] = \"auto\";}, tiempo);} function aplicarEstilos(ele, x) {   ele.style.webkitTransform = \"rotate(\" + (x*3) + \"deg) translate(\" + x*80 + \"px, \" + x*10 + \"px)\";ele.style.MozTransform = \"rotate(\" + (x*3) + \"deg) translate(\" + x*80 + \"px, \" + x*10 + \"px)\";}<\/script>\r\n\r\nLo pueden probar con FernetJS haciendo click <a title=\"Terremotooooooo\" href=\"javascript:terremoto();\">aca<\/a>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Tue, 24 Jan 2012 09:44:36 +0000","created_by":1,"updated_at":"Tue, 09 Sep 2014 23:02:06 +0000","updated_by":1,"published_at":"Tue, 24 Jan 2012 09:44:36 +0000","published_by":1},{"id":1303,"title":"Space Invaders 404","slug":"space-invaders-404","markdown":"\nFernetJS tiene ahora un error 404 personalizado en canvas! ... claro, no pod\u00eda faltar! El clasico juego Space Invaders en javascript usando el amado CANVAS para mostrar algo mas divertido que un *404 - Not Found*. [Jugar Invaders 404](http:\/\/fernetjs.com\/notfound \"404 - Not Found\") El objetivo era, aparte de ser un *code for fun*, que sea muy configurable y que no use ni media imagen! ... todo lo que se dibuja en el CANVAS es a partir de arreglos JSON de n\u00fameros. Por ejemplo:\n\n#### Disposici\u00f3n de la invasi\u00f3n alien\u00edgena\n\n [js] \/\/ formando el \"404\" con los aliens \/\/ 1 = Alien Cangrejo | 2 = Alien Calamar ImageMapper.Invasion = function(){ return [ [2,2,2,2,2,2,2,2,2,2,2,2,2], [2,2,2,1,2,1,1,1,2,2,2,1,2], [2,2,1,1,2,1,2,1,2,2,1,1,2], [2,1,2,1,2,1,2,1,2,1,2,1,2], [2,1,1,1,2,1,2,1,2,1,1,1,2], [2,2,2,1,2,1,1,1,2,2,2,1,2], [2,2,2,2,2,2,2,2,2,2,2,2,2] ]; }; [\/js] #### Disposici\u00f3n de los ladrillos para el escudo\n\n [js] \/\/ formando el \"NOT FOUND\" del escudo \/\/ 1 = Ladrillo de Escudo ImageMapper.Shield = function(){ return [ [1,0,0,1,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,1,0,1,1,0], [1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1], [1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1], [1,0,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1], [1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,1,0] ]; }; [\/js] Los aliens, cada ladrillo del escudo, la nave y los disparos tambi\u00e9n son arreglos ... [js] \/\/ JSON array para el Alien Cangrejo \/\/ 0 = transparente | 1 = est\u00e1tico | 2 y 3 = estados de animaci\u00f3n ImageMapper.AlienCrab = function(){ return [ [0,0,1,0,0,0,0,0,1,0,0], [3,0,0,1,0,0,0,1,0,0,3], [3,0,0,1,0,0,0,1,0,0,3], [3,0,1,1,1,1,1,1,1,0,3], [3,0,1,0,1,1,1,0,1,0,3], [3,1,1,1,1,1,1,1,1,1,3], [2,1,1,1,1,1,1,1,1,1,2], [2,0,1,1,1,1,1,1,1,0,2], [2,0,1,1,1,1,1,1,1,0,2], [2,0,1,0,0,0,0,0,1,0,2], [2,0,1,0,0,0,0,0,1,0,2], [0,3,0,2,2,0,2,2,0,3,0] ]; }; [\/js] ... pero claro, todo iba muy bien hasta que empec\u00e9 a tener muchas instancias *volando* por cada objeto dibujable. Digamos que tenia que dibujar bloque por bloque por cada elemento y r\u00e1pidamente la performance se me fue al pozo. Es ah\u00ed cuando empec\u00e9 a investigar como podr\u00eda mejorar eso sin tener que crearme los sprites (im\u00e1genes por cada elemento) y descubr\u00ed el ***canvas.toDataURL(\"image\/png\")***. Para mi magia personal, eso nos devuelve un data con toda la imagen en texto, por lo que entonces solucion\u00e9 la performance generando las imagenes antes de comenzar el juego y despues simplemente usandolas. Una cosa llev\u00f3 a la otra y termin\u00e9 armando una peque\u00f1a librer\u00eda para hacer lo mismo mas simple. En estos d\u00edas voy a postearla .... pero mientras tanto ... a matar aliens! Les dejo los fuentes y como usarlo en [github](https:\/\/github.com\/pjnovas\/invaders404 \"Fuente\"), est\u00e1 de m\u00e1s decir que son libres de hacer un FORK, modificarlo a su gusto y usarlo :) \n","html":"FernetJS tiene ahora un error 404 personalizado en canvas! ... claro, no pod\u00eda faltar!\r\n\r\nEl clasico juego Space Invaders en javascript usando el amado CANVAS para mostrar algo mas divertido que un <em>404 - Not Found<\/em>. \r\n\r\n<a href=\"http:\/\/fernetjs.com\/notfound\" title=\"404 - Not Found\" target=\"_blank\">Jugar Invaders 404<\/a>\r\n\r\nEl objetivo era, aparte de ser un <em>code for fun<\/em>, que sea muy configurable y que no use ni media imagen! ... todo lo que se dibuja en el CANVAS es a partir de arreglos JSON de n\u00fameros. Por ejemplo:\r\n<!--more-->\r\n<h4>Disposici\u00f3n de la invasi\u00f3n alien\u00edgena<\/h4>\r\n[js]\r\n\/\/ formando el &quot;404&quot; con los aliens\r\n\/\/ 1 = Alien Cangrejo | 2 = Alien Calamar\r\nImageMapper.Invasion = function(){\r\n    return [\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2],\r\n        [2,2,2,1,2,1,1,1,2,2,2,1,2],\r\n        [2,2,1,1,2,1,2,1,2,2,1,1,2],\r\n        [2,1,2,1,2,1,2,1,2,1,2,1,2],\r\n        [2,1,1,1,2,1,2,1,2,1,1,1,2],\r\n        [2,2,2,1,2,1,1,1,2,2,2,1,2],\r\n        [2,2,2,2,2,2,2,2,2,2,2,2,2]\r\n    ];\r\n};\r\n[\/js]\r\n\r\n<h4>Disposici\u00f3n de los ladrillos para el escudo<\/h4>\r\n[js]\r\n\/\/ formando el &quot;NOT FOUND&quot; del escudo\r\n\/\/ 1 = Ladrillo de Escudo\r\nImageMapper.Shield = function(){\r\n    return [ \r\n        [1,0,0,1,0,1,1,1,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,0,0,1,0,1,1,0],\r\n        [1,1,0,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1],\r\n        [1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1],\r\n        [1,0,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1],\r\n        [1,0,0,1,0,1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,1,0,1,1,0]\r\n    ];\r\n};\r\n[\/js]\r\n\r\nLos aliens, cada ladrillo del escudo, la nave y los disparos tambi\u00e9n son arreglos ... \r\n[js]\r\n\/\/ JSON array para el Alien Cangrejo\r\n\/\/ 0 = transparente | 1 = est\u00e1tico | 2 y 3 = estados de animaci\u00f3n\r\nImageMapper.AlienCrab = function(){\r\n    return [\r\n        [0,0,1,0,0,0,0,0,1,0,0],\r\n        [3,0,0,1,0,0,0,1,0,0,3],\r\n        [3,0,0,1,0,0,0,1,0,0,3],\r\n        [3,0,1,1,1,1,1,1,1,0,3],\r\n        [3,0,1,0,1,1,1,0,1,0,3],\r\n        [3,1,1,1,1,1,1,1,1,1,3],\r\n        [2,1,1,1,1,1,1,1,1,1,2],\r\n        [2,0,1,1,1,1,1,1,1,0,2],\r\n        [2,0,1,1,1,1,1,1,1,0,2],\r\n        [2,0,1,0,0,0,0,0,1,0,2],\r\n        [2,0,1,0,0,0,0,0,1,0,2],\r\n        [0,3,0,2,2,0,2,2,0,3,0]\r\n    ];\r\n};\r\n[\/js]\r\n\r\n... pero claro, todo iba muy bien hasta que empec\u00e9 a tener muchas instancias <em>volando<\/em> por cada objeto dibujable. Digamos que tenia que dibujar bloque por bloque por cada elemento y r\u00e1pidamente la performance se me fue al pozo.\r\n\r\nEs ah\u00ed cuando empec\u00e9 a investigar como podr\u00eda mejorar eso sin tener que crearme los sprites (im\u00e1genes por cada elemento) y descubr\u00ed el <strong><em>canvas.toDataURL(\"image\/png\")<\/em><\/strong>. Para mi magia personal, eso nos devuelve un data con toda la imagen en texto, por lo que entonces solucion\u00e9 la performance generando las imagenes antes de comenzar el juego y despues simplemente usandolas.\r\n\r\nUna cosa llev\u00f3 a la otra y termin\u00e9 armando una peque\u00f1a librer\u00eda para hacer lo mismo mas simple. En estos d\u00edas voy a postearla .... pero mientras tanto ... a matar aliens! \r\n\r\nLes dejo los fuentes y como usarlo en <a href=\"https:\/\/github.com\/pjnovas\/invaders404\" title=\"Fuente\" target=\"_blank\">github<\/a>, est\u00e1 de m\u00e1s decir que son libres de hacer un FORK, modificarlo a su gusto y usarlo :)\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 26 Jan 2012 09:37:35 +0000","created_by":1,"updated_at":"Thu, 26 Jan 2012 09:37:41 +0000","updated_by":1,"published_at":"Thu, 26 Jan 2012 09:37:35 +0000","published_by":1},{"id":1329,"title":"Entendiendo Deferreds en jQuery","slug":"entendiendo-deferreds-en-jquery","markdown":"\n### \u00bfQu\u00e9 es un Deferred?\n\n Es un tipo de objeto que se introdujo en jQuery 1.5, que nos permite encadenar distintas acciones (callbacks) y disparar cierta funcionalidad (otros callbacks) dependiendo de su estado. Es similar y persigue la misma idea de las [Promises](http:\/\/wiki.commonjs.org\/wiki\/Promises\/A \"Promises\/A - CommonJS\") y\/o Futures, ya tambi\u00e9n conocidas con anterioridad e implementadas por ejemplo como paquetes para nodejs, donde el asincronismo, el anidamiento y las dependencias entre callbacks incrementaban la complejidad del programa, y se necesitaba una forma de manejar esto de manera m\u00e1s limpia y mantenible. ### Veamos C\u00f3digo\n\n AJAX es uno de los principales usos de las deferreds en la mayor\u00eda de los casos. Un ejemplo sencillo: Antes de la versi\u00f3n 1.5 de jQuery, as\u00ed tendr\u00edamos que hacer para ejecutar dos acciones luego de la respuesta existosa a una llamada get:  [js] $.get(\"postCopado.php\", function(data){ accionPostCarga1(data); accionPostCarga2(data); }); [\/js] A partir de la 1.5, $.get nos devuelve un objeto que cumple con la interfaz de una Deferred, por lo que podemos hacer algo as\u00ed: [js] \/\/ accionPostCarga1 y accionPostCarga2 son funciones que se van a ejecutar una vez que tengamos \/\/ una respuesta exitosa a la petici\u00f3n get $.get(\"postCopado.php\").done(accionPostCarga1, accionPostCarga2); [\/js] Tanto como $.get como .done en este caso devuelven la misma Deferred ( o sea que es encadenable \/ chainable ) ==> podemos seguir agregando acciones: [js] \/\/ Agrego una funci\u00f3n a ejecutar en caso de que la request get falle. $.get(\"postCopado.php\").done(accionPostCarga1, accionPostCarga2).fail(mostrarError); [\/js] O tambien puedo guardar la deferred en una variable y manipularla: [js] var req = $.get(\"postCopado.php\"); req.done(accionPostCarga1, accionPostCarga2); req.fail(mostrarError); \/\/ ocultarAjaxLoaderIcon se va a ejecutar no importa si la respuesta fue exitosa o fallida. req.always(ocultarAjaxLoaderIcon); console.log('esto se ejecuta primero que nada, y luego las acciones definidas para req'); [\/js] Ahora imaginemos que queremos que cierta funcionalidad se ejecute cuando ya se obtuvo la respuesta para dos requests distintas?? F\u00e1cil, usamos $.when [js] \/\/armarPagina se ejecuta solo si se obtienen las respuestas exitosas \/\/ a las dos requests. $.when( $.get('post.php'), $.get('comments.php') ).done(armarPagina); function armarPagina(a, b){ \/\/ a es un array con los argumentos que recibiria de la primer request, \/\/ b lo mismo pero para la segunda request. console.log(a[2].responseText); console.log(b[2].responseText); } [\/js] ### \u00bfEsto s\u00f3lo?\n\n No - Como fu\u00e9 antes mencionado el uso de las Deferreds no se limita a AJAX, sino que es una idea m\u00e1s arquitectural. Uno puede crear sus propias deferreds usando $.Deferred(), pero eso lo vamos a ahondar m\u00e1s en detalle en un futuro post. Si no te aguant\u00e1s, pod\u00e9s echarle un vistazo a [Deferred Object](http:\/\/api.jquery.com\/category\/deferred-object\/ \"Deferred Object - jQuery\") en la documentaci\u00f3n oficial. \n","html":"<h3>\u00bfQu\u00e9 es un Deferred?<\/h3>\r\nEs un tipo de objeto que se introdujo en jQuery 1.5, que nos permite encadenar distintas acciones (callbacks) y disparar cierta funcionalidad (otros callbacks) dependiendo de su estado.\r\nEs similar y persigue la misma idea de las <a title=\"Promises\/A - CommonJS\" href=\"http:\/\/wiki.commonjs.org\/wiki\/Promises\/A\" target=\"_blank\">Promises<\/a> y\/o Futures, ya tambi\u00e9n conocidas con anterioridad e implementadas por ejemplo como paquetes para nodejs, donde el asincronismo, el anidamiento y las dependencias entre callbacks incrementaban la complejidad del programa, y se necesitaba una forma de manejar esto de manera m\u00e1s limpia y mantenible.\r\n\r\n<h3>Veamos C\u00f3digo<\/h3>\r\n\r\nAJAX es uno de los principales usos de las deferreds en la mayor\u00eda de los casos. Un ejemplo sencillo:\r\n\r\nAntes de la versi\u00f3n 1.5 de jQuery, as\u00ed tendr\u00edamos que hacer para ejecutar dos acciones luego de la respuesta existosa a una llamada get:\r\n<!--more-->\r\n[js]\r\n$.get(&quot;postCopado.php&quot;,\r\n\tfunction(data){\r\n\t\taccionPostCarga1(data);\r\n\t\taccionPostCarga2(data);\r\n\t});\r\n[\/js]\r\n\r\nA partir de la 1.5, $.get nos devuelve un objeto que cumple con la interfaz de una Deferred, por lo que podemos hacer algo as\u00ed:\r\n\r\n[js]\r\n\/\/ accionPostCarga1 y accionPostCarga2 son funciones que se van a ejecutar una vez que tengamos \r\n\/\/  una respuesta exitosa a la petici\u00f3n get\r\n$.get(&quot;postCopado.php&quot;).done(accionPostCarga1, accionPostCarga2);\r\n[\/js]\r\n\r\nTanto como $.get como .done en este caso devuelven la misma Deferred ( o sea que es encadenable \/ chainable ) ==> podemos seguir agregando acciones:\r\n\r\n[js]\r\n\/\/ Agrego una funci\u00f3n a ejecutar en caso de que la request get falle.\r\n$.get(&quot;postCopado.php&quot;).done(accionPostCarga1, accionPostCarga2).fail(mostrarError);\r\n[\/js]\r\n\r\nO tambien puedo guardar la deferred en una variable y manipularla:\r\n[js]\r\nvar req = $.get(&quot;postCopado.php&quot;);\r\nreq.done(accionPostCarga1, accionPostCarga2);\r\nreq.fail(mostrarError);\r\n\/\/ ocultarAjaxLoaderIcon se va a ejecutar no importa si la respuesta fue exitosa o fallida.\r\nreq.always(ocultarAjaxLoaderIcon);\r\nconsole.log('esto se ejecuta primero que nada, y luego las acciones definidas para req');\r\n[\/js]\r\n\r\nAhora imaginemos que queremos que cierta funcionalidad se ejecute cuando ya se obtuvo la respuesta para dos requests distintas?? F\u00e1cil, usamos $.when\r\n\r\n[js]\r\n\/\/armarPagina se ejecuta solo si se obtienen las respuestas exitosas\r\n\/\/ a las dos requests.\r\n$.when( $.get('post.php'), $.get('comments.php') ).done(armarPagina);\r\n\r\nfunction armarPagina(a, b){\r\n\/\/ a es un array con los argumentos que recibiria de la primer request,\r\n\/\/ b lo mismo pero para la segunda request.\r\n    console.log(a[2].responseText);\r\n    console.log(b[2].responseText);\r\n}\r\n[\/js]\r\n\r\n<h3>\u00bfEsto s\u00f3lo?<\/h3>\r\nNo - Como fu\u00e9 antes mencionado el uso de las Deferreds no se limita a AJAX, sino que es una idea m\u00e1s arquitectural.\r\nUno puede crear sus propias deferreds usando $.Deferred(), pero eso lo vamos a ahondar m\u00e1s en detalle en un futuro post. Si no te aguant\u00e1s, pod\u00e9s echarle un vistazo a <a href=\"http:\/\/api.jquery.com\/category\/deferred-object\/\" title=\"Deferred Object - jQuery\" target=\"_blank\">Deferred Object<\/a> en la documentaci\u00f3n oficial.\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Thu, 02 Feb 2012 13:26:59 +0000","created_by":1,"updated_at":"Thu, 02 Feb 2012 13:26:59 +0000","updated_by":1,"published_at":"Thu, 02 Feb 2012 13:26:59 +0000","published_by":1},{"id":1249,"title":"Atributos customs HTML5","slug":"data-html5","markdown":"\nLos que habr\u00e1n usado alguna vez los famosos \"custom attributes\" o atributos personalizados en el html, conocer\u00e1n que no era recomendado, nos complicaba las validaciones de HTML y tambi\u00e9n era potencialmente peligroso para futuras versiones de HTML: [html title=\"HTML\" highlight=\"1\"]  <div id=\"categorias\" class=\"contendor rojo\" orden=\"34\"> <\/div> [\/html] [js title=\"Javascript\"] var div = document.getElementById('categorias'); var orden = div.getAttribute('orden'); div.setAttribute('otro','algunValor'); [\/js] HTML5 nos trae otra forma de verlo, todo attributo custom que utilicemos, hagamoslo con \"data-*\", es decir siempre con el \"data-\" y nuestro custom, de esta manera el validador de html no molesta, ni tampoco tendremos problemas con futuras versiones de HTML: [html title=\"HTML\" highlight=\"1\"]  <div id=\"categorias\" class=\"contendor rojo\" data-orden=\"34\"> <\/div> [\/html] [js title=\"Javascript\"] var div = document.getElementById('categorias'); var orden = div.getAttribute('data-orden'); div.setAttribute('data-otro', 'algunValor'); [\/js]\n\n### jQuery .data()\n\n jQuery tiene un metodo, [jQuery.data()](http:\/\/api.jquery.com\/jQuery.data\/ \"jQuery.data()\"), para poder guardar y recuperar objetos de un elemento en particular del DOM. [js] $('#categorias').data('orden', 56); [\/js] Lo que hay q tener en cuenta cuando utilizo el .data() es que jquery se encarga de comprobar la version de nuestro documento y va a utilizar el \"data-\" o no. Ojo con esto, porque por ahi contamos con que tenemos un atributo y en realidad no: [js title=\"Javascript\"] var valores = [ 20 , 21 , 22 , 23 ]; $('#categorias').data('orden', valores); [\/js] [html title=\"HTML\" highlight=\"1\"]  <div id=\"categorias\" class=\"contendor rojo\"> <\/div> [\/html] [html title=\"HTML\" highlight=\"1, language=4\"]  <div id=\"categorias\" class=\"contendor rojo\" data-orden=\"[20,21,22,23]\"> <\/div> [\/html] Cuando la version de HTML no es 5, jQuery no lo almacena como atributo del HTML, hay que tener cuidado con esto, porque si agregamos el atributo en el HTML y despues queremos ir a buscarlo no utilizando HTML 5, tenemos que obtenerlo como .attr() en vez de .data() en jQuery. [html title=\"HTML\" highlight=\"1\"]  <div id=\"categorias\" class=\"contendor rojo\" orden=\"43\"> <\/div> [\/html] [js title=\"Javascript\"] var orden = $('#categorias').data('orden'); \/\/ undefined var orden = $('#categorias').attr('orden'); \/\/ 43 [\/js] \n","html":"Los que habr\u00e1n usado alguna vez los famosos \"custom attributes\" o atributos personalizados en el html, conocer\u00e1n que no era recomendado, nos complicaba las validaciones de HTML y tambi\u00e9n era potencialmente peligroso para futuras versiones de HTML:\r\n\r\n[html title=\"HTML\" highlight=\"1\"]\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-\/\/W3C\/\/DTD HTML 4.01\/\/EN&quot; &quot;http:\/\/www.w3.org\/TR\/html4\/strict.dtd&quot;&gt;\r\n\r\n&lt;div id=&quot;categorias&quot; class=&quot;contendor rojo&quot; \r\n   orden=&quot;34&quot;&gt;\r\n&lt;\/div&gt;\r\n[\/html]\r\n\r\n[js title=\"Javascript\"]\r\nvar div = document.getElementById('categorias');\r\nvar orden = div.getAttribute('orden');\r\ndiv.setAttribute('otro','algunValor');\r\n[\/js]\r\n\r\nHTML5 nos trae otra forma de verlo, todo attributo custom que utilicemos, hagamoslo con \"data-*\", es decir siempre con el \"data-\" y nuestro custom, de esta manera el validador de html no molesta, ni tampoco tendremos problemas con futuras versiones de HTML:\r\n\r\n[html title=\"HTML\" highlight=\"1\"]\r\n&lt;!DOCTYPE HTML&gt;\r\n\r\n&lt;div id=&quot;categorias&quot; class=&quot;contendor rojo&quot; data-orden=&quot;34&quot;&gt;\r\n&lt;\/div&gt;\r\n[\/html]\r\n\r\n[js title=\"Javascript\"]\r\nvar div = document.getElementById('categorias');\r\nvar orden = div.getAttribute('data-orden');\r\ndiv.setAttribute('data-otro', 'algunValor');\r\n[\/js]\r\n\r\n<h3>jQuery .data()<\/h3>\r\n\r\njQuery tiene un metodo, <a href=\"http:\/\/api.jquery.com\/jQuery.data\/\" title=\"jQuery.data()\" target=\"_blank\">jQuery.data()<\/a>, para poder guardar y recuperar objetos de un elemento en particular del DOM.\r\n\r\n[js]\r\n$('#categorias').data('orden', 56);\r\n[\/js]\r\n\r\nLo que hay q tener en cuenta cuando utilizo el .data() es que jquery se encarga de comprobar la version de nuestro documento y va a utilizar el \"data-\" o no. Ojo con esto, porque por ahi contamos con que tenemos un atributo y en realidad no:\r\n\r\n[js title=\"Javascript\"]\r\nvar valores = [ 20 , 21 , 22 , 23 ];\r\n$('#categorias').data('orden', valores);\r\n[\/js]\r\n\r\n[html title=\"HTML\" highlight=\"1\"]\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-\/\/W3C\/\/DTD HTML 4.01\/\/EN&quot; &quot;http:\/\/www.w3.org\/TR\/html4\/strict.dtd&quot;&gt;\r\n\r\n&lt;div id=&quot;categorias&quot; class=&quot;contendor rojo&quot;&gt;\r\n&lt;\/div&gt;\r\n[\/html]\r\n\r\n[html title=\"HTML\" highlight=\"1, language=4\"]\r\n&lt;!DOCTYPE HTML&gt;\r\n\r\n&lt;div id=&quot;categorias&quot; class=&quot;contendor rojo&quot; \r\n   data-orden=&quot;[20,21,22,23]&quot;&gt;\r\n&lt;\/div&gt;\r\n[\/html]\r\n\r\nCuando la version de HTML no es 5, jQuery no lo almacena como atributo del HTML, hay que tener cuidado con esto, porque si agregamos el atributo en el HTML y despues queremos ir a buscarlo no utilizando HTML 5, tenemos que obtenerlo como .attr() en vez de .data() en jQuery.\r\n\r\n[html title=\"HTML\" highlight=\"1\"]\r\n&lt;!DOCTYPE HTML PUBLIC &quot;-\/\/W3C\/\/DTD HTML 4.01\/\/EN&quot; &quot;http:\/\/www.w3.org\/TR\/html4\/strict.dtd&quot;&gt;\r\n\r\n&lt;div id=&quot;categorias&quot; class=&quot;contendor rojo&quot; orden=&quot;43&quot;&gt;\r\n&lt;\/div&gt;\r\n[\/html]\r\n\r\n[js title=\"Javascript\"]\r\nvar orden = $('#categorias').data('orden'); \/\/ undefined\r\nvar orden = $('#categorias').attr('orden'); \/\/ 43\r\n[\/js]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 09 Feb 2012 20:15:59 +0000","created_by":1,"updated_at":"Thu, 09 Feb 2012 20:16:51 +0000","updated_by":1,"published_at":"Thu, 09 Feb 2012 20:15:59 +0000","published_by":1},{"id":1382,"title":"M\u00f3dulos en NodeJS","slug":"modulos-en-nodejs","markdown":"\nNodeJS tiene un sistema de m\u00f3dulos bastante simple: cada archivo .js es un modulo (archivo de servidor, no confundir con contenido est\u00e1tico), veamos 2 m\u00f3dulos que se encuentran en el directorio root y son utilizados desde nuestro server app.js: [js title=\"estructura\"] app.js \/\/servidor NodeJS foo.js \/\/un m\u00f3dulo bar.js \/\/otro m\u00f3dulo [\/js] [js title=\"app.js\"] var http = require('http'); \/\/ m\u00f3dulo Core de Node var foo = require('.\/foo.js'); var bar = require('.\/bar'); [\/js] En nuestro app.js referenciamos a ambos m\u00f3dulos foo y bar, con *'.\/'* es el path relativo al que lo esta llamando, en este caso *app.js*.\n\n> Si utilizamos *'\/'* vamos a estar indicando el path absoluto al archivo y si no usamos *'\/'* ni *'.\/'* es un m\u00f3dulo Core o est\u00e1 en la carpeta node_modules.\n\n Se puede escribir o no la extension, ya que Node primero comprueba que exista el nombre exacto, despues prueba con extension *.js*, despu\u00e9s *.json* y luego *.node*. Por lo que de una va a encontrar el bar.js.  Los archivos *.js* son interpretados como archivos de texto javascript, los archivos *.json* son parseados como archivos de texto JSON y *.node* son interpretados como modulos addons compilados con *[dlopen](http:\/\/en.wikipedia.org\/wiki\/Dynamic_loading)* En cada m\u00f3dulo tenemos como objeto global el *module* y dentro de este, un objeto *exports* con el cual vamos a publicar los accesos a nuestro m\u00f3dulo desde otros. [js title=\"foo.js\"] \/\/podemos evitar el module, ya que es nuestro global exports.enviarMensaje = function(mensaje) { console.log('Mensaje recibido en m\u00f3dulo foo: ' + mensaje); }; [\/js] [js title=\"app.js\"] var foo = require('.\/foo.js'); foo.enviarMensaje('hola m\u00f3dulo foo!'); \/\/imprime: Mensaje recibido en m\u00f3dulo foo: hola m\u00f3dulo foo! [\/js] > La asignacion al *exports* tiene que ser inmediata, no podemos hacerla en callbacks, por ejemplo esto no funciona: [js title=\"foo.js\"] setTimeout(function() { module.exports.algo = true; }, 100) [\/js]\n\n Si declaramos una variable dentro de un m\u00f3dulo, esta va a ser privada al m\u00f3dulo, recuerden que si no la asignamos al objeto *exports* no va a ser accesible desde otro m\u00f3dulo: [js title=\"bar.js\"] var nombre = 'Pepe'; exports.getNombre = function (){ return nombre; }; [\/js] Si no ponemos el *var* que pasa?, bueno estamos asignando al objeto global, pero el global del m\u00f3dulo, por lo que es lo mismo que lo pongamos o no, de todas formas, siempre es mejor poner el *var* porque nos puede pasar lo siguiente: [js title=\"bar.js\" highlight=\"1\"] exports.algo = function (){ foo = 'Pepe'; var baz = 'Pepe2'; }; [\/js] En ese caso *foo* va a ser global para todo el m\u00f3dulo, y puede que no sea algo que esperamos: [js title=\"bar.js\"] var foo; exports.algo = function (){ foo = 'Pepe'; var baz = 'Pepe2'; }; [\/js] De esa forma queda claro que usamos la global *foo* en la funcion y creamos una *baz* a nivel de la funci\u00f3n. Pueden ver mas sobre el comportamiento del *var* en [Alcance de Variables (var scope)](http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/ \"Alcance de Variables (var scope)\") y [Variables Globales](http:\/\/fernetjs.com\/2011\/11\/variables-globales\/ \"Variables Globales\")\n","html":"NodeJS tiene un sistema de m\u00f3dulos bastante simple: cada archivo .js es un modulo (archivo de servidor, no confundir con contenido est\u00e1tico), veamos 2 m\u00f3dulos que se encuentran en el directorio root y son utilizados desde nuestro server app.js:\r\n\r\n[js title=\"estructura\"]\r\n   app.js \/\/servidor NodeJS\r\n   foo.js \/\/un m\u00f3dulo\r\n   bar.js \/\/otro m\u00f3dulo\r\n[\/js]\r\n\r\n[js title=\"app.js\"]\r\n    var http = require('http'); \/\/ m\u00f3dulo Core de Node\r\n    var foo = require('.\/foo.js');\r\n    var bar = require('.\/bar');\r\n[\/js]\r\n\r\nEn nuestro app.js referenciamos a ambos m\u00f3dulos foo y bar, con <em>'.\/'<\/em> es el path relativo al que lo esta llamando, en este caso <em>app.js<\/em>.\r\n\r\n<blockquote>\r\n    Si utilizamos <em>'\/'<\/em> vamos a estar indicando el path absoluto al archivo y si no usamos <em>'\/'<\/em> ni <em>'.\/'<\/em> es un m\u00f3dulo Core o est\u00e1 en la carpeta node_modules. \r\n<\/blockquote>\r\n\r\nSe puede escribir o no la extension, ya que Node primero comprueba que exista el nombre exacto, despues prueba con extension <em>.js<\/em>, despu\u00e9s <em>.json<\/em> y luego <em>.node<\/em>. Por lo que de una va a encontrar el bar.js.\r\n\r\n<!--more-->\r\n\r\nLos archivos <em>.js<\/em> son interpretados como archivos de texto javascript, los archivos <em>.json<\/em> son parseados como archivos de texto JSON y <em>.node<\/em> son interpretados como modulos addons compilados con <em><a href=\"http:\/\/en.wikipedia.org\/wiki\/Dynamic_loading\">dlopen<\/a><\/em>   \r\n\r\nEn cada m\u00f3dulo tenemos como objeto global el <em>module<\/em> y dentro de este, un objeto <em>exports<\/em> con el cual vamos a publicar los accesos a nuestro m\u00f3dulo desde otros.\r\n\r\n[js title=\"foo.js\"]\r\n\/\/podemos evitar el module, ya que es nuestro global\r\nexports.enviarMensaje = function(mensaje) {\r\n    console.log('Mensaje recibido en m\u00f3dulo foo: ' + mensaje);\r\n}; \r\n[\/js]\r\n\r\n[js title=\"app.js\"]\r\nvar foo = require('.\/foo.js');\r\nfoo.enviarMensaje('hola m\u00f3dulo foo!');\r\n\/\/imprime: Mensaje recibido en m\u00f3dulo foo: hola m\u00f3dulo foo!\r\n[\/js]\r\n\r\n<blockquote>\r\n    La asignacion al <em>exports<\/em> tiene que ser inmediata, no podemos hacerla en callbacks, por ejemplo esto no funciona:\r\n[js title=\"foo.js\"]\r\nsetTimeout(function() {\r\n   module.exports.algo = true;\r\n}, 100)\r\n[\/js]\r\n<\/blockquote>\r\n\r\nSi declaramos una variable dentro de un m\u00f3dulo, esta va a ser privada al m\u00f3dulo, recuerden que si no la asignamos al objeto <em>exports<\/em> no va a ser accesible desde otro m\u00f3dulo:\r\n\r\n[js title=\"bar.js\"]\r\nvar nombre = 'Pepe';\r\n\r\nexports.getNombre = function (){\r\n      return nombre;\r\n};\r\n[\/js]\r\n\r\nSi no ponemos el <em>var<\/em> que pasa?, bueno estamos asignando al objeto global, pero el global del m\u00f3dulo, por lo que es lo mismo que lo pongamos o no, de todas formas, siempre es mejor poner el <em>var<\/em> porque nos puede pasar lo siguiente:\r\n\r\n[js title=\"bar.js\" highlight=\"1\"]\r\n\r\nexports.algo = function (){\r\n   foo = 'Pepe';\r\n   var baz = 'Pepe2';\r\n};\r\n[\/js]\r\n\r\nEn ese caso <em>foo<\/em> va a ser global para todo el m\u00f3dulo, y puede que no sea algo que esperamos:\r\n\r\n[js title=\"bar.js\"]\r\nvar foo;\r\nexports.algo = function (){\r\n   foo = 'Pepe';\r\n   var baz = 'Pepe2';\r\n};\r\n[\/js]\r\n\r\nDe esa forma queda claro que usamos la global <em>foo<\/em> en la funcion y creamos una <em>baz<\/em> a nivel de la funci\u00f3n.\r\nPueden ver mas sobre el comportamiento del <em>var<\/em> en <a href=\"http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/\" title=\"Alcance de Variables (var scope)\">Alcance de Variables (var scope)<\/a> y <a href=\"http:\/\/fernetjs.com\/2011\/11\/variables-globales\/\" title=\"Variables Globales\">Variables Globales<\/a> \r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Sat, 11 Feb 2012 12:21:29 +0000","created_by":1,"updated_at":"Sat, 11 Feb 2012 12:21:29 +0000","updated_by":1,"published_at":"Sat, 11 Feb 2012 12:21:29 +0000","published_by":1},{"id":1454,"title":"Deferreds en jQuery (parte 2)","slug":"deferreds-en-jquery-parte-2","markdown":"\nLas deferreds en jquery fueron una pieza fundamental, que gracias a otorgar un mayor desacoplamiento en c\u00f3digo asinc\u0155onico, permitieron la reescritura del m\u00f3dulo de ajax para que sea testeable. Ya hablamos algo de eso en [la primera parte](http:\/\/fernetjs.com\/2012\/02\/entendiendo-deferreds-en-jquery\/ \"Entendiendo Deferreds en jQuery\"), y tambi\u00e9n vimos escenarios b\u00e1sicos, o casos de uso sencillos con ajax que no explotaban al cien por ciento lo que en verdad es una Deferred. Vamos a ver c\u00f3mo crear una Deferred: [js] function esperar(msegs){ return $.Deferred(function(dfd){ setTimeout(dfd.resolve, msegs); }); }; console.log('empezo'); esperar(4000).then(function() { console.log('ya espere demasiado'); }); console.log('Acaba de empezar'); [\/js]  En este caso, creamos una funci\u00f3n \"esperar\" que retorna un objeto creado con $.Deferred. $.Deferred acepta opcionalmente como par\u00e1metro una funci\u00f3n que se ejecuta dentro del constructor (as\u00ed es que se llama al setTimeout cada vez que creamos esa deferred). La deferred va a estar en un estado 'pendiente' cuando la creamos. Luego agregamos callbacks con las funciones then, done, etc. que van a ser encolados y ejecutados cuando a la deferred se le haga .resolve() o .reject(). Sabiendo esto, se puede llegar a entender el c\u00f3digo presentado arriba. Resumen:\n\n> >> Cuando llamamos a esperar, se crea y retorna una deferred. >> Durante la creaci\u00f3n de la deferred se ejecuta un setTimeout >> Gracias al setTimeout, al cabo de msegs se va a ejecutar el resolve de la deferred. >> La deferred va a pasar de estar en estado 'pendiente' a estar en estado 'resuelta' >> Se van a ejecutar los callbacks attacheados en el then o el done.\n\n Como resultado de ese c\u00f3digo, la salida por consola va a ser: >empezo >Acaba de empezar >ya espere demasiado Si no se entiende por qu\u00e9 la salida va a tener ese orden, recomiendo echarle un vistazo al post que habla de la [ejecuci\u00f3n as\u00edncronica con settimeout](http:\/\/fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/ \"Ejecuciones Asincr\u00f3nicas de funciones\"). El papel de las promesas\n------------------------\n\n Ahora, cambiemos algo del c\u00f3digo: [js] function esperar(msegs){ return $.Deferred(function(dfd){ setTimeout(dfd.resolve, msegs); }); }; console.log('empezo'); var espera = esperar(4000); espera.then(function() { console.log('ya espere demasiado'); }); espera.resolve(); console.log('Acaba de empezar');\u200b [\/js] La salida en consola 'ya espere demasiado' va a aparecer antes que 'acaba de empezar', ya que resolvimos la deferred por fuera, antes de que se ejecute el resolve del setTimeout. Algo que estar\u00eda bueno, ser\u00eda que el m\u00e9todo esperar me devuelva una Deferred, pero que no exponga los m\u00e9todos de .resolve() por ejemplo, ya que por fuera de la funci\u00f3n esperar, lo \u00fanico que queremos hacer es definir callbacks que se van a ejecutar, no cambiar el estado de la Deferred. Para eso usamos el m\u00e9todo .promise(), que va a devolver la misma deferred, pero sin los m\u00e9todos que cambian el estado de la misma. Es por eso que el siguiente c\u00f3digo nos va a tirar error: [js] function esperar(msegs){ return $.Deferred(function(dfd){ setTimeout(dfd.resolve, msegs); }).promise(); }; console.log('empezo'); var espera = esperar(4000); espera.then(function() { console.log('ya espere demasiado'); }); espera.resolve(); console.log('Acaba de empezar');\u200b [\/js] Dem\u00e1s acciones \/ m\u00e9todos\n------------------------\n\n Cuando tenemos a la deferred en un estado 'pendiente\/sin resolver', al momento de resolverla, tenemos varias opciones: deferred.resolve() o deferred.resolveWith() van a pasar la deferred a estado resuelto; por lo que se van a ejecutar los callbacks definidos con deferred.then() (como primer par\u00e1metro), deferred.done(). Adem\u00e1s si luego hacemos deferred.isResolved() nos va a devolver true. deferred.reject() o deferred.rejectWith() van a pasar la deferred a estado rechazado; por lo que se van a ejecutar los callbacks definidos con deferred.then() (como segundo par\u00e1metro) y deferred.fail(). Adem\u00e1s si luego consultamos por deferred.isRejected() va a devolver true. deferred.notify() o deferred.notifyWith() van a servir para emitir notificaciones de progreso por ejemplo. Cada vez que se haga un .notify(), se van ejecutar los callbacks definidos con deferred.then() (tercer parametro) o deferred.progress(). Luego que la deferred es resuelta o rechazada, no se van a seguir ejecutando callbacks de progreso. Este es un tema que no entra en la cabeza as\u00ed nom\u00e1s, as\u00ed que \u00e9ste post se puede parecer a las memorias de un disl\u00e9xico, o a un material de referencia sobre las deferreds. Esperemos que sea lo segundo!\n","html":"Las deferreds en jquery fueron una pieza fundamental, que gracias a otorgar un mayor desacoplamiento en c\u00f3digo asinc\u0155onico, permitieron la reescritura del m\u00f3dulo de ajax para que sea testeable. Ya hablamos algo de eso en <a href=\"http:\/\/fernetjs.com\/2012\/02\/entendiendo-deferreds-en-jquery\/\" title=\"Entendiendo Deferreds en jQuery\">la primera parte<\/a>, y tambi\u00e9n vimos escenarios b\u00e1sicos, o casos de uso sencillos con ajax que no explotaban al cien por ciento lo que en verdad es una Deferred.\r\n\r\nVamos a ver c\u00f3mo crear una Deferred:\r\n\r\n[js]\r\nfunction esperar(msegs){\r\n    return $.Deferred(function(dfd){\r\n        setTimeout(dfd.resolve, msegs);\r\n    });    \r\n};\r\nconsole.log('empezo');\r\nesperar(4000).then(function() { console.log('ya espere demasiado'); });\r\nconsole.log('Acaba de empezar');\r\n[\/js]\r\n\r\n<!--more-->\r\nEn este caso, creamos una funci\u00f3n \"esperar\" que retorna un objeto creado con $.Deferred.\r\n$.Deferred acepta opcionalmente como par\u00e1metro una funci\u00f3n que se ejecuta dentro del constructor (as\u00ed es que se llama al setTimeout cada vez que creamos esa deferred).\r\nLa deferred va a estar en un estado 'pendiente' cuando la creamos. Luego agregamos callbacks con las funciones then, done, etc. que van a ser encolados y ejecutados cuando a la deferred se le haga .resolve() o .reject().\r\nSabiendo esto, se puede llegar a entender el c\u00f3digo presentado arriba. Resumen:\r\n\r\n<blockquote>>> Cuando llamamos a esperar, se crea y retorna una deferred. \r\n>> Durante la creaci\u00f3n de la deferred se ejecuta un setTimeout\r\n>> Gracias al setTimeout, al cabo de msegs se va a ejecutar el resolve de la deferred.\r\n>> La deferred va a pasar de estar en estado 'pendiente' a estar en estado 'resuelta'\r\n>> Se van a ejecutar los callbacks attacheados en el then o el done.<\/blockquote>\r\n\r\nComo resultado de ese c\u00f3digo, la salida por consola va a ser:\r\n>empezo\r\n>Acaba de empezar\r\n>ya espere demasiado\r\n\r\nSi no se entiende por qu\u00e9 la salida va a tener ese orden, recomiendo echarle un vistazo al post que habla de la <a href=\"http:\/\/fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/\" title=\"Ejecuciones Asincr\u00f3nicas de funciones\">ejecuci\u00f3n as\u00edncronica con settimeout<\/a>.\r\n \r\n<h2>El papel de las promesas<\/h2>\r\n\r\nAhora, cambiemos algo del c\u00f3digo:\r\n[js]\r\nfunction esperar(msegs){\r\n    return $.Deferred(function(dfd){\r\n        setTimeout(dfd.resolve, msegs);\r\n    });\r\n};\r\nconsole.log('empezo');\r\nvar espera = esperar(4000);\r\nespera.then(function() { console.log('ya espere demasiado'); });\r\nespera.resolve();\r\nconsole.log('Acaba de empezar');\u200b\r\n[\/js]\r\nLa salida en consola 'ya espere demasiado' va a aparecer antes que 'acaba de empezar', ya que resolvimos la deferred por fuera, antes de que se ejecute el resolve del setTimeout.\r\n\r\nAlgo que estar\u00eda bueno, ser\u00eda que el m\u00e9todo esperar me devuelva una Deferred, pero que no exponga los m\u00e9todos de .resolve() por ejemplo, ya que por fuera de la funci\u00f3n esperar, lo \u00fanico que queremos hacer es definir callbacks que se van a ejecutar, no cambiar el estado de la Deferred.\r\nPara eso usamos el m\u00e9todo .promise(), que va a devolver la misma deferred, pero sin los m\u00e9todos que cambian el estado de la misma.\r\nEs por eso que el siguiente c\u00f3digo nos va a tirar error:\r\n[js]\r\nfunction esperar(msegs){\r\n    return $.Deferred(function(dfd){\r\n        setTimeout(dfd.resolve, msegs);\r\n    }).promise();\r\n};\r\nconsole.log('empezo');\r\nvar espera = esperar(4000);\r\nespera.then(function() { console.log('ya espere demasiado'); });\r\nespera.resolve();\r\nconsole.log('Acaba de empezar');\u200b\r\n[\/js]\r\n\r\n<h2>Dem\u00e1s acciones \/ m\u00e9todos<\/h2>\r\nCuando tenemos a la deferred en un estado 'pendiente\/sin resolver', al momento de resolverla, tenemos varias opciones:\r\n\r\ndeferred.resolve() o deferred.resolveWith() van a pasar la deferred a estado resuelto; por lo que se van a ejecutar los callbacks definidos con deferred.then() (como primer par\u00e1metro), deferred.done(). Adem\u00e1s si luego hacemos deferred.isResolved() nos va a devolver true.\r\n\r\ndeferred.reject() o deferred.rejectWith() van a pasar la deferred a estado rechazado; por lo que se van a ejecutar los callbacks definidos con deferred.then() (como segundo par\u00e1metro) y deferred.fail(). Adem\u00e1s si luego consultamos por deferred.isRejected() va a devolver true.\r\n\r\ndeferred.notify() o deferred.notifyWith() van a servir para emitir notificaciones de progreso por ejemplo. Cada vez que se haga un .notify(), se van ejecutar los callbacks definidos con deferred.then() (tercer parametro) o deferred.progress(). Luego que la deferred es resuelta o rechazada, no se van a seguir ejecutando callbacks de progreso.\r\n\r\nEste es un tema que no entra en la cabeza as\u00ed nom\u00e1s, as\u00ed que \u00e9ste post se puede parecer a las memorias de un disl\u00e9xico, o a un material de referencia sobre las deferreds. Esperemos que sea lo segundo!","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Sat, 18 Feb 2012 13:40:14 +0000","created_by":1,"updated_at":"Sat, 18 Feb 2012 13:40:14 +0000","updated_by":1,"published_at":"Sat, 18 Feb 2012 13:40:14 +0000","published_by":1},{"id":1467,"title":"RequireJS: M\u00f3dulos y Dependencias","slug":"requirejs-modulos-y-dependencias","markdown":"\nAs\u00ed como tenemos [M\u00f3dulos en NodeJS](http:\/\/fernetjs.com\/2012\/02\/modulos-en-nodejs\/ \"M\u00f3dulos en NodeJS\"), tambi\u00e9n los podemos tener en el cliente usando RequireJS. RequireJS es una librer\u00eda basada en la especificaci\u00f3n de CommonJS para M\u00f3dulos la cual nos trae una implementaci\u00f3n para cargar m\u00f3dulos del lado del cliente. Esto nos permite mantener nuestro c\u00f3digo limpio y en una suerte de \"carga en demanda\", ya que se pueden definir dependencias.\n\n> Tambi\u00e9n tiene optimizaciones para los scripts, por ej. unificaci\u00f3n y compresi\u00f3n para el deploy (por el momento solo para NodeJS y Java).\n\n Veamos un ejemplo simple de como utilizarla y que en que nos ayuda:  [c title=\"archivos\"] root\/ index.html scripts\/ main.js utils.js pepe.js [\/c] [html title=\"index.html\"]    <title>Sin RequireJS<\/title> <!-- agrego mi coqueto script main.js--> <script type=\"text\/javascript\" src=\"scripts\/main.js\"><\/script> <!-- main.js tiene una dependencia a utils.js, asi que lo agrego --> <script type=\"text\/javascript\" src=\"scripts\/utils.js\"><\/script> <!-- Pero utils.js tiene una dependencia a pepe.js, lo agrego --> <script type=\"text\/javascript\" src=\"scripts\/pepe.js\"><\/script> <!-- Espero no olvidarme de otro script porque explota en colores -->     [\/html] Lo anterior est\u00e1 un poquito inflado, pero es algo bastante com\u00fan. Por lo general tenemos un layout o master-page donde metemos la mayoria de scripts, pero asi y todo, tenemos que pensar en dependencias, que scripts antes de cual, etc... (en el caso anterior deber\u00eda cambiar el orden exactamente alreves :P) Con RequireJS ser\u00eda algo de este estilo: Agregamos a nuestro directorio require.js [c highlight=\"4\"] root\/ index.html scripts\/ require.js main.js utils.js pepe.js [\/c] [html title=\"index.html\" highlight=\"7\"]    <title>Con RequireJS<\/title> <!-- agrego la referencia a require.js y con data-main le digo que quiero que cargue cuando termine require.js --> <script data-main=\"scripts\/main\" src=\"scripts\/require.js\"><\/script>     [\/html] [js title=\"main.js\"] \/\/ le digo a requireJS que voy a necesitar util.js para trabjar en main require([\"util\"], function(util) { \/\/ este callback se dispara cuando util.js fue cargado, pero no \/\/ solo util.js, sino tambien cuando sus dependencias se cargaron. } [\/js] [js title=\"util.js\"] \/\/ defino util.js como m\u00f3dulo y que tiene una dependencia a pepe.js, \/\/ tambi\u00e9n puedo especificar mas de una dependencia, por ej jose.js. define([\"pepe\", \"jose\"], function(pepe, jose) { return { color: 'azul' }; } [\/js] [js title=\"pepe.js\"] \/\/ defino pepe.js como m\u00f3dulo define(function() { \/\/puedo ejecutar alguna configuracion inicial del m\u00f3dulo, \/\/ y retornar sus accesos con un simple objeto return { getAlgo: function(){ return \"algo\"; } }; } [\/js] Bastante mas ordenado, no?. Lo interesante es que no necesito preocuparme en el html de las dependendencias que tiene cada script, ni el orden, ni siquiera acordarme de agregar todos los utilizados. Simplemente referencio en cada script sus dependencias y RequireJS se encarga de lo restante. > Para **jQuery** varia m\u00ednimamente su uso, si est\u00e1n utilizando jQuery vean la implementaci\u00f3n [aca](http:\/\/requirejs.org\/docs\/jquery.html)\n\n### Links relacionados:\n\n- [CommonJS: Modules](http:\/\/www.commonjs.org\/specs\/modules\/1.0\/)\n- RequireJS - [Descargas](http:\/\/requirejs.org\/docs\/download.html)\n- [API Docs](http:\/\/requirejs.org\/docs\/api.html)\n- [Optimizer](http:\/\/requirejs.org\/docs\/optimization.html)\n\n\n","html":"As\u00ed como tenemos <a href=\"http:\/\/fernetjs.com\/2012\/02\/modulos-en-nodejs\/\" title=\"M\u00f3dulos en NodeJS\">M\u00f3dulos en NodeJS<\/a>, tambi\u00e9n los podemos tener en el cliente usando RequireJS. \r\nRequireJS es una librer\u00eda basada en la especificaci\u00f3n de CommonJS para M\u00f3dulos la cual nos trae una implementaci\u00f3n para cargar m\u00f3dulos del lado del cliente. Esto nos permite mantener nuestro c\u00f3digo limpio y en una suerte de \"carga en demanda\", ya que se pueden definir dependencias. \r\n\r\n<blockquote>\r\nTambi\u00e9n tiene optimizaciones para los scripts, por ej. unificaci\u00f3n y compresi\u00f3n para el deploy (por el momento solo para NodeJS y Java).\r\n<\/blockquote>\r\n\r\nVeamos un ejemplo simple de como utilizarla y que en que nos ayuda:\r\n\r\n<!--more-->\r\n\r\n[c title=\"archivos\"]\r\nroot\/\r\n  index.html\r\n  scripts\/\r\n    main.js\r\n    utils.js\r\n    pepe.js\r\n[\/c]\r\n\r\n[html title=\"index.html\"]\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;Sin RequireJS&lt;\/title&gt;\r\n    &lt;!-- agrego mi coqueto script main.js--&gt;\r\n    &lt;script type=&quot;text\/javascript&quot; src=&quot;scripts\/main.js&quot;&gt;&lt;\/script&gt;\r\n\r\n    &lt;!-- main.js tiene una dependencia a utils.js, asi que lo agrego --&gt;\r\n    &lt;script type=&quot;text\/javascript&quot; src=&quot;scripts\/utils.js&quot;&gt;&lt;\/script&gt;\r\n\r\n    &lt;!-- Pero utils.js tiene una dependencia a pepe.js, lo agrego --&gt;\r\n    &lt;script type=&quot;text\/javascript&quot; src=&quot;scripts\/pepe.js&quot;&gt;&lt;\/script&gt;\r\n\r\n    &lt;!-- Espero no olvidarme de otro script porque explota en colores --&gt;\r\n  &lt;\/head&gt;\r\n  &lt;body&gt;\r\n  &lt;\/body&gt;\r\n&lt;\/html&gt;\r\n[\/html]\r\n\r\nLo anterior est\u00e1 un poquito inflado, pero es algo bastante com\u00fan. Por lo general tenemos un layout o master-page donde metemos la mayoria de scripts, pero asi y todo, tenemos que pensar en dependencias, que scripts antes de cual, etc... (en el caso anterior deber\u00eda cambiar el orden exactamente alreves :P) \r\n\r\nCon RequireJS ser\u00eda algo de este estilo:\r\n\r\nAgregamos a nuestro directorio require.js\r\n\r\n[c highlight=\"4\"]\r\nroot\/\r\n  index.html\r\n  scripts\/\r\n    require.js\r\n    main.js\r\n    utils.js\r\n    pepe.js\r\n[\/c]\r\n\r\n[html title=\"index.html\" highlight=\"7\"]\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;Con RequireJS&lt;\/title&gt;\r\n    &lt;!-- agrego la referencia a require.js y con data-main \r\n     le digo que quiero que cargue cuando termine require.js --&gt;\r\n    &lt;script data-main=&quot;scripts\/main&quot; src=&quot;scripts\/require.js&quot;&gt;&lt;\/script&gt;\r\n  &lt;\/head&gt;\r\n  &lt;body&gt;\r\n  &lt;\/body&gt;\r\n&lt;\/html&gt;\r\n[\/html]\r\n\r\n[js title=\"main.js\"]\r\n\/\/ le digo a requireJS que voy a necesitar util.js para trabjar en main\r\nrequire([&quot;util&quot;], function(util) {\r\n  \/\/ este callback se dispara cuando util.js fue cargado, pero no \r\n  \/\/ solo util.js, sino tambien cuando sus dependencias se cargaron.\r\n}\r\n[\/js]\r\n\r\n[js title=\"util.js\"]\r\n\/\/ defino util.js como m\u00f3dulo y que tiene una dependencia a pepe.js,\r\n\/\/ tambi\u00e9n puedo especificar mas de una dependencia, por ej jose.js.\r\ndefine([&quot;pepe&quot;, &quot;jose&quot;], function(pepe, jose) {\r\n   return {\r\n     color: 'azul'\r\n   };\r\n}\r\n[\/js]\r\n\r\n[js title=\"pepe.js\"]\r\n\/\/ defino pepe.js como m\u00f3dulo\r\ndefine(function() {\r\n  \/\/puedo ejecutar alguna configuracion inicial del m\u00f3dulo,\r\n  \/\/ y retornar sus accesos con un simple objeto\r\n  return {\r\n    getAlgo: function(){\r\n      return &quot;algo&quot;;\r\n    }    \r\n  };   \r\n}\r\n[\/js]\r\n\r\nBastante mas ordenado, no?. Lo interesante es que no necesito preocuparme en el html de las dependendencias que tiene cada script, ni el orden, ni siquiera acordarme de agregar todos los utilizados. Simplemente referencio en cada script sus dependencias y RequireJS se encarga de lo restante.\r\n\r\n<blockquote>\r\nPara <b>jQuery<\/b> varia m\u00ednimamente su uso, si est\u00e1n utilizando jQuery vean la implementaci\u00f3n <a href=\"http:\/\/requirejs.org\/docs\/jquery.html\">aca<\/a>\r\n<\/blockquote>\r\n\r\n<h3>Links relacionados:<\/h3>\r\n<ul>\r\n<li><a href=\"http:\/\/www.commonjs.org\/specs\/modules\/1.0\/\">CommonJS: Modules<\/a><\/li>\r\n<li>RequireJS\r\n<ul>\r\n<li><a href=\"http:\/\/requirejs.org\/docs\/download.html\">Descargas<\/a><\/li>\r\n<li><a href=\"http:\/\/requirejs.org\/docs\/api.html\">API Docs<\/a><\/li>\r\n<li><a href=\"http:\/\/requirejs.org\/docs\/optimization.html\">Optimizer<\/a><\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Fri, 24 Feb 2012 12:11:38 +0000","created_by":1,"updated_at":"Fri, 02 Mar 2012 10:48:46 +0000","updated_by":1,"published_at":"Fri, 24 Feb 2012 12:11:38 +0000","published_by":1},{"id":1421,"title":"Estructura de un sitio web MVC en NodeJS","slug":"estructura-de-un-sitio-web-mvc-en-nodejs","markdown":"\nLas estructuras de sitios web MVC (Model View Controller) no varian mucho, ya que MVC es justamente un patr\u00f3n de dise\u00f1o que no especifica como ordenar nuestra vista y desacoplarla de nuestro modelo. Pueden leer mas de MVC [aca](http:\/\/es.wikipedia.org\/wiki\/Modelo_Vista_Controlador). Para el caso de NodeJS, hace tiempo que vengo armando y buscando en internet cual ser\u00eda la mejor forma de organizar la estructura de nuestro sitio web para tener algo escalable ... y en serio. Llegu\u00e9 a una conclusi\u00f3n (y escucho con toda atenci\u00f3n y felicidad propuestas de mejora): [c] \/app-root \/models \/controllers \/views \/public \/images \/styles \/scripts \/tests \/utils app.js package.json [\/c] Con algunas variaciones a lo que puede ser una apliaci\u00f3n en .NET, Java, PHP, o cualquier otra ... est\u00e1 es la estructura que, por el momento, me cierra mas. Repasando un poco la estructura inicial de nuestro sitio web MVC en NodeJS en nuestro *app.js* vamos a tener el servidor ... el famoso *require('http').createServer();*, o en su defecto, un web framework. Tambi\u00e9n tenemos en el root el package.json donde vamos a especificar la info de nuestro paquete (o app) con sus dependencias ([Package.json](http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/ \"La era del package.json\")). Despues es b\u00e1sicamente lo de siempre, la carpeta public con las imagenes, .css y .js (client-side); el modelo, los controladores y las vistas (html, o bien utilizando alg\u00fan ViewEngine como puede ser Ejs o Jade, entre otros). Y por \u00faltimo dejamos una carpetita utils para los modulos externos a nuestro web server, como puede ser socketIO. En el pr\u00f3ximo post vamos a ver como integrar en esta estructura un web framework, especificamente ExpressJS.\n\n\n","html":"Las estructuras de sitios web MVC (Model View Controller) no varian mucho, ya que MVC es justamente un patr\u00f3n de dise\u00f1o que no especifica como ordenar nuestra vista y desacoplarla de nuestro modelo. Pueden leer mas de MVC <a href=\"http:\/\/es.wikipedia.org\/wiki\/Modelo_Vista_Controlador\">aca<\/a>.\r\n\r\nPara el caso de NodeJS, hace tiempo que vengo armando y buscando en internet cual ser\u00eda la mejor forma de organizar la estructura de nuestro sitio web para tener algo escalable ... y en serio.\r\n\r\nLlegu\u00e9 a una conclusi\u00f3n (y escucho con toda atenci\u00f3n y felicidad propuestas de mejora):\r\n\r\n[c]\r\n\/app-root\r\n  \/models\r\n\r\n  \/controllers\r\n\r\n  \/views\r\n\r\n  \/public\r\n    \/images\r\n    \/styles\r\n    \/scripts\r\n\r\n  \/tests\r\n\r\n  \/utils\r\n\r\n  app.js\r\n  package.json\r\n[\/c]\r\n\r\nCon algunas variaciones a lo que puede ser una apliaci\u00f3n en .NET, Java, PHP, o cualquier otra ... est\u00e1 es la estructura que, por el momento, me cierra mas.\r\n\r\nRepasando un poco la estructura inicial de nuestro sitio web MVC en NodeJS en nuestro <em>app.js<\/em> vamos a tener el servidor ... el famoso <em>require('http').createServer();<\/em>, o en su defecto, un web framework.\r\n\r\nTambi\u00e9n tenemos en el root el package.json donde vamos a especificar la info de nuestro paquete (o app) con sus dependencias (<a href=\"http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/\" title=\"La era del package.json\">Package.json<\/a>). Despues es b\u00e1sicamente lo de siempre, la carpeta public con las imagenes, .css y .js (client-side); el modelo, los controladores y las vistas (html, o bien utilizando alg\u00fan ViewEngine como puede ser Ejs o Jade, entre otros). Y por \u00faltimo dejamos una carpetita utils para los modulos externos a nuestro web server, como puede ser socketIO.\r\n\r\nEn el pr\u00f3ximo post vamos a ver como integrar en esta estructura un web framework, especificamente ExpressJS.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Tue, 28 Feb 2012 20:31:12 +0000","created_by":1,"updated_at":"Tue, 28 Feb 2012 20:31:12 +0000","updated_by":1,"published_at":"Tue, 28 Feb 2012 20:31:12 +0000","published_by":1},{"id":1359,"title":"NodeJS","slug":"nodejs","markdown":"\n![NodeJS](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/02\/nodejs-600.png)<del datetime=\"2012-08-15T14:41:16+00:00\">Vamos a ir construyendo un sitio web en NodeJS pasando por los temas mas importantes para lograr una aplicaci\u00f3n escalable y mantenible.<\/del>**EDIT: ** Por un tema de tiempos que lleva realizar el website y la velocidad con que se actualiza NodeJS y sus paquetes (NPM) vamos a dejar para mas adelante el tema de crear un sitio web. Pero si voy a mantener los posts y sus temas, y en todo caso iremos actualizando el contenido de cada uno. La agenda de posts por el momento es la siguiente: 1. [Introducci\u00f3n](http:\/\/fernetjs.com\/2011\/11\/que-es-nodejs-breve-introduccion\/ \"Qu\u00e9 es NodeJS?, breve introducci\u00f3n\")\n2. [Instalando y Configurando](http:\/\/fernetjs.com\/2011\/12\/configurando-nodejs\/ \"Configurando NodeJS\")\n3. [Package.json](http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/ \"La era del package.json\")\n4. [M\u00f3dulos](http:\/\/fernetjs.com\/2012\/02\/modulos-en-nodejs\/ \"M\u00f3dulos en NodeJS\")\n5. [Estructura MVC](http:\/\/fernetjs.com\/2012\/02\/estructura-de-un-sitio-web-mvc-en-nodejs\/ \"Estructura de un sitio web MVC en NodeJS\")\n6. [ExpressJS](http:\/\/fernetjs.com\/2012\/03\/creando-un-server-con-expressjs\/ \"Creando un server con ExpressJS\")\n7. [Express View Engines](http:\/\/fernetjs.com\/2012\/05\/express-view-engines\/ \"Express View Engines\")\n8. Ruteo - RESTfull\n9. Login y Session\n10. Modelo\n11. BDD\n12. [MongoDB](http:\/\/fernetjs.com\/2012\/08\/buenos-amigos-nodejs-mongodb\/ \"Buenos amigos: NodeJS + MongoDB\"), [Mongoose](http:\/\/fernetjs.com\/2013\/02\/mongoose-nodejs-modelos-parte-1\/ \"Mongoose + Nodejs + Modelos! Parte 1\")\n13. Redis\n14. ORM: Persist\n15. [WebSockets y SocketIO](http:\/\/fernetjs.com\/2012\/11\/websockets-y-socketio\/ \"WebSockets y SocketIO\")\n16. [Deploy](http:\/\/fernetjs.com\/2012\/07\/nodejs-en-la-nube-con-nodejitsu-y-nodester\/ \"NodeJS en la nube con Nodejitsu y Nodester\")\n\n Dudas?, alg\u00fan tema en particular?, pidan y comenten abajo!\n","html":"<img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/02\/nodejs-600.png\" alt=\"NodeJS\" \/>\r\n\r\n<del datetime=\"2012-08-15T14:41:16+00:00\">Vamos a ir construyendo un sitio web en NodeJS pasando por los temas mas importantes para lograr una aplicaci\u00f3n escalable y mantenible.<\/del>\r\n<strong>EDIT: <\/strong> Por un tema de tiempos que lleva realizar el website y la velocidad con que se actualiza NodeJS y sus paquetes (NPM) vamos a dejar para mas adelante el tema de crear un sitio web. Pero si voy a mantener los posts y sus temas, y en todo caso iremos actualizando el contenido de cada uno.\r\n\r\nLa agenda de posts por el momento es la siguiente:\r\n\r\n<ol>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/11\/que-es-nodejs-breve-introduccion\/\" title=\"Qu\u00e9 es NodeJS?, breve introducci\u00f3n\">Introducci\u00f3n<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/12\/configurando-nodejs\/\" title=\"Configurando NodeJS\">Instalando y Configurando<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/\" title=\"La era del package.json\">Package.json<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/02\/modulos-en-nodejs\/\" title=\"M\u00f3dulos en NodeJS\">M\u00f3dulos<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/02\/estructura-de-un-sitio-web-mvc-en-nodejs\/\" title=\"Estructura de un sitio web MVC en NodeJS\">Estructura MVC<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/03\/creando-un-server-con-expressjs\/\" title=\"Creando un server con ExpressJS\">ExpressJS<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/05\/express-view-engines\/\" title=\"Express View Engines\">Express View Engines<\/a><\/li>\r\n<li>Ruteo - RESTfull<\/li>\r\n<li>Login y Session<\/li>\r\n<li>Modelo<\/li>\r\n<li>BDD<\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/08\/buenos-amigos-nodejs-mongodb\/\" title=\"Buenos amigos: NodeJS + MongoDB\">MongoDB<\/a>, <a href=\"http:\/\/fernetjs.com\/2013\/02\/mongoose-nodejs-modelos-parte-1\/\" title=\"Mongoose + Nodejs + Modelos! Parte 1\">Mongoose<\/a><\/li>\r\n<li>Redis<\/li>\r\n<li>ORM: Persist<\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/11\/websockets-y-socketio\/\" title=\"WebSockets y SocketIO\">WebSockets y SocketIO<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/07\/nodejs-en-la-nube-con-nodejitsu-y-nodester\/\" title=\"NodeJS en la nube con Nodejitsu y Nodester\">Deploy<\/a><\/li>\r\n<\/ol>\r\n\r\nDudas?, alg\u00fan tema en particular?, pidan y comenten abajo!","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Tue, 28 Feb 2012 20:34:59 +0000","created_by":1,"updated_at":"Mon, 18 Feb 2013 09:32:44 +0000","updated_by":1,"published_at":"Tue, 28 Feb 2012 20:34:59 +0000","published_by":1},{"id":1535,"title":"Testeando con mocha y expect.js","slug":"testeando-con-mocha-y-expect-js","markdown":"\nEste post no es para nada acad\u00e9mico, ni busca explicar lo que es el [unit testing](http:\/\/es.wikipedia.org\/wiki\/Prueba_unitaria \"Pruebas unitarias\"), el [TDD](http:\/\/es.wikipedia.org\/wiki\/Tdd \"Desarrollo guiado por pruebas\") ni [BDD](http:\/\/jmhogua.blogspot.com\/2008\/09\/desarrollo-basado-en-el-comportamiento.html \"Desarrollo Basado en el Comportamiento\"); m\u00e1s que nada quer\u00eda compartir mi experiencia usando estas bibliotecas por primera vez. A la hora de probar en el client side\/browser, ya hab\u00eda tenido un paso muy fugaz usando QUnit, pero despu\u00e9s de escuchar hablar mucho de mocha, le dimos una oportunidad. Junto con mocha, usamos expect.js para tener las assertions al mejor estilo BDD. Como resultado, los tests fueron mucho m\u00e1s expresivos y descriptivos. El paso a paso para arrancar a usarlo: 1 - Escribir un archivo html que va a ser el encargado de correr los tests. \u00c9ste va a referenciar a los estilos y javascript de mocha, el javascript que contenga nuestro c\u00f3digo, y el javascript que contenga las pruebas. Tambi\u00e9n vamos a estar referenciando a expect.js (aunque no es requerido para usar mocha). Tal cual se describe en la [documentaci\u00f3n](http:\/\/visionmedia.github.com\/mocha\/ \"mocha\").  [html]   <meta charset=\"utf-8\"> <title>Mocha Tests<\/title> <link rel=\"stylesheet\" href=\"https:\/\/raw.github.com\/visionmedia\/mocha\/master\/mocha.css\" \/> <script src=\"http:\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.7.1\/jquery.min.js\"><\/script> <script src=\"https:\/\/raw.github.com\/LearnBoost\/expect.js\/d2440da086bf8dc38c6085641f23b968a0f48b29\/expect.js\"><\/script> <script src=\"https:\/\/raw.github.com\/visionmedia\/mocha\/master\/mocha.js\"><\/script> <script>mocha.setup('bdd') \/\/ac\u00e1 definimos el estilo de los tests, otra opci\u00f3n v\u00e1lida es tdd<\/script> <script src=\"miImplementacion.js\"><\/script> <script src=\"misTests.js\"><\/script> <script> $(function () { mocha .run() .globals(['foo', 'bar']) \/\/ variables globales \"aceptables\" }) <\/script>   <div id=\"mocha\"><\/div>   [\/html] 2 - Crear y editar los archivos que contienen los casos de prueba. En este caso, el archivo ser\u00eda misTests.js 3 - Para ejecutar los tests y visualizar los resultados, abrir el archivo html del paso 1. Para ilustrar un poco m\u00e1s c\u00f3mo se pueden ver las pruebas, imaginemos que estamos desarrollando un juego y tenemos una clase Personaje que tiene un m\u00e9todo para agregar un \u00edtem a su inventario ( yo s\u00e9 que les gusta el spanglish en el c\u00f3digo ). [js] describe('Personaje', function(){ describe('#pickUp()', function(){ it('should have the ability to store the object in its items collection', function(){ var something = new Item(), aDude = new Personaje('N\/N'); expect(aDude.items).to.be.empty(); aDude.pickUp(something); expect(aDude.items).not.to.be.empty(); expect(aDude.itmes).to.contain(something); }); it('should not be able to pickUp the same thing twice', function(){ var something = new Item(), aDude = new Personaje('N\/N'); expect(aDude.items).to.be.empty(); aDude.pickUp(something); aDude.pickUp(something); expect(aDude.items.length).to.have.length(1); }); \/\/ Podemos dejar tests sin implementar que van a reflejar requerimientos \/\/ o TODOs it('should throw an Error if the parameter is not an Item instance'); }); });\u200b [\/js] Para ver la lista de assertions que tenemos disponible en expect-js, consultar la [documentaci\u00f3n](https:\/\/github.com\/LearnBoost\/expect.js\/blob\/master\/README.md \"expectjs - readme\"). Las llamadas a describe e it que vemos en el c\u00f3digo existen gracias a al setup('bdd') que mencionamos antes en el html. De la forma en que estructuro los tests en mi caso es de la siguiente: [js] describe('Clase o M\u00f3dulo', function(){ describe('#m\u00e9todo()', function(){ it('un aspecto que debe cumplir m\u00e9todo', function(){ \/\/ testearlo }); it('otro requerimiento para el metodo'); }); describe('#otro m\u00e9todo()', function(){ it('deber\u00eda hacer algo interesante...'); }); });\u200b [\/js] Una vez que est\u00e9n los tests escritos, abriendo el html ser\u00edamos capaces de ver los tests que pasaron, los que fallaron, y los que est\u00e1n pendientes. En fin, lo que me es m\u00e1s novedoso ac\u00e1 es la forma de hacer las assertions + la forma bdd de diagramar los tests, gracias a lo que muchas veces, leer una prueba de \u00e9stas puede llegar a ser como leer un texto en ingl\u00e9s o espa\u00f1ol. Comenten! Links: [expect.js](https:\/\/github.com\/LearnBoost\/expect.js \"expect.js\") [mocha](http:\/\/visionmedia.github.com\/mocha\/ \"mocha\")\n\n\n","html":"Este post no es para nada acad\u00e9mico, ni busca explicar lo que es el <a href=\"http:\/\/es.wikipedia.org\/wiki\/Prueba_unitaria\" title=\"Pruebas unitarias\" target=\"_blank\">unit testing<\/a>, el <a href=\"http:\/\/es.wikipedia.org\/wiki\/Tdd\" title=\"Desarrollo guiado por pruebas\" target=\"_blank\">TDD<\/a> ni <a href=\"http:\/\/jmhogua.blogspot.com\/2008\/09\/desarrollo-basado-en-el-comportamiento.html\" title=\"Desarrollo Basado en el Comportamiento\" target=\"_blank\">BDD<\/a>; m\u00e1s que nada quer\u00eda compartir mi experiencia usando estas bibliotecas por primera vez.\r\n\r\nA la hora de probar en el client side\/browser, ya hab\u00eda tenido un paso muy fugaz usando QUnit, pero despu\u00e9s de escuchar hablar mucho de mocha, le dimos una oportunidad.\r\nJunto con mocha, usamos expect.js para tener las assertions al mejor estilo BDD. Como resultado, los tests fueron mucho m\u00e1s expresivos y descriptivos.\r\n\r\nEl paso a paso para arrancar a usarlo: \r\n\r\n1 - Escribir un archivo html que va a ser el encargado de correr los tests. \u00c9ste va a referenciar a los estilos y javascript de mocha, el javascript que contenga nuestro c\u00f3digo, y el javascript que contenga las pruebas. Tambi\u00e9n vamos a estar referenciando a expect.js (aunque no es requerido para usar mocha). Tal cual se describe en la <a href=\"http:\/\/visionmedia.github.com\/mocha\/\" title=\"mocha\">documentaci\u00f3n<\/a>.\r\n<!--more-->\r\n[html]\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=&quot;utf-8&quot;&gt;\r\n  &lt;title&gt;Mocha Tests&lt;\/title&gt;\r\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;https:\/\/raw.github.com\/visionmedia\/mocha\/master\/mocha.css&quot; \/&gt;\r\n  &lt;script src=&quot;http:\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.7.1\/jquery.min.js&quot;&gt;&lt;\/script&gt;\r\n  &lt;script src=&quot;https:\/\/raw.github.com\/LearnBoost\/expect.js\/d2440da086bf8dc38c6085641f23b968a0f48b29\/expect.js&quot;&gt;&lt;\/script&gt;\r\n  &lt;script src=&quot;https:\/\/raw.github.com\/visionmedia\/mocha\/master\/mocha.js&quot;&gt;&lt;\/script&gt;\r\n  &lt;script&gt;mocha.setup('bdd') \/\/ac\u00e1 definimos el estilo de los tests, otra opci\u00f3n v\u00e1lida es tdd&lt;\/script&gt;\r\n  &lt;script src=&quot;miImplementacion.js&quot;&gt;&lt;\/script&gt;\r\n  &lt;script src=&quot;misTests.js&quot;&gt;&lt;\/script&gt;\r\n  &lt;script&gt;\r\n    $(function () {\r\n      mocha\r\n        .run()\r\n        .globals(['foo', 'bar']) \/\/ variables globales &quot;aceptables&quot;\r\n    })\r\n  &lt;\/script&gt;\r\n&lt;\/head&gt;\r\n&lt;body&gt;\r\n  &lt;div id=&quot;mocha&quot;&gt;&lt;\/div&gt;\r\n&lt;\/body&gt;\r\n&lt;\/html&gt;\r\n[\/html]  \r\n\r\n2 - Crear y editar los archivos que contienen los casos de prueba. En este caso, el archivo ser\u00eda misTests.js\r\n\r\n3 - Para ejecutar los tests y visualizar los resultados, abrir el archivo html del paso 1.\r\n\r\nPara ilustrar un poco m\u00e1s c\u00f3mo se pueden ver las pruebas, imaginemos que estamos desarrollando un juego y tenemos una clase Personaje que tiene un m\u00e9todo para agregar un \u00edtem a su inventario ( yo s\u00e9 que les gusta el spanglish en el c\u00f3digo ). \r\n\r\n[js]\r\ndescribe('Personaje', function(){\r\n    describe('#pickUp()', function(){\r\n        it('should have the ability to store the object in its items collection', function(){\r\n            var something = new Item(),\r\n                aDude = new Personaje('N\/N');\r\n            expect(aDude.items).to.be.empty();\r\n            aDude.pickUp(something);\r\n            expect(aDude.items).not.to.be.empty();\r\n            expect(aDude.itmes).to.contain(something);\r\n        });\r\n        it('should not be able to pickUp the same thing twice', function(){\r\n            var something = new Item(),\r\n                aDude = new Personaje('N\/N');\r\n            expect(aDude.items).to.be.empty();\r\n            aDude.pickUp(something);\r\n            aDude.pickUp(something);\r\n            expect(aDude.items.length).to.have.length(1);\r\n        });\r\n        \/\/ Podemos dejar tests sin implementar que van a reflejar requerimientos\r\n        \/\/ o TODOs\r\n        it('should throw an Error if the parameter is not an Item instance');\r\n\r\n    });        \r\n});\u200b\r\n[\/js]\r\n\r\nPara ver la lista de assertions que tenemos disponible en expect-js, consultar la <a href=\"https:\/\/github.com\/LearnBoost\/expect.js\/blob\/master\/README.md\" title=\"expectjs - readme\" target=\"_blank\">documentaci\u00f3n<\/a>. Las llamadas a describe e it que vemos en el c\u00f3digo existen gracias a al setup('bdd') que mencionamos antes en el html. \r\nDe la forma en que estructuro los tests en mi caso es de la siguiente:\r\n\r\n[js]\r\ndescribe('Clase o M\u00f3dulo', function(){\r\n    describe('#m\u00e9todo()', function(){\r\n        it('un aspecto que debe cumplir m\u00e9todo', function(){\r\n            \/\/ testearlo\r\n        });\r\n        it('otro requerimiento para el metodo');\r\n    });\r\n    describe('#otro m\u00e9todo()', function(){\r\n        it('deber\u00eda hacer algo interesante...');\r\n    });        \r\n});\u200b\r\n[\/js]\r\n\r\n\r\nUna vez que est\u00e9n los tests escritos, abriendo el html ser\u00edamos capaces de ver los tests que pasaron, los que fallaron, y los que est\u00e1n pendientes.\r\n\r\nEn fin, lo que me es m\u00e1s novedoso ac\u00e1 es la forma de hacer las assertions + la forma bdd de diagramar los tests, gracias a lo que muchas veces, leer una prueba de \u00e9stas puede llegar a ser como leer un texto en ingl\u00e9s o espa\u00f1ol.\r\n\r\nComenten!\r\n\r\nLinks:\r\n<a href=\"https:\/\/github.com\/LearnBoost\/expect.js\" title=\"expect.js\" target=\"_blank\">expect.js<\/a> \r\n<a href=\"http:\/\/visionmedia.github.com\/mocha\/\" title=\"mocha\" target=\"_blank\">mocha<\/a> \r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Sun, 04 Mar 2012 15:17:46 +0000","created_by":1,"updated_at":"Sun, 04 Mar 2012 15:17:46 +0000","updated_by":1,"published_at":"Sun, 04 Mar 2012 15:17:46 +0000","published_by":1},{"id":1552,"title":"Creando un server con ExpressJS  ","slug":"creando-un-server-con-expressjs","markdown":"\n[ExpressJS](http:\/\/expressjs.com\/ \"ExpressJS \") es un web framework que envuelve a ConnectJS. Con ExpressJS podemos crear un server, manejar las requests, responses y mucho mas, pero antes de meternos veamos un momento la estructura del sitio ([post relacionado](http:\/\/fernetjs.com\/2012\/02\/estructura-de-un-sitio-web-mvc-en-nodejs\/ \"Estructura de un sitio web MVC en NodeJS\")): [c highlight=\"11,12\"] \/app-root \/models \/controllers \/views \/public \/images \/styles \/scripts \/tests \/utils app.js package.json [\/c] En app.js vamos a crear nuestro servidor, pero ExpressJS es un NPM, asi que primero lo instalamos  [c] npm install express [\/c] O ... mejor todavia, empecemos organizadamente a armar nuestro [package.json](http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/ \"La era del package.json\"): [js title=\"package.json\" highlight=\"5\"] { \"name\": \"SitioWebConNodeJS\", \"version\": \"0.0.1\", \"dependencies\": { \"express\": \">=2.5.8\" } } [\/js] Ahora simplemente podemos hacer: [c] npm install [\/c] Solito se va a encargar de bajar las dependencias de nuestro proyecto leyendo el package.json. Es importante mantener nuestro package.json actualizado, ya que sirve como \"mapa\" de nuestras dependencias para NPM, Hosting, nosotros mismos, etc ... Bueno, ahora que tenemos instalado el NPM de ExpressJS podemos armar nuestro app.js: [js title=\"app.js\"] \/\/creamos una variable para el m\u00f3dulo var express = require('express'); \/\/creamos el server var app = express.createServer(); \/\/nuestra ruta principal del sitio app.get('\/', function (req, res){ res.send('Al\u00f3 al\u00f3 Mundo!'); }); \/\/ponemos el server en escucha en un puerto app.listen(1666); console.log('Server Express iniciado en %d', app.address().port); [\/js] Bastante simple, ahora iniciamos el server [c] node app.js [\/c] Abrimos el browser en **http:\/\/localhost:1666** y se va a disparar el \u00fanico *get* que tenemos. [js] app.get('\/', function (req, res){ res.send('Al\u00f3 al\u00f3 Mundo!'); }); [\/js] Se parece bastante a lo que haciamos con el [m\u00f3dulo Core *http* de NodeJS](http:\/\/fernetjs.com\/2011\/11\/que-es-nodejs-breve-introduccion\/ \"Qu\u00e9 es NodeJS?, breve introducci\u00f3n\"): declaramos una funcion callback que recibe la request y el response y despues simplemente enviamos un texto al response. Asi como tenemos el *get*, podemos declarar cualquiera de los verbos de HTTP, por ejemplo: [js] app.get('\/proyectos\/:id', function (req, res){ res.send('Este es el proyecto ' + req.params.id); }); app.put('\/proyectos\/:id', function (req, res){ res.send('Actualizando proyecto ' + req.params.id); }); app.post('\/proyectos\/nuevo', function (req, res){ res.send('Creando proyecto'); }); [\/js] Por \u00faltimo tenemos la configuracion de ambientes. En ExpressJS configuramos los ambientes con el metodo .configure() [js] \/\/si no especificamos un ambiente, se aplica para todos app.configure(function(){ \/\/configuraci\u00f3n com\u00fan para todos }); app.configure('develpment', function(){ \/\/configuracion para desarrollo }); \/\/podemos especificar mas de un ambiente para la configuraci\u00f3n app.configure('stage', 'production', function(){ \/\/configuracion para stage y producci\u00f3n }); [\/js] Ejecutamos la app para el entorno Productivo: [c] EXPRESS_ENV=production node app.js [\/c] > Es importante usar el ambiente *production* cuando est\u00e1 productivo nuestro sitio, porque algunos mecanismos de cache se funcionan s\u00f3lo en ese estado.\n\n\n","html":"<a href=\"http:\/\/expressjs.com\/\" title=\"ExpressJS \">ExpressJS<\/a> es un web framework que envuelve a ConnectJS. Con ExpressJS podemos crear un server, manejar las requests, responses y mucho mas, pero antes de meternos veamos un momento la estructura del sitio (<a href=\"http:\/\/fernetjs.com\/2012\/02\/estructura-de-un-sitio-web-mvc-en-nodejs\/\" title=\"Estructura de un sitio web MVC en NodeJS\">post relacionado<\/a>):\r\n\r\n[c highlight=\"11,12\"]\r\n\/app-root\r\n  \/models\r\n  \/controllers\r\n  \/views\r\n  \/public\r\n    \/images\r\n    \/styles\r\n    \/scripts\r\n  \/tests\r\n  \/utils\r\n  app.js\r\n  package.json\r\n[\/c]\r\n\r\nEn app.js vamos a crear nuestro servidor, pero ExpressJS es un NPM, asi que primero lo instalamos\r\n<!--more-->\r\n[c]\r\n  npm install express\r\n[\/c]\r\n\r\nO ... mejor todavia, empecemos organizadamente a armar nuestro <a href=\"http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/\" title=\"La era del package.json\">package.json<\/a>:\r\n\r\n[js title=\"package.json\" highlight=\"5\"]\r\n{\r\n  &quot;name&quot;: &quot;SitioWebConNodeJS&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: {\r\n    &quot;express&quot;: &quot;&gt;=2.5.8&quot;\r\n  }\r\n}\r\n[\/js]\r\n\r\nAhora simplemente podemos hacer: \r\n[c]\r\n  npm install\r\n[\/c]\r\nSolito se va a encargar de bajar las dependencias de nuestro proyecto leyendo el package.json. Es importante mantener nuestro package.json actualizado, ya que sirve como \"mapa\" de nuestras dependencias para NPM, Hosting, nosotros mismos, etc ... \r\n\r\nBueno, ahora que tenemos instalado el NPM de ExpressJS podemos armar nuestro app.js:\r\n\r\n[js title=\"app.js\"]\r\n  \/\/creamos una variable para el m\u00f3dulo\r\n  var express = require('express');\r\n\r\n  \/\/creamos el server\r\n  var app = express.createServer();\r\n  \r\n  \/\/nuestra ruta principal del sitio\r\n  app.get('\/', function (req, res){\r\n    res.send('Al\u00f3 al\u00f3 Mundo!');\r\n  });\r\n\r\n  \/\/ponemos el server en escucha en un puerto\r\n  app.listen(1666);\r\n  console.log('Server Express iniciado en %d', app.address().port);\r\n[\/js]\r\n\r\nBastante simple, ahora iniciamos el server\r\n[c]\r\n  node app.js\r\n[\/c]\r\n\r\nAbrimos el browser en <strong>http:\/\/localhost:1666<\/strong> y se va a disparar el \u00fanico <em>get<\/em> que tenemos. \r\n\r\n[js]\r\n  app.get('\/', function (req, res){\r\n    res.send('Al\u00f3 al\u00f3 Mundo!');\r\n  });\r\n[\/js]\r\n\r\nSe parece bastante a lo que haciamos con el <a href=\"http:\/\/fernetjs.com\/2011\/11\/que-es-nodejs-breve-introduccion\/\" title=\"Qu\u00e9 es NodeJS?, breve introducci\u00f3n\">m\u00f3dulo Core <em>http<\/em> de NodeJS<\/a>: declaramos una funcion callback que recibe la request y el response y despues simplemente enviamos un texto al response.\r\n\r\nAsi como tenemos el <em>get<\/em>, podemos declarar cualquiera de los verbos de HTTP, por ejemplo:\r\n\r\n[js]\r\n  app.get('\/proyectos\/:id', function (req, res){\r\n     res.send('Este es el proyecto ' + req.params.id);\r\n  });\r\n\r\n  app.put('\/proyectos\/:id', function (req, res){\r\n     res.send('Actualizando proyecto ' + req.params.id);\r\n  });\r\n\r\n  app.post('\/proyectos\/nuevo', function (req, res){\r\n     res.send('Creando proyecto');\r\n  });\r\n[\/js]\r\n\r\nPor \u00faltimo tenemos la configuracion de ambientes. En ExpressJS configuramos los ambientes con el metodo .configure()\r\n\r\n[js]\r\n  \/\/si no especificamos un ambiente, se aplica para todos \r\n  app.configure(function(){\r\n    \/\/configuraci\u00f3n com\u00fan para todos\r\n  });\r\n\r\n  app.configure('develpment', function(){\r\n    \/\/configuracion para desarrollo\r\n  });\r\n\r\n  \/\/podemos especificar mas de un ambiente para la configuraci\u00f3n\r\n  app.configure('stage', 'production', function(){\r\n    \/\/configuracion para stage y producci\u00f3n\r\n  });\r\n[\/js]\r\n\r\nEjecutamos la app para el entorno Productivo:\r\n[c]\r\n  EXPRESS_ENV=production node app.js\r\n[\/c]\r\n\r\n<blockquote>\r\nEs importante usar el ambiente <em>production<\/em> cuando est\u00e1 productivo nuestro sitio, porque algunos mecanismos de cache se funcionan s\u00f3lo en ese estado.\r\n<\/blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 15 Mar 2012 22:27:07 +0000","created_by":1,"updated_at":"Mon, 08 Oct 2012 15:07:23 +0000","updated_by":1,"published_at":"Thu, 15 Mar 2012 22:27:07 +0000","published_by":1},{"id":1594,"title":"Scripts desde CDN con reserva local","slug":"scripts-desde-cdn-con-reserva-local","markdown":"\nCDN qu\u00e9?, para los que no escucharon del tema:\n\n### CDN (Content Delivery Network o Content Distribution Network) \n\n Como se lee, es una *red de distribuci\u00f3n de contenido*, un gran sistema distribuido de servidores desplegados en m\u00faltiples centros de datos en Internet. El objetivo de un CDN es el de servir contenido a los usuarios finales con una alta disponibilidad y alto rendimiento. **Alta disponibilidad?** tenemos el CDN de Google (entre otros) ... digamos que su uptime es bastante bueno :P. **Alto rendimiento?** fuera del *poder* que puede tener un *Google*, nos van a servir los contenidos utilizando el mas cercano a nuestra conexi\u00f3n, por ejemplo, si referenciamos a jquery y tenemos un cliente que se conecta desde Argentina, le va a servir el archivo desde el servidor mas cercano a su ubicaci\u00f3n (aunque nuestro hosting sea en el Congo) Tenemos otras ventajas en su uso tambi\u00e9n, como el cache del browser, es decir, los archivos se llaman de una forma fija, links permanentes, por lo que si el cliente entr\u00f3 a un sitio X con una referencia al mismo CDN, para nuestra sitio ya tiene el archivo *cacheado*.  Supongamos que tenemos nuestra referencia: [html] <script src=\"js\/jquery.min-1-7-1.js\"><\/script> [\/html] Es poco probable que el cliente ya lo tenga en cache con ese nombre. ### Referenciando a un CDN\n\n [html] <script src=\"\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.7.1\/jquery.min.js\"><\/script> [\/html] Se v\u00e9 mucho mejor, no? ### Por qu\u00e9 una reserva local?\n\n Podr\u00edamos pensarlo para un entorno de desarrollo o una intranet, si el cliente (o nosotros desarrollando) no tenemos internet, el sitio funcionar\u00eda sin problemas. Y qu\u00e9 pasa si el CDN, por ejemplo de Google, est\u00e1 ca\u00eddo?, aparte de que se seguramente el mundo se detendr\u00eda, nuestro sitio no funcionar\u00eda, as\u00ed que agreguemos la reserva local *por si las dudas*: [html] <script src=\"\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.7.1\/jquery.min.js\"><\/script> <script>window.jQuery || document.write('<script src=\"js\/libs\/jquery-1.7.1.min.js\"><\\\/script>')<\/script> [\/html] As\u00ed de simple, referenciamos al CDN de google para la version 1.7.1 de jquery y ponemos otro script comprobando que si *window.jQuery* es *undefined* insertamos nuestro script local. Links relacionados: - [Google Javascript CDN](http:\/\/code.google.com\/intl\/es-ES\/apis\/libraries\/)\n- [What is CDN](http:\/\/www.whatiscdn.org)\n- [CDN wikipedia](http:\/\/en.wikipedia.org\/wiki\/Content_delivery_network)\n\n\n","html":"CDN qu\u00e9?, para los que no escucharon del tema: \r\n\r\n<h3>CDN (Content Delivery Network o Content Distribution Network) <\/h3>\r\nComo se lee, es una <em>red de distribuci\u00f3n de contenido<\/em>, un gran sistema distribuido de servidores desplegados en m\u00faltiples centros de datos en Internet. El objetivo de un CDN es el de servir contenido a los usuarios finales con una alta disponibilidad y alto rendimiento. \r\n\r\n<strong>Alta disponibilidad?<\/strong> tenemos el CDN de Google (entre otros) ... digamos que su uptime es bastante bueno :P.\r\n\r\n<strong>Alto rendimiento?<\/strong> fuera del <em>poder<\/em> que puede tener un <em>Google<\/em>, nos van a servir los contenidos utilizando el mas cercano a nuestra conexi\u00f3n, por ejemplo, si referenciamos a jquery y tenemos un cliente que se conecta desde Argentina, le va a servir el archivo desde el servidor mas cercano a su ubicaci\u00f3n (aunque nuestro hosting sea en el Congo)\r\n\r\nTenemos otras ventajas en su uso tambi\u00e9n, como el cache del browser, es decir, los archivos se llaman de una forma fija, links permanentes, por lo que si el cliente entr\u00f3 a un sitio X con una referencia al mismo CDN, para nuestra sitio ya tiene el archivo <em>cacheado<\/em>.\r\n\r\n<!--more-->\r\n\r\nSupongamos que tenemos nuestra referencia:\r\n[html]\r\n&lt;script src=&quot;js\/jquery.min-1-7-1.js&quot;&gt;&lt;\/script&gt;\r\n[\/html]\r\nEs poco probable que el cliente ya lo tenga en cache con ese nombre.\r\n\r\n<h3>Referenciando a un CDN<\/h3>\r\n[html]\r\n&lt;script src=&quot;\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.7.1\/jquery.min.js&quot;&gt;&lt;\/script&gt;\r\n[\/html]\r\nSe v\u00e9 mucho mejor, no?\r\n\r\n<h3>Por qu\u00e9 una reserva local?<\/h3>\r\nPodr\u00edamos pensarlo para un entorno de desarrollo o una intranet, si el cliente (o nosotros desarrollando) no tenemos internet, el sitio funcionar\u00eda sin problemas.\r\n\r\nY qu\u00e9 pasa si el CDN, por ejemplo de Google, est\u00e1 ca\u00eddo?, aparte de que se seguramente el mundo se detendr\u00eda, nuestro sitio no funcionar\u00eda, as\u00ed que agreguemos la reserva local <em>por si las dudas<\/em>:\r\n\r\n[html]\r\n&lt;script src=&quot;\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.7.1\/jquery.min.js&quot;&gt;&lt;\/script&gt;\r\n&lt;script&gt;window.jQuery || document.write('&lt;script src=&quot;js\/libs\/jquery-1.7.1.min.js&quot;&gt;&lt;\\\/script&gt;')&lt;\/script&gt;\r\n[\/html]\r\n\r\nAs\u00ed de simple, referenciamos al CDN de google para la version 1.7.1 de jquery y ponemos otro script comprobando que si <em>window.jQuery<\/em> es <em>undefined<\/em> insertamos nuestro script local.\r\n\r\nLinks relacionados:\r\n<ul>\r\n<li><a href=\"http:\/\/code.google.com\/intl\/es-ES\/apis\/libraries\/\">Google Javascript CDN<\/a><\/li>\r\n<li><a href=\"http:\/\/www.whatiscdn.org\">What is CDN<\/a><\/li>\r\n<li><a href=\"http:\/\/en.wikipedia.org\/wiki\/Content_delivery_network\">CDN wikipedia<\/a><\/li>\r\n<\/ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 21 Mar 2012 21:56:40 +0000","created_by":1,"updated_at":"Wed, 21 Mar 2012 21:56:40 +0000","updated_by":1,"published_at":"Wed, 21 Mar 2012 21:56:40 +0000","published_by":1},{"id":1627,"title":"El juego de la vida en JS","slug":"el-juego-de-la-vida-en-js","markdown":"\nEl juego de la vida no es un juego en donde hay jugadores, ganadores ni perdedores al menos desde su forma m\u00e1s b\u00e1sica. Es un ejemplo de un [aut\u00f3mata celular](http:\/\/es.wikipedia.org\/wiki\/Aut%C3%B3mata_celular \"Qu\u00e9 es?\") dise\u00f1ado por **[John Conway](http:\/\/es.wikipedia.org\/wiki\/John_Conway \"Mini Biograf\u00eda\")** que se desenvuelve en una grilla de celdas cuadradas que se extiende hacia el infinito en todas las direcciones. Una celda puede estar 'viva' o 'muerta'. La evoluci\u00f3n del juego va a estar dada por las celdas que se establezcan como 'vivas' en la transici\u00f3n 'cero', lo que ser\u00eda el estado inicial del juego. En las transiciones posteriores la evoluci\u00f3n se da por un conjunto de reglas en donde cada estado depende del n\u00famero de celdas vivas, las reglas son: - Una celda 'muerta' con exactamente 3 celdas vecinas 'vivas' \"nace\" (al turno siguiente estar\u00e1 viva). - Una celda 'viva' con 2 \u00f3 3 celdas vecinas 'vivas' sigue viva, en otro caso muere o permanece muerta ya sea por soledad o sobrepoblaci\u00f3n. El estado de todas las c\u00e9lulas se tiene en cuenta para calcular el estado de las mismas al turno siguiente. Todas las c\u00e9lulas se actualizan simult\u00e1neamente. El hecho de que todas las celdas se actualicen simult\u00e1neamente hace que el desarrollo del juego se haya convertido en un desaf\u00edo de programaci\u00f3n para muchos y que otros adopten el patr\u00f3n llamado 'glider' del juego de la vida como un [emblema](http:\/\/es.wikipedia.org\/wiki\/Emblema_hacker \"Emblema Hacker\"), tal es el caso de la cultura hacker. Una expliaci\u00f3n m\u00e1s detallada del juego de la vida y sus patrones la pueden encontrar ac\u00e1 en [ingl\u00e9s](http:\/\/www.math.com\/students\/wonders\/life\/life.html \"Explicaci\u00f3n en ingl\u00e9s\") y en [espa\u00f1ol ](http:\/\/es.wikipedia.org\/wiki\/Juego_de_la_vida \"Explicaci\u00f3n en Espa\u00f1ol\")siendo la que es en ingl\u00e9s m\u00e1s completa. Ac\u00e1 les dejo un par de ejemplos del juego de la vida hecho en JS as\u00ed como tambi\u00e9n una versi\u00f3n colaborativa hecha en node.js: - [Juego en JS con ejemplo de glider ](http:\/\/www.granvino.com\/jam\/stuff\/juegos\/gamoliyas\/spanish\/index.htm?worldwidth=40&height=20&speed=300&cellwidth=15&cellheight=15&cellpadding=2) - [Juego colaborativo en node.js](http:\/\/conwaymmo.com\/ \"Juego colaborativo\") - [Juego en JS con un universo m\u00e1s grande](http:\/\/gmlive.narod.ru\/download\/live\/version_0_3\/gamelive.html \"Super universo para probar patrones\")\n\n\n","html":"El juego de la vida no es un juego en donde hay jugadores, ganadores ni perdedores al menos desde su forma m\u00e1s b\u00e1sica. Es un ejemplo de un <a href=\"http:\/\/es.wikipedia.org\/wiki\/Aut%C3%B3mata_celular\" title=\"Qu\u00e9 es?\">aut\u00f3mata celular<\/a> dise\u00f1ado por <strong><a href=\"http:\/\/es.wikipedia.org\/wiki\/John_Conway\" title=\"Mini Biograf\u00eda\">John Conway<\/a><\/strong> que se desenvuelve en una grilla de celdas cuadradas que se extiende hacia el infinito en todas las direcciones. Una celda puede estar 'viva' o 'muerta'. La evoluci\u00f3n del juego va a estar dada por las celdas que se establezcan como 'vivas' en la transici\u00f3n 'cero', lo que ser\u00eda el estado inicial del juego. En las transiciones posteriores la evoluci\u00f3n se da por un conjunto de reglas en donde cada estado depende del n\u00famero de celdas vivas, las reglas son:\r\n\r\n- Una celda 'muerta' con exactamente 3 celdas vecinas 'vivas' \"nace\" (al turno siguiente estar\u00e1 viva).\r\n- Una celda 'viva' con 2 \u00f3 3 celdas vecinas 'vivas' sigue viva, en otro caso muere o permanece muerta ya sea por soledad o sobrepoblaci\u00f3n.\r\n\r\nEl estado de todas las c\u00e9lulas se tiene en cuenta para calcular el estado de las mismas al turno siguiente. Todas las c\u00e9lulas se actualizan simult\u00e1neamente. El hecho de que todas las celdas se actualicen simult\u00e1neamente hace que el desarrollo del juego se haya convertido en un desaf\u00edo de programaci\u00f3n para muchos y que otros adopten el patr\u00f3n llamado 'glider' del juego de la vida como un <a href=\"http:\/\/es.wikipedia.org\/wiki\/Emblema_hacker\" title=\"Emblema Hacker\">emblema<\/a>, tal es el caso de la cultura hacker.\r\n\r\nUna expliaci\u00f3n m\u00e1s detallada del juego de la vida y sus patrones la pueden encontrar ac\u00e1 en <a href=\"http:\/\/www.math.com\/students\/wonders\/life\/life.html\" title=\"Explicaci\u00f3n en ingl\u00e9s\">ingl\u00e9s<\/a> y en <a href=\"http:\/\/es.wikipedia.org\/wiki\/Juego_de_la_vida\" title=\"Explicaci\u00f3n en Espa\u00f1ol\">espa\u00f1ol <\/a>siendo la que es en ingl\u00e9s m\u00e1s completa.\r\n\r\nAc\u00e1 les dejo un par de ejemplos del juego de la vida hecho en JS as\u00ed como tambi\u00e9n una versi\u00f3n colaborativa hecha en node.js:\r\n\r\n- <a href=\"http:\/\/www.granvino.com\/jam\/stuff\/juegos\/gamoliyas\/spanish\/index.htm?worldwidth=40&height=20&speed=300&cellwidth=15&cellheight=15&cellpadding=2\" width=\"382\" height=\"378\" scrolling=\"no\" frameborder=\"0\"\">Juego en JS con ejemplo de glider <\/a>\r\n\r\n- <a href=\"http:\/\/conwaymmo.com\/\" title=\"Juego colaborativo\">Juego colaborativo en node.js<\/a>\r\n\r\n- <a href=\"http:\/\/gmlive.narod.ru\/download\/live\/version_0_3\/gamelive.html\" title=\"Super universo para probar patrones\">Juego en JS con un universo m\u00e1s grande<\/a>\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":4,"created_at":"Wed, 28 Mar 2012 22:57:37 +0000","created_by":1,"updated_at":"Wed, 28 Mar 2012 22:57:37 +0000","updated_by":1,"published_at":"Wed, 28 Mar 2012 22:57:37 +0000","published_by":1},{"id":1695,"title":"Valores falsos y verdaderos: || y &&","slug":"valores-falsos-y-verdaderos","markdown":"\nAntes de hacer un *if* en cualquier lenguaje es importante entender que es *false* y que es *true* adem\u00e1s de un booleano. [js] function unaFuncion(){ if (foo){ foo = true; } var foo = true; } [\/js] Entra al *if* ?, la respuesta es no ... pero no entra porque vale *false* o *null*, sino porque vale *undefined*, la [declaracion de la variable se alz\u00f3](http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/ \"Alcance de Variables (var scope)\") al principio de la funci\u00f3n por el interpretador, pero no as\u00ed su asignaci\u00f3n. Y todo valor undefined resulta en falso. [js] function unaFuncion(){ var foo = ''; if (!foo && !foo.length){ foo = 'false'; } if (foo) console.log('mmm entro?'); } [\/js] Ahora *foo* no vale *undefined*, ni *null*, ni *false*, sin embargo un string vacio y el numero 0 son valores falsos, no siendo asi 'false', el cual es muy conocido en la jerga de scripting por ejemplo al asignar un 'false' a un hidden y despu\u00e9s preguntar contra su valor en un if: 'false' es un string, el cual no es vacio, por lo tanto resulta en *true*.   \nAlgunos errores comunes: [js] function unaFuncion(){ var foo = 'hola'; if (!parseFloat(foo)){ console.log('devuelve NaN, otro valor falso'); } foo = '0'; if (!parseFloat(foo)){ console.log('no devuelve NaN, pero al convertirlo vale 0 y es otro valor falso'); } var baz = []; if (baz) console.log('No est\u00e1 dentro de los valores falsos'); \/\/deberiamos comprobarlo asi if (baz.length) console.log('este mensaje no se logea, porque es 0 y resulta en false'); } [\/js]\n\n#### Valores Falsos (falsy values)\n\n- false\n- null\n- undefined\n- `\"\"` (string en blanco)\n- el n\u00famero 0\n- el n\u00famero NaN (si, Not A Number es un n\u00famero, pero uno *especial*)\n\n**Todos los demas valores, incluyendo el famoso string *'false'* y cualquier objeto resulta en *true***- - - - - -\n\n#### Usando || y &&\n\n Ahora que sabemos que valores son falsos, tenemos que entender que || y && no retornan booleanos, como en otros lenguajes: [js] var nombre = 'pepe'; var apellido = 'gonzales'; var sobreNombre = ''; var edad = 65; var novia = null; var amigos = 0; var apellido = (nombre && apellido); var sobreNombre = (nombre && apellido && sobreNombre); var edad = (nombre && apellido && edad); var foreverAlone = (novia || amigos); console.log(apellido); \/\/logea 'gonzales' console.log(sobreNombre); \/\/logea '' console.log(edad); \/\/logea 65 console.log(foreverAlone); \/\/logea 0 [\/js] En ningun caso retorno *true *o *false*, **en javascript || y && retornan el \u00faltimo valor evaluado**, es decir, en el caso de || si el primero es verdadero lo retorna, sino retorna el siguiente, pero en el caso del && retorna el siguiente al \u00faltimo verdadero. Para este caso se aplican los mismos valores *falsos* que vimos antes en la tabla.   \nUn ejemplo de mas real de su uso: [js] function unaPersona(opciones){ var nombre = (opciones && opciones.unNombre) || 'Sin Nombre'; console.log(nombre); } unaPersona({ unNombre: 'Pepe' }); \/\/logea: Pepe unaPersona({ }); \/\/logea: Sin Nombre unaPersona({ unNombre: '' }); \/\/logea: Sin Nombre unaPersona(null); \/\/logea: Sin Nombre [\/js] Se puede utilizar para valores default. En este caso simplemente hago la comprobacion de que opciones no sea undefined o null, luego que tambien tenga una propiedad unNombre que no sea undefined, ni null, ni un string vacio (o sea, los valores falsos de la tabla), si ambos son verdaderos, retorno el \u00faltimo, sino salgo por el || y guardo 'Sin Nombre'. Al principio puede ser confuso, ya que no es lo com\u00fan, en la mayoria de los lenguajes retorna un booleano, pero una vez que se acomodan a su uso se le puede sacar un buen provecho.\n","html":"Antes de hacer un <em>if<\/em> en cualquier lenguaje es importante entender que es <em>false<\/em> y que es <em>true<\/em> adem\u00e1s de un booleano. \r\n\r\n[js]\r\nfunction unaFuncion(){\r\n  if (foo){\r\n    foo = true;\r\n  }\r\n\r\n  var foo = true;\r\n}\r\n[\/js]\r\n\r\nEntra al <em>if<\/em> ?, la respuesta es no ... pero no entra porque vale <em>false<\/em> o <em>null<\/em>, sino porque vale <em>undefined<\/em>, la <a href=\"http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/\" title=\"Alcance de Variables (var scope)\">declaracion de la variable se alz\u00f3<\/a> al principio de la funci\u00f3n por el interpretador, pero no as\u00ed su asignaci\u00f3n. Y todo valor undefined resulta en falso.\r\n\r\n[js]\r\nfunction unaFuncion(){\r\n  var foo = '';\r\n  \r\n  if (!foo &amp;&amp; !foo.length){\r\n    foo = 'false';\r\n  }\r\n\r\n  if (foo) \r\n    console.log('mmm entro?');\r\n}\r\n[\/js]\r\n\r\nAhora <em>foo<\/em> no vale <em>undefined<\/em>, ni <em>null<\/em>, ni <em>false<\/em>, sin embargo un string vacio y el numero 0 son valores falsos, no siendo asi 'false', el cual es muy conocido en la jerga de scripting por ejemplo al asignar un 'false' a un hidden y despu\u00e9s preguntar contra su valor en un if: 'false' es un string, el cual no es vacio, por lo tanto resulta en <em>true<\/em>.\r\n<br\/>Algunos errores comunes:\r\n\r\n[js]\r\nfunction unaFuncion(){\r\n  var foo = 'hola';\r\n  if (!parseFloat(foo)){\r\n    console.log('devuelve NaN, otro valor falso');\r\n  }\r\n\r\n  foo = '0';\r\n  if (!parseFloat(foo)){\r\n    console.log('no devuelve NaN, pero al convertirlo vale 0 y es otro valor falso');\r\n  }\r\n\r\n  var baz = [];\r\n  if (baz)\r\n    console.log('No est\u00e1 dentro de los valores falsos');\r\n  \r\n  \/\/deberiamos comprobarlo asi\r\n  if (baz.length)\r\n    console.log('este mensaje no se logea, porque es 0 y resulta en false');\r\n}\r\n[\/js]\r\n\r\n<h4>Valores Falsos (falsy values)<\/h4>\r\n<ul>\r\n<li>false<\/li>\r\n<li>null<\/li>\r\n<li>undefined<\/li>\r\n<li><code>\"\"<\/code> (string en blanco)<\/li>\r\n<li>el n\u00famero 0<\/li>\r\n<li>el n\u00famero NaN (si, Not A Number es un n\u00famero, pero uno <em>especial<\/em>)<\/li>\r\n<\/ul>\r\n\r\n<strong>Todos los demas valores, incluyendo el famoso string <em>'false'<\/em> y cualquier objeto resulta en <em>true<\/em><\/strong>\r\n\r\n<hr\/>\r\n\r\n<h4>Usando || y &&<\/h4>\r\nAhora que sabemos que valores son falsos, tenemos que entender que || y && no retornan booleanos, como en otros lenguajes:\r\n\r\n[js]\r\nvar nombre = 'pepe';\r\nvar apellido = 'gonzales';\r\nvar sobreNombre = '';\r\nvar edad = 65;\r\nvar novia = null;\r\nvar amigos = 0;\r\n\r\nvar apellido = (nombre &amp;&amp; apellido); \r\nvar sobreNombre = (nombre &amp;&amp; apellido &amp;&amp; sobreNombre); \r\nvar edad = (nombre &amp;&amp; apellido &amp;&amp; edad);\r\nvar foreverAlone = (novia || amigos);\r\n \r\nconsole.log(apellido); \/\/logea 'gonzales'\r\nconsole.log(sobreNombre); \/\/logea ''\r\nconsole.log(edad); \/\/logea 65\r\nconsole.log(foreverAlone); \/\/logea 0\r\n[\/js]\r\n\r\nEn ningun caso retorno <em>true <\/em>o <em>false<\/em>, <strong>en javascript || y && retornan el \u00faltimo valor evaluado<\/strong>, es decir, en el caso de || si el primero es verdadero lo retorna, sino retorna el siguiente, pero en el caso del && retorna el siguiente al \u00faltimo verdadero. Para este caso se aplican los mismos valores <em>falsos<\/em> que vimos antes en la tabla.\r\n\r\n<br\/>Un ejemplo de mas real de su uso:\r\n\r\n[js]\r\nfunction unaPersona(opciones){\r\n  var nombre = (opciones &amp;&amp; opciones.unNombre) || 'Sin Nombre';\r\n  console.log(nombre);\r\n}\r\n\r\nunaPersona({ unNombre: 'Pepe' }); \/\/logea: Pepe \r\nunaPersona({ }); \/\/logea: Sin Nombre\r\nunaPersona({ unNombre: '' }); \/\/logea: Sin Nombre\r\nunaPersona(null); \/\/logea: Sin Nombre \r\n[\/js]\r\n\r\nSe puede utilizar para valores default. En este caso simplemente hago la comprobacion de que opciones no sea undefined o null, luego que tambien tenga una propiedad unNombre que no sea undefined, ni null, ni un string vacio (o sea, los valores falsos de la tabla), si ambos son verdaderos, retorno el \u00faltimo, sino salgo por el || y guardo 'Sin Nombre'.\r\n\r\nAl principio puede ser confuso, ya que no es lo com\u00fan, en la mayoria de los lenguajes retorna un booleano, pero una vez que se acomodan a su uso se le puede sacar un buen provecho.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Sun, 08 Apr 2012 12:38:36 +0000","created_by":1,"updated_at":"Sun, 08 Apr 2012 12:38:36 +0000","updated_by":1,"published_at":"Sun, 08 Apr 2012 12:38:36 +0000","published_by":1},{"id":1649,"title":"Javascript","slug":"javascript","markdown":"\nUna p\u00e1gina dedicada a los que pidieron los posts ordenados para ir aprendiendo Javascript ;) La idea es ir desde cero con javascript haciendo foco en \u201clos secretos\u201d para entender un poco mejor como funciona y salir del esquema de \u201cscripting\u201d normal que se usa para Web. Vamos a meternos en javascript como lenguaje, no como un medio para hacer ejecuciones en el cliente de una pagina web y modificar el [DOM](http:\/\/fernetjs.com\/2011\/10\/introduccion\/ \"Que es el DOM?\").\n\n#### Nivel B\u00e1sico\n\n1. [Declaraci\u00f3n de variables](http:\/\/fernetjs.com\/2011\/10\/declaracion-de-variables-y-booleanos\/ \"Declaraci\u00f3n de Variables y Booleanos\")\n2. [Alcance de Variables](http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/ \"Alcance de Variables (var scope)\")\n3. [Variables Globales](http:\/\/fernetjs.com\/2011\/11\/variables-globales\/ \"Variables Globales\")\n4. [Funciones](http:\/\/fernetjs.com\/2011\/11\/funciones-argumentos-y-parametros\/ \"Funciones: Argumentos y Par\u00e1metros\")\n5. [Alcance de funciones: an\u00f3nimas y nombradas](http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-parte-2-funciones\/ \"Alcance de Variables \u2013 Parte 2: funciones\")\n6. [Valores falsos y verdaderos](http:\/\/fernetjs.com\/2012\/04\/valores-falsos-y-verdaderos\/ \"Valores falsos y verdaderos: || y &&\")\n7. [Operadores de Igualdad == y ===](http:\/\/fernetjs.com\/2011\/11\/operadores-de-igualdad-y\/ \"Operadores de igualdad ( == y === )\")\n8. [ForEach: Objeto y Array](http:\/\/fernetjs.com\/2011\/10\/usando-for-each-con-arrays\/ \"Usando for each con Arrays\")\n9. [Manejo de Errores](http:\/\/fernetjs.com\/2012\/12\/manejando-errores\/ \"Manejando Errores\")\n\n#### Nivel Intermedio\n\n1. [Objetos y contexto: this](http:\/\/fernetjs.com\/2012\/01\/patrones-de-invocacion-de-funciones-this\/ \"Patrones de Invocaci\u00f3n de Funciones: this\")\n2. [null vs undefined](http:\/\/fernetjs.com\/2011\/12\/null-vs-undefined\/ \"null vs. undefined\")\n3. [Creando y usando callbacks](http:\/\/fernetjs.com\/2011\/12\/creando-y-utilizando-callbacks\/ \"Creando y utilizando callbacks\")\n4. [setTimeout y setInterval](http:\/\/fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/ \"Ejecuciones Asincr\u00f3nicas de funciones\")\n5. Notacion JSON y eval()\n6. AJAX y Serializaci\u00f3n\n7. [Clausuras (Closures)](http:\/\/fernetjs.com\/2011\/11\/clausuras-closures\/ \"Clausuras (Closures)\")\n8. [Patr\u00f3n Module y Namespace](http:\/\/fernetjs.com\/2012\/05\/patrones-module-y-namespace\/ \"Patrones: Module y Namespace\")\n\n##### [Curso Interactivo: Variables, Funciones y Clausuras](http:\/\/nathansjslessons.appspot.com\/lesson?id=1000&lang=es \"Que es Clausura?\")\n\n#### Nivel Avanzado\n\n1. Prototype\n2. Extendiendo javascript: [Array.prototype](http:\/\/fernetjs.com\/2011\/11\/%c2%bfcomo-funciona-array-prototype\/ \"\u00bfC\u00f3mo funciona Array.prototype?\"), [String.trim()](http:\/\/fernetjs.com\/2012\/01\/extendiendo-javascript-string-trim\/ \"Extendiendo javascript: String.trim()\")\n3. [Memoization](http:\/\/fernetjs.com\/2011\/11\/memoization-una-primer-mirada\/ \"Memoization. Una primer mirada\")\n4. [Curry](http:\/\/fernetjs.com\/2013\/03\/curry\/ \"Curry\")\n5. instanceof y typeof\n6. [Expresiones Regulares](http:\/\/fernetjs.com\/2013\/07\/introduccion-a-expresiones-regulares\/ \"Introducci\u00f3n a Expresiones Regulares\")\n7. with y porque no usarlo\n8. [ECMAScript 5: Strict Mode](http:\/\/fernetjs.com\/2011\/12\/ecmascript-5-1-strict-mode-y-json\/ \"ECMAScript 5.1 \u2013 Strict Mode y JSON\")\n\n\n","html":"Una p\u00e1gina dedicada a los que pidieron los posts ordenados para ir aprendiendo Javascript ;)\r\nLa idea es ir desde cero con javascript haciendo foco en \u201clos secretos\u201d para entender un poco mejor como funciona y salir del esquema de \u201cscripting\u201d normal que se usa para Web.\r\nVamos a meternos en javascript como lenguaje, no como un medio para hacer ejecuciones en el cliente de una pagina web y modificar el <a href=\"http:\/\/fernetjs.com\/2011\/10\/introduccion\/\" title=\"Que es el DOM?\">DOM<\/a>.\r\n\r\n<h4>Nivel B\u00e1sico<\/h4>\r\n<ol>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/10\/declaracion-de-variables-y-booleanos\/\" title=\"Declaraci\u00f3n de Variables y Booleanos\">Declaraci\u00f3n de variables<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/\" title=\"Alcance de Variables (var scope)\">Alcance de Variables<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/11\/variables-globales\/\" title=\"Variables Globales\">Variables Globales<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/11\/funciones-argumentos-y-parametros\/\" title=\"Funciones: Argumentos y Par\u00e1metros\">Funciones<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-parte-2-funciones\/\" title=\"Alcance de Variables \u2013 Parte 2: funciones\">Alcance de funciones: an\u00f3nimas y nombradas<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/04\/valores-falsos-y-verdaderos\/\" title=\"Valores falsos y verdaderos: || y &&\">Valores falsos y verdaderos<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/11\/operadores-de-igualdad-y\/\" title=\"Operadores de igualdad ( == y === )\">Operadores de Igualdad == y ===<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/10\/usando-for-each-con-arrays\/\" title=\"Usando for each con Arrays\">ForEach: Objeto y Array<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/12\/manejando-errores\/\" title=\"Manejando Errores\">Manejo de Errores<\/a><\/li>\r\n<\/ol>\r\n\r\n<h4>Nivel Intermedio<\/h4>\r\n<ol>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/01\/patrones-de-invocacion-de-funciones-this\/\" title=\"Patrones de Invocaci\u00f3n de Funciones: this\">Objetos y contexto: this<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/12\/null-vs-undefined\/\" title=\"null vs. undefined\">null vs undefined<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/12\/creando-y-utilizando-callbacks\/\" title=\"Creando y utilizando callbacks\">Creando y usando callbacks<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/\" title=\"Ejecuciones Asincr\u00f3nicas de funciones\">setTimeout y setInterval<\/a><\/li>\r\n<li>Notacion JSON y eval()<\/li>\r\n<li>AJAX y Serializaci\u00f3n<\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/11\/clausuras-closures\/\" title=\"Clausuras (Closures)\">Clausuras (Closures)<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/05\/patrones-module-y-namespace\/\" title=\"Patrones: Module y Namespace\">Patr\u00f3n Module y Namespace<\/a><\/li>\r\n<\/ol>\r\n\r\n<h5><a href=\"http:\/\/nathansjslessons.appspot.com\/lesson?id=1000&lang=es\" title=\"Que es Clausura?\">Curso Interactivo: Variables, Funciones y Clausuras<\/a><\/h5>\r\n\r\n<h4>Nivel Avanzado<\/h4>\r\n<ol>\r\n<li>Prototype<\/li>\r\n<li>Extendiendo javascript: <a href=\"http:\/\/fernetjs.com\/2011\/11\/%c2%bfcomo-funciona-array-prototype\/\" title=\"\u00bfC\u00f3mo funciona Array.prototype?\">Array.prototype<\/a>, <a href=\"http:\/\/fernetjs.com\/2012\/01\/extendiendo-javascript-string-trim\/\" title=\"Extendiendo javascript: String.trim()\">String.trim()<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/11\/memoization-una-primer-mirada\/\" title=\"Memoization. Una primer mirada\">Memoization<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2013\/03\/curry\/\" title=\"Curry\">Curry<\/a><\/li>\r\n<li>instanceof y typeof<\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2013\/07\/introduccion-a-expresiones-regulares\/\" title=\"Introducci\u00f3n a Expresiones Regulares\">Expresiones Regulares<\/a><\/li>\r\n<li>with y porque no usarlo<\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/12\/ecmascript-5-1-strict-mode-y-json\/\" title=\"ECMAScript 5.1 \u2013 Strict Mode y JSON\">ECMAScript 5: Strict Mode<\/a><\/li>\r\n<\/ol>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 09 Apr 2012 10:46:46 +0000","created_by":1,"updated_at":"Tue, 23 Jul 2013 15:26:28 +0000","updated_by":1,"published_at":"Mon, 09 Apr 2012 10:46:46 +0000","published_by":1},{"id":1685,"title":"HTML 5","slug":"temp-slug-55","markdown":"\n1. Atributos customs (data)\n2. Dibujando en CANVAS\n3. Animando en CANVAS\n4. Game loop\n5. Request Animation Frame\n6. Contexto Buffer para CANVAS\n7. Image Repository\n8. image data y generacion de imagenes\n9. GamePad API\n10. Fullscreen API\n11. Space Invaders 404\n\n\n","html":"<ol>\r\n<li>Atributos customs (data)<\/li>\r\n<li>Dibujando en CANVAS<\/li>\r\n<li>Animando en CANVAS<\/li>\r\n\r\n<li>Game loop<\/li>\r\n<li>Request Animation Frame<\/li>\r\n<li>Contexto Buffer para CANVAS<\/li>\r\n\r\n<li>Image Repository<\/li>\r\n<li>image data y generacion de imagenes<\/li>\r\n\r\n<li>GamePad API<\/li>\r\n<li>Fullscreen API<\/li>\r\n<li>Space Invaders 404<\/li>\r\n\r\n<\/ol>","image":null,"featured":0,"page":1,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 11 Apr 2012 21:46:22 +0000","created_by":1,"updated_at":"Wed, 11 Apr 2012 21:46:22 +0000","updated_by":1,"published_at":"","published_by":1},{"id":1789,"title":"DOM: Obteniendo y asignando texto con jQuery","slug":"dom-obteniendo-y-asignando-texto-con-jquery","markdown":"\njQuery nos brinda 3 formas de obtener y asignar contenido como texto al DOM.\n\n<dl><dt>.val()<\/dt><dd>Obtener y asignar el valor de controles de formulario como ser input, select y textarea<\/dd><dt>.text()<\/dt><dd>Obtener y asignar el texto de cualquier elemento DOM. Espec\u00edficamente utiliza en la propiedad innerHTML<\/dd><dt>.html()<\/dt><dd>Lo mismo que el text() con la diferencia que el texto es interpretado como HTML, no como texto plano<\/dd><\/dl> Los tres m\u00e9todos trabajan de la misma manera al momento de obtener o asignar: para asignar, simplemente enviamos un string por par\u00e1metro y para obtener no enviamos ning\u00fan par\u00e1metro: [js] \/\/Obtener var valorInput = $(\"#unInput\").val(); var valorSpan = $(\"#unSpan\").text(); var valorDiv = $(\"#unDiv\").html(); \/\/Asignar $(\"#unInput\").val(valorInput + \" ... Nuevo\"); $(\"#unSpan\").text(valorSpan + \" ... Nuevo\"); $(\"#unDiv\").html(valorDiv + \"<b> ... Nuevo<\/b>\"); \/\/Diferencia entre text() y html() $(\"#unDiv\").text(\"<span>HOLA!<\/span>\"); \/\/resultado: <span>HOLA!<\/span> $(\"#unDiv\").html(\"<span>HOLA!<\/span>\"); \/\/resultado: HOLA! [\/js] > Desde la versi\u00f3n 1.4 de jQuery el m\u00e9todo .html() puede recibir una funci\u00f3n y con un return dentro de la misma asignamos el innerHTML al elemento selecionado.\n\n [js] $(\"#unDiv\").html(function(){ return \"Elementos hijos: \" + $(this).children('*').length; }); [\/js] #### Puntos importantes a tener en cuenta al utilizarlos:\n\n [js title=\"Encadenamiento o chaining\"] \/\/val() como SET retorna el elemento $('#unInput').val('Hola').addClass('alerta').show(); \/\/val() como GET retorna el texto, no as\u00ed su elemento \/\/simplemente podemos mover su get al final var valor = $('#unInput').removeClass('alerta').val(); \/\/De la misma manera funcionan el text() y el html(). [\/js] [js title=\"Selectores con mas de un elemento\"] \/\/ SET: html, text y val asignan el valor a todos $('div').html('<p>Contenido pisado con este P\u00e1rrafo<\/p>'); \/\/ GET: \/\/ html devuelve SOLO el innerHTML del primer elemento var innerHTML_del_primer_DIV = $('div').html(); \/\/ text devuelve un concatenado de todos los innerHTML var cadena = $('div, span, label').text(); \/\/ val devuelve un arreglo con los valores \/\/ un select con multiple=\"multiple\" var paisesSeleccionados = $('#paises').val(); [\/js] [js title=\"Limpiar el DOM antes de asignar HTML\"] \/\/ Pisamos sin limpiar y perdemos la referencia \/\/ a lo que ya existia de DOM $(\"#unDiv\").html(\"<span>Piso todo<\/span>\"); \/\/ Limpiamos el contenido del div antes de asignar \/\/ nuevo html $(\"#unDiv\").empty().html(\"<span>Piso todo<\/span>\"); [\/js] Al momento de asignar con el m\u00e9todo html() y pisar el contenido hay que tener en cuenta limpiar la memoria de los elementos antes de hacerlo para evitar que la memoria se nos vaya de las manos. Pueden ver mas sobre empty() y remove() en [este post](http:\/\/fernetjs.com\/2011\/11\/performance-el-dom-y-la-memoria\/ \"Performance: El DOM y la memoria\")  \n Les dejo el jsFiddle con un ejemplo para que hagan pruebas: [http:\/\/jsfiddle.net\/pjnovas\/nwWYu\/](http:\/\/jsfiddle.net\/pjnovas\/nwWYu\/)  \n\n","html":"jQuery nos brinda 3 formas de obtener y asignar contenido como texto al DOM.\r\n<br\/>\r\n<dl>\r\n<dt>.val()<\/dt>\r\n<dd>Obtener y asignar el valor de controles de formulario como ser input, select y textarea<\/dd>\r\n<dt>.text()<\/dt>\r\n<dd>Obtener y asignar el texto de cualquier elemento DOM. Espec\u00edficamente utiliza en la propiedad innerHTML<\/dd>\r\n<dt>.html()<\/dt>\r\n<dd>Lo mismo que el text() con la diferencia que el texto es interpretado como HTML, no como texto plano<\/dd>\r\n<\/dl>\r\n\r\nLos tres m\u00e9todos trabajan de la misma manera al momento de obtener o asignar: para asignar, simplemente enviamos un string por par\u00e1metro y para obtener no enviamos ning\u00fan par\u00e1metro:\r\n\r\n[js]\r\n\/\/Obtener\r\nvar valorInput = $(&quot;#unInput&quot;).val();\r\nvar valorSpan = $(&quot;#unSpan&quot;).text();\r\nvar valorDiv = $(&quot;#unDiv&quot;).html();\r\n\r\n\/\/Asignar\r\n$(&quot;#unInput&quot;).val(valorInput + &quot; ... Nuevo&quot;);\r\n$(&quot;#unSpan&quot;).text(valorSpan + &quot; ... Nuevo&quot;);\r\n$(&quot;#unDiv&quot;).html(valorDiv + &quot;&lt;b&gt; ... Nuevo&lt;\/b&gt;&quot;);\r\n\r\n\/\/Diferencia entre text() y html()\r\n\r\n$(&quot;#unDiv&quot;).text(&quot;&lt;span&gt;HOLA!&lt;\/span&gt;&quot;); \r\n\/\/resultado: &lt;span&gt;HOLA!&lt;\/span&gt;\r\n\r\n$(&quot;#unDiv&quot;).html(&quot;&lt;span&gt;HOLA!&lt;\/span&gt;&quot;);\r\n\/\/resultado: HOLA!\r\n[\/js]\r\n\r\n<blockquote>\r\nDesde la versi\u00f3n 1.4 de jQuery el m\u00e9todo .html() puede recibir una funci\u00f3n y con un return dentro de la misma asignamos el innerHTML al elemento selecionado.\r\n<\/blockquote>\r\n[js]\r\n$(&quot;#unDiv&quot;).html(function(){\r\n  return &quot;Elementos hijos: &quot; + $(this).children('*').length;\r\n});\r\n[\/js]\r\n\r\n<h4>Puntos importantes a tener en cuenta al utilizarlos:<\/h4>\r\n\r\n[js title=\"Encadenamiento o chaining\"]\r\n\/\/val() como SET retorna el elemento\r\n$('#unInput').val('Hola').addClass('alerta').show();\r\n\r\n\/\/val() como GET retorna el texto, no as\u00ed su elemento\r\n\/\/simplemente podemos mover su get al final\r\nvar valor = $('#unInput').removeClass('alerta').val();\r\n\r\n\/\/De la misma manera funcionan el text() y el html().\r\n[\/js]\r\n\r\n[js title=\"Selectores con mas de un elemento\"]\r\n\/\/ SET: html, text y val asignan el valor a todos \r\n$('div').html('&lt;p&gt;Contenido pisado con este P\u00e1rrafo&lt;\/p&gt;');\r\n\r\n\/\/ GET: \r\n\/\/ html devuelve SOLO el innerHTML del primer elemento\r\nvar innerHTML_del_primer_DIV = $('div').html();\r\n\r\n\/\/ text devuelve un concatenado de todos los innerHTML\r\nvar cadena = $('div, span, label').text();\r\n\r\n\/\/ val devuelve un arreglo con los valores\r\n\/\/ un select con multiple=&quot;multiple&quot;\r\nvar paisesSeleccionados = $('#paises').val();\r\n[\/js]\r\n\r\n[js title=\"Limpiar el DOM antes de asignar HTML\"]\r\n\/\/ Pisamos sin limpiar y perdemos la referencia\r\n\/\/ a lo que ya existia de DOM\r\n$(&quot;#unDiv&quot;).html(&quot;&lt;span&gt;Piso todo&lt;\/span&gt;&quot;);\r\n\/\/ Limpiamos el contenido del div antes de asignar\r\n\/\/ nuevo html\r\n$(&quot;#unDiv&quot;).empty().html(&quot;&lt;span&gt;Piso todo&lt;\/span&gt;&quot;);\r\n[\/js]\r\n\r\nAl momento de asignar con el m\u00e9todo html() y pisar el contenido hay que tener en cuenta limpiar la memoria de los elementos antes de hacerlo para evitar que la memoria se nos vaya de las manos. Pueden ver mas sobre empty() y remove() en <a href=\"http:\/\/fernetjs.com\/2011\/11\/performance-el-dom-y-la-memoria\/\" title=\"Performance: El DOM y la memoria\">este post<\/a>\r\n\r\n<br\/>\r\nLes dejo el jsFiddle con un ejemplo para que hagan pruebas: <a href=\"http:\/\/jsfiddle.net\/pjnovas\/nwWYu\/\">http:\/\/jsfiddle.net\/pjnovas\/nwWYu\/<\/a>\r\n<br\/>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 16 Apr 2012 16:18:36 +0000","created_by":1,"updated_at":"Mon, 16 Apr 2012 16:18:36 +0000","updated_by":1,"published_at":"Mon, 16 Apr 2012 16:18:36 +0000","published_by":1},{"id":1856,"title":"Manejando eventos con jQuery","slug":"manejando-eventos-con-jquery","markdown":"\nAunque no lo parezca o bien no estemos al tanto, no es lo mismo realizar un .bind() que un .live() o bien un .delegate(). Cuando empezamos a utilizar jQuery o descubrimos una funcionalidad nueva, ya sea por buscarla en internet o cruzarnos con alguna, es importante entender un poco mas a fondo como funciona antes de usarla. Vamos a ver que opciones tenemos al momento de suscribirnos a eventos del DOM con jQuery y como funcionan cada una. Antes de ver como nos suscribimos a eventos, tenemos que entender como funcionan.\n\n##### DOM Tree (o \u00e1rbol DOM)\n\n Cuando escribimos HTML vamos creando contenedores con sus hijos, dandole estilos y armando nuestro esqueleto para su visualizaci\u00f3n. Por detr\u00e1s se va generando [DOM](http:\/\/fernetjs.com\/2011\/10\/introduccion\/ \"Que es el DOM?\"), el cual se va construyendo en forma de \u00e1rbol, de la misma manera que lo hacemos con nuestro HTML. Un ejemplo podr\u00eda ser:  window \u2514\u2500\u2500 document \u251c\u2500\u2500 h1 \u251c\u2500\u2500 div \u2502 \u251c\u2500\u2500 span \u2502 \u2514\u2500\u2500 a \u2514\u2500\u2500 p \u2514\u2500\u2500 span\n\n Ahora, cuando hacemos click en el elemento *a* se va a disparar el evento 'click', pero a su vez se va a propagar hacia sus padres dentro del **\u00e1rbol del DOM**. Es decir, el evento se va a ir 'disparando' en sus padres (*a* ->*div* ->*document* ->*window*). <font style=\"color:red\">window<\/font> \u2514\u2500\u2500 <font style=\"color:red\">document<\/font> \u251c\u2500\u2500 h1 \u251c\u2500\u2500 <font style=\"color:red\">div<\/font> \u2502 \u251c\u2500\u2500 span \u2502 \u2514\u2500\u2500 <font style=\"color:red\">a<\/font> \u2514\u2500\u2500 p \u2514\u2500\u2500 span\n\n Ahora agreguemos un manejador a ese evento: [js title=\".bind()\"] $('a').bind('click', function(){ console.log('disparado!'); }); \/\/desligar evento \/\/ $('a').unbind('click'); [\/js] En este caso utilizando .bind(), con nuestro selector de jQuery vamos a buscar todos los *a* en el documento, por lo que para cada *a* que **exista en el documento al momento de ejecutar ese c\u00f3digo** vamos a estar suscribiendonos al evento *click*. [js title=\".live()\"] $('a').live('click', function(){ console.log('disparado!'); }); \/\/desligar evento \/\/ $('a').die('click'); [\/js] Es lo mismo?, no. Con el evento *.live()* de jQuery nos suscribimos al evento *click* del documento ( *$(document)* ) avisandole que es s\u00f3lo para los *a*. Sabemos que cualquier evento que se dispare, su propagacion llegar\u00e1 hasta document, entonces, cuando una propagacion de un evento llega hasta el document, jQuery comprueba si el que dispar\u00f3 ese evento es igual al selector, en este caso un *a*. Esto es mucho mejor que el .bind(), primero porque no necesitamos que exista el elemento antes de agregar el evento, el .live() se suscribe al document, por lo que no necesitamos existencia del *a*. Por otro lado, suponiendo que tenemos 100 *a* en el div, con el .bind() vamos a suscribirnos al click de 100 elementos DOM (lo que no suena nada bien), en cambio con el .live() va a ser solo a uno. Y si queremos hacerlo de la misma manera que jQuery .live()?: [js title=\".delegate()\"] $(document).delegate('a', 'click', function(){ console.log('disparado!'); }); \/\/desligar evento \/\/ $(document).undelegate('a', 'click'); [\/js] Ahora se pone mas interesante, ya que podemos suscribirnos a eventos de una forma mucho mas controlada. Por ejemplo, en vez de esperar que toda la propagaci\u00f3n del evento llegue al document, lo hacemos sobre el contenedor: [js] $('div').delegate('a', 'click', function(){ console.log('disparado!'); }); [\/js] En ese caso jQuery se suscribe a la propagaci\u00f3n del contenedor, para el ejemplo un *div* y de esa manera no viajamos hasta el document. Esto se puede hacer tranquilamente con el *.live()*: [js] $('a', 'div').live('click', function(){ console.log('disparado!'); }); [\/js] **Entonces?, cual uso?, cual es mejor?, el *.delegate()* \u00f3 el *.live()*?** La respuesta es el *.delegate()*, si bien el *.live()* hace lo mismo, nos salteamos una b\u00fasqueda en el DOM con el *.delegate()*, en el \u00faltimo caso con el *.live()* estamos buscando los *a* antes de llamar al metodo *.live()*, con el *.delegate()*, no ejecutamos el selector de los *a*, sino el del contenedor avisandole que vamos a querer que compruebe **mas tarde** los *a*. **Ahora que entendemos todo el tema, que juega en todo esto el *.on()*?** El evento *.on()* y *.off()* aparecieron en jQuery 1.7 para terminar con todo este juego de *.bind()*, *.live()* y *.delegate()*. Su funcionalidad es simple, recibe 3 par\u00e1metros, tipo de evento, selector (opcional) y funci\u00f3n. Si le pasamos un selector es un *.delegate()*, caso contrario un *.live()*: [js] \/\/ bind: $('a').bind('click', function(){ }); $('a').on('click', function(){ }); \/\/ live: $('a').live('click', function(){ }); $(document).on('click', 'a', function(){ }); \/\/ delegate: $('div').delegate('a', 'click', function(){ }); $('div').on('click', 'a', function(){ }); \/\/desligar evento \/\/ $('div').off('click', 'a'); [\/js] Asi que si tienen la posibilidad de utilizar jQuery desde 1.7 usen el .on() y se pueden olvidar de todo lo que explique mas arriba :P \n","html":"Aunque no lo parezca o bien no estemos al tanto, no es lo mismo realizar un .bind() que un .live() o bien un .delegate(). Cuando empezamos a utilizar jQuery o descubrimos una funcionalidad nueva, ya sea por buscarla en internet o cruzarnos con alguna, es importante entender un poco mas a fondo como funciona antes de usarla.\r\n\r\nVamos a ver que opciones tenemos al momento de suscribirnos a eventos del DOM con jQuery y como funcionan cada una.\r\nAntes de ver como nos suscribimos a eventos, tenemos que entender como funcionan.\r\n\r\n<h5>DOM Tree (o \u00e1rbol DOM)<\/h5>\r\nCuando escribimos HTML vamos creando contenedores con sus hijos, dandole estilos y armando nuestro esqueleto para su visualizaci\u00f3n. Por detr\u00e1s se va generando <a href=\"http:\/\/fernetjs.com\/2011\/10\/introduccion\/\" title=\"Que es el DOM?\">DOM<\/a>, el cual se va construyendo en forma de \u00e1rbol, de la misma manera que lo hacemos con nuestro HTML. \r\nUn ejemplo podr\u00eda ser:\r\n\r\n<pre>\r\nwindow\r\n\u2514\u2500\u2500 document\r\n    \u251c\u2500\u2500 h1\r\n    \u251c\u2500\u2500 div\r\n    \u2502   \u251c\u2500\u2500 span\r\n    \u2502   \u2514\u2500\u2500 a\r\n    \u2514\u2500\u2500 p\r\n        \u2514\u2500\u2500 span\r\n<\/pre>\r\n\r\nAhora, cuando hacemos click en el elemento <em>a<\/em> se va a disparar el evento 'click', pero a su vez se va a propagar hacia sus padres dentro del <strong>\u00e1rbol del DOM<\/strong>. Es decir, el evento se va a ir 'disparando' en sus padres (<em>a<\/em> -> <em>div<\/em> -> <em>document<\/em> -> <em>window<\/em>).\r\n\r\n<pre>\r\n<font style=\"color:red\">window<\/font>\r\n\u2514\u2500\u2500 <font style=\"color:red\">document<\/font>\r\n    \u251c\u2500\u2500 h1\r\n    \u251c\u2500\u2500 <font style=\"color:red\">div<\/font>\r\n    \u2502   \u251c\u2500\u2500 span\r\n    \u2502   \u2514\u2500\u2500 <font style=\"color:red\">a<\/font>\r\n    \u2514\u2500\u2500 p\r\n        \u2514\u2500\u2500 span\r\n<\/pre>\r\n\r\nAhora agreguemos un manejador a ese evento:\r\n[js title=\".bind()\"]\r\n$('a').bind('click', function(){\r\n  console.log('disparado!');\r\n});\r\n\r\n\/\/desligar evento\r\n\/\/ $('a').unbind('click');\r\n[\/js]\r\n\r\nEn este caso utilizando .bind(), con nuestro selector de jQuery vamos a buscar todos los <em>a<\/em> en el documento, por lo que para cada <em>a<\/em> que <strong>exista en el documento al momento de ejecutar ese c\u00f3digo<\/strong> vamos a estar suscribiendonos al evento <em>click<\/em>.\r\n\r\n[js title=\".live()\"]\r\n$('a').live('click', function(){\r\n  console.log('disparado!');\r\n});\r\n\r\n\/\/desligar evento\r\n\/\/ $('a').die('click');\r\n[\/js]\r\n\r\nEs lo mismo?, no. Con el evento <em>.live()<\/em> de jQuery nos suscribimos al evento <em>click<\/em> del documento ( <em>$(document)<\/em> ) avisandole que es s\u00f3lo para los <em>a<\/em>. Sabemos que cualquier evento que se dispare, su propagacion llegar\u00e1 hasta document, entonces, cuando una propagacion de un evento llega hasta el document, jQuery comprueba si el que dispar\u00f3 ese evento es igual al selector, en este caso un <em>a<\/em>.\r\n\r\nEsto es mucho mejor que el .bind(), primero porque no necesitamos que exista el elemento antes de agregar el evento, el .live() se suscribe al document, por lo que no necesitamos existencia del <em>a<\/em>. Por otro lado, suponiendo que tenemos 100 <em>a<\/em> en el div, con el .bind() vamos a suscribirnos al click de 100 elementos DOM (lo que no suena nada bien), en cambio con el .live() va a ser solo a uno.\r\n\r\nY si queremos hacerlo de la misma manera que jQuery .live()?:\r\n\r\n[js title=\".delegate()\"]\r\n$(document).delegate('a', 'click', function(){\r\n  console.log('disparado!');\r\n});\r\n\r\n\/\/desligar evento\r\n\/\/ $(document).undelegate('a', 'click');\r\n[\/js]\r\n\r\nAhora se pone mas interesante, ya que podemos suscribirnos a eventos de una forma mucho mas controlada. \r\nPor ejemplo, en vez de esperar que toda la propagaci\u00f3n del evento llegue al document, lo hacemos sobre el contenedor:\r\n\r\n[js]\r\n$('div').delegate('a', 'click', function(){\r\n  console.log('disparado!');\r\n});\r\n[\/js]\r\n\r\nEn ese caso jQuery se suscribe a la propagaci\u00f3n del contenedor, para el ejemplo un <em>div<\/em> y de esa manera no viajamos hasta el document.\r\n\r\nEsto se puede hacer tranquilamente con el <em>.live()<\/em>:\r\n[js]\r\n$('a', 'div').live('click', function(){\r\n  console.log('disparado!');\r\n});\r\n[\/js]\r\n\r\n<strong>Entonces?, cual uso?, cual es mejor?, el <em>.delegate()<\/em> \u00f3 el <em>.live()<\/em>?<\/strong>\r\nLa respuesta es el <em>.delegate()<\/em>, si bien el <em>.live()<\/em> hace lo mismo, nos salteamos una b\u00fasqueda en el DOM con el <em>.delegate()<\/em>, en el \u00faltimo caso con el <em>.live()<\/em> estamos buscando los <em>a<\/em> antes de llamar al metodo <em>.live()<\/em>, con el <em>.delegate()<\/em>, no ejecutamos el selector de los <em>a<\/em>, sino el del contenedor avisandole que vamos a querer que compruebe <strong>mas tarde<\/strong> los <em>a<\/em>.\r\n\r\n<strong>Ahora que entendemos todo el tema, que juega en todo esto el <em>.on()<\/em>?<\/strong>\r\nEl evento <em>.on()<\/em> y <em>.off()<\/em> aparecieron en jQuery 1.7 para terminar con todo este juego de <em>.bind()<\/em>, <em>.live()<\/em> y <em>.delegate()<\/em>. Su funcionalidad es simple, recibe 3 par\u00e1metros, tipo de evento, selector (opcional) y funci\u00f3n. Si le pasamos un selector es un <em>.delegate()<\/em>, caso contrario un <em>.live()<\/em>:\r\n\r\n[js]\r\n\/\/ bind:\r\n$('a').bind('click', function(){ });\r\n$('a').on('click', function(){ });\r\n\r\n\/\/ live:\r\n$('a').live('click', function(){ });\r\n$(document).on('click', 'a', function(){ });\r\n\r\n\/\/ delegate:\r\n$('div').delegate('a', 'click', function(){ });\r\n$('div').on('click', 'a', function(){ });\r\n\r\n\/\/desligar evento\r\n\/\/ $('div').off('click', 'a');\r\n[\/js]\r\n\r\nAsi que si tienen la posibilidad de utilizar jQuery desde 1.7 usen el .on() y se pueden olvidar de todo lo que explique mas arriba :P\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 18 Apr 2012 09:50:26 +0000","created_by":1,"updated_at":"Wed, 18 Apr 2012 09:50:26 +0000","updated_by":1,"published_at":"Wed, 18 Apr 2012 09:50:26 +0000","published_by":1},{"id":1939,"title":"Patrones: Module y Namespace","slug":"patrones-module-y-namespace","markdown":"\nEs muy com\u00fan cuando tenemos una pagina web y tenemos que darle un poco de \"sals\u00f3n\" autom\u00e1ticamente creamos un archivo js y tiramos funciones indefinidamente. Esto no esta bueno, si bien todo parece funcionar genial y nos sentimos bien por eso, despues de unas 5 o 6 funciones nuestro c\u00f3digo empieza a volverse un poco feo. Para evitar esto, lo mejor es empezar a pensar en patrones de dise\u00f1o en javascript, en vez de tirar funciones, ordenemos nuestro c\u00f3digo y usemos javascript como lenguaje y no como un medio de scripting desordenado.\n\n#### Patr\u00f3n M\u00f3dulo\n\n [js] var miFuncion = function() {}; miFuncion = miFuncion(); [\/js] Extra\u00f1o, almacenamos una funci\u00f3n en miFuncion y luego pisamos su valor con la ejecuci\u00f3n de esa funci\u00f3n. Y si ahora acortamos el c\u00f3digo?: [js] var miFuncion = ( function(){} )(); [\/js] Bien, ahora tenemos dentro de miFuncion una funcion ya ejecutada... Ahora vamos a un ejemplo mas real, cambiemos el nombre por *suma* y agreguemos una varibale *total*. [js] var suma = (function() { var total = 0; })(); [\/js] Pero no tenemos acceso a *total*, asi que vamos a retornar un objeto que nos de acceso: [js] var suma = (function() { var total = 0; return { sumar: function(a, b){ var sum = a + b; total += sum; return sum; }, getTotal: function(){ return total; } }; })(); [\/js] Ah\u00e1!, o sea que desde afuera no tenemos forma de cambiar *total*, pero si llamamos a *sumar* podemos modificar su valor y obtenerlo con *getTotal*. Pensemos que *suma* guarda el resultado de una funcion ejecutada, mejor dicho, ***suma* guarda el retorno de la ejecuci\u00f3n de la funci\u00f3n con el contexto cuando fue ejecutada**. (si si, leelo 7 veces porque ahi est\u00e1 el secreto) Eso suena piola, ahora vamos a ordenarlo, porque necesitamos un m\u00f3dulo resta tambien: #### Patr\u00f3n Namespace\n\n Creemos un nuevo modulo maths donde vamos a poner nuestros 2 *sub-modulos* suma y resta: [js] var maths = maths || {}; maths.suma = (function() { var total = 0; return { sumar: function(a, b){ var sum = a + b; total += sum; return sum; }, getTotal: function(){ return total; } }; })(); maths.resta = (function() { var total = 0; return { restar: function(a, b){ var dif = a - b; total += dif; return dif; }, getTotal: function(){ return total; } }; })(); maths.suma.sumar(20, 40); \/\/retorna 60 maths.suma.sumar(10, 10); \/\/retorna 20 maths.suma.getTotal(); \/\/retorna 80 maths.resta.restar(40, 20); \/\/retorna 20 maths.resta.restar(10, 10); \/\/retorna 0 maths.resta.getTotal(); \/\/retorna 20 [\/js] En la primer linea nos aseguramos de no pisar una declaracion anterior, si ya hay una, usamos esa, sino creamos un objeto vacio ([pueden ver mas de ese || en este post](http:\/\/fernetjs.com\/2012\/04\/valores-falsos-y-verdaderos\/ \"Valores falsos y verdaderos: || y &&\")). Y despu\u00e9s, ya que en javascript podemos crear propiedades sin problemas en cualquier momento, simplemente le agregamos 2 propiedades, en las cuales creamos dos m\u00f3dulos. El problema que encontramos en esto es el testeo, como testeamos esto?, como podemos armar un test donde podamos comprobar que despues de sumar un valor, x contenga el valor que esperamos? ... escucho ofertas \n","html":"Es muy com\u00fan cuando tenemos una pagina web y tenemos que darle un poco de \"sals\u00f3n\" autom\u00e1ticamente creamos un archivo js y tiramos funciones indefinidamente. Esto no esta bueno, si bien todo parece funcionar genial y nos sentimos bien por eso, despues de unas 5 o 6 funciones nuestro c\u00f3digo empieza a volverse un poco feo.\r\n\r\nPara evitar esto, lo mejor es empezar a pensar en patrones de dise\u00f1o en javascript, en vez de tirar funciones, ordenemos nuestro c\u00f3digo y usemos javascript como lenguaje y no como un medio de scripting desordenado.\r\n\r\n<h4>Patr\u00f3n M\u00f3dulo<\/h4>\r\n[js]\r\nvar miFuncion = function() {};\r\nmiFuncion = miFuncion();\r\n[\/js]\r\n\r\nExtra\u00f1o, almacenamos una funci\u00f3n en miFuncion y luego pisamos su valor con la ejecuci\u00f3n de esa funci\u00f3n.\r\nY si ahora acortamos el c\u00f3digo?:\r\n\r\n[js]\r\nvar miFuncion = ( function(){} )();\r\n[\/js]\r\n\r\nBien, ahora tenemos dentro de miFuncion una funcion ya ejecutada...\r\nAhora vamos a un ejemplo mas real, cambiemos el nombre por <em>suma<\/em> y agreguemos una varibale <em>total<\/em>.\r\n\r\n[js]\r\nvar suma = (function() {\r\n  var total = 0;\r\n})();\r\n[\/js]\r\n\r\nPero no tenemos acceso a <em>total<\/em>, asi que vamos a retornar un objeto que nos de acceso:\r\n\r\n[js]\r\nvar suma = (function() {\r\n  var total = 0;\r\n\r\n  return {\r\n    sumar: function(a, b){\r\n      var sum = a + b;\r\n      total += sum;\r\n      return sum;\r\n    },\r\n    getTotal: function(){\r\n      return total;\r\n    }\r\n  };\r\n})();\r\n[\/js]\r\n\r\nAh\u00e1!, o sea que desde afuera no tenemos forma de cambiar <em>total<\/em>, pero si llamamos a <em>sumar<\/em> podemos modificar su valor y obtenerlo con <em>getTotal<\/em>.\r\n\r\nPensemos que <em>suma<\/em> guarda el resultado de una funcion ejecutada, mejor dicho, <strong><em>suma<\/em> guarda el retorno de la ejecuci\u00f3n de la funci\u00f3n con el contexto cuando fue ejecutada<\/strong>. (si si, leelo 7 veces porque ahi est\u00e1 el secreto)\r\n\r\nEso suena piola, ahora vamos a ordenarlo, porque necesitamos un m\u00f3dulo resta tambien:\r\n\r\n<h4>Patr\u00f3n Namespace<\/h4>\r\nCreemos un nuevo modulo maths donde vamos a poner nuestros 2 <em>sub-modulos<\/em> suma y resta:\r\n\r\n[js]\r\nvar maths = maths || {};\r\n\r\nmaths.suma = (function() {\r\n  var total = 0;\r\n\r\n  return {\r\n    sumar: function(a, b){\r\n      var sum = a + b;\r\n      total += sum;\r\n      return sum;\r\n    },\r\n    getTotal: function(){\r\n      return total;\r\n    }\r\n  };\r\n})();\r\n\r\nmaths.resta = (function() {\r\n  var total = 0;\r\n\r\n  return {\r\n    restar: function(a, b){\r\n      var dif = a - b;\r\n      total += dif;\r\n      return dif;\r\n    },\r\n    getTotal: function(){\r\n      return total;\r\n    }\r\n  };\r\n})();\r\n\r\nmaths.suma.sumar(20, 40); \/\/retorna 60\r\nmaths.suma.sumar(10, 10); \/\/retorna 20\r\nmaths.suma.getTotal(); \/\/retorna 80\r\n\r\nmaths.resta.restar(40, 20); \/\/retorna 20\r\nmaths.resta.restar(10, 10); \/\/retorna 0\r\nmaths.resta.getTotal(); \/\/retorna 20\r\n[\/js]\r\n\r\nEn la primer linea nos aseguramos de no pisar una declaracion anterior, si ya hay una, usamos esa, sino creamos un objeto vacio (<a href=\"http:\/\/fernetjs.com\/2012\/04\/valores-falsos-y-verdaderos\/\" title=\"Valores falsos y verdaderos: || y &&\">pueden ver mas de ese || en este post<\/a>). Y despu\u00e9s, ya que en javascript podemos crear propiedades sin problemas en cualquier momento, simplemente le agregamos 2 propiedades, en las cuales creamos dos m\u00f3dulos.\r\n\r\nEl problema que encontramos en esto es el testeo, como testeamos esto?, como podemos armar un test donde podamos comprobar que despues de sumar un valor, x contenga el valor que esperamos? ... escucho ofertas\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 14 May 2012 23:35:57 +0000","created_by":1,"updated_at":"Mon, 14 May 2012 23:44:57 +0000","updated_by":1,"published_at":"Mon, 14 May 2012 23:35:57 +0000","published_by":1},{"id":1929,"title":"Express View Engines","slug":"express-view-engines","markdown":"\nComo vimos en el [post anterior de ExpressJS](http:\/\/fernetjs.com\/2012\/03\/creando-un-server-con-expressjs\/ \"Creando un server con ExpressJS\"), podemos referenciar a nuestro WebFramework con el ViewEngine que elijamos, vamos a ver 2 opciones de VisionMedia: EJS y Jade, y por \u00faltimo Mustache. Ambas opciones se instalan desde NPM: [c] npm install ejs npm install jade [\/c]\n\n> Ejs, jade, mustache, etc. son paquetes externos a Express. Por lo que hay que instalarlos por npm aparte.\n\n#### Configurando un ViewEngine en Express\n\n El objetivo de los view engines en express es que podamos definir a nuestro gusto como renderizar la vista utilizando templates. Ejs y Jade son los primeros que salieron con Express, hoy en dia tenemos mas opciones como jQuery Template, Mustache, etc. Siguiendo con la estructura, creamos el archivo nuevo lenguajes.ejs donde vamos a tener nuestra vista. [c highlight=\"6,7\"] \/app-root \/models \/controllers \/views lenguajes.ejs \/public \/images \/styles \/scripts \/tests \/utils app.js package.json [\/c] Luego, configuramos el server express con el view engine: [js] var express = require('express'), app = express.createServer(); app.set('views', __dirname + '\/views'); app.set('view engine', 'ejs'); app.get('\/', function(req, res){ res.render('lenguajes', { title: 'Lenguajes de Programacion', lenguajes: ['javascript', 'java', '.net', 'python', 'php'] }); }); [\/js] En la primeras 2 lineas referenciamos a express y creamos un server. En la linea 04 le decimos a express donde vamos a guardar las vistas y en la 05 le especificamos el view engine a utilizar. #### EJS\n\n Ejs es el mas simple, ya que se parece mucho a otros lenguajes como Java o .NET. Con Ejs la vista nos quedaria de esta forma: [html]    <title><%= title %><\/title>   <% if (lenguajes.length) { %> <ul> <% lenguajes.forEach(function(lenguaje){ %> <li><%= lenguaje %><\/li> <% }) %> <\/ul> <% } %>   [\/html] [Github Ejs](http:\/\/github.com\/visionmedia\/ejs)#### Jade\n\n Jade es bastante diferente, ya que es mas apuntando a [ZenCoding](http:\/\/code.google.com\/p\/zen-coding\/), no exactamente eso, pero es divertido: [js] !!! html head title= title body - if (lenguajes.length) ul - lenguajes.forEach(function(lenguaje){ li= lenguaje - }) [\/js] [Github Jade](http:\/\/github.com\/visionmedia\/jade)#### Mustache\n\n Este es interesante ya que el template queda bastante mas limpio, es decir, no tiene condicionales ni forEachs. Por lo que no es para cualquier cosa, pero si armas templates simple (como el de arriba) queda mucho mas limpio tu view. [html]    <title>{{title}}<\/title>   <ul> {{# lenguajes}} <li>{{.}}<\/li> {{\/ lenguajes}} <\/ul>   [\/html] [Github Mustache](http:\/\/mustache.github.com\/) Como dije antes hay muchos mas, para cerrar les dejo [Consolidate.js](https:\/\/github.com\/visionmedia\/consolidate.js) es un repositorio de VisionMedia donde consolidan todos los templates, para que no estemos referenciando a cada uno en especial. > En Consolidate mustache est\u00e1 dentro de hogan y jqueryTmpl en jqtpl\n\n\n","html":"Como vimos en el <a href=\"http:\/\/fernetjs.com\/2012\/03\/creando-un-server-con-expressjs\/\" title=\"Creando un server con ExpressJS\">post anterior de ExpressJS<\/a>, podemos referenciar a nuestro WebFramework con el ViewEngine que elijamos, vamos a ver 2 opciones de VisionMedia: EJS y Jade, y por \u00faltimo Mustache.\r\n\r\nAmbas opciones se instalan desde NPM:\r\n\r\n[c]\r\nnpm install ejs\r\nnpm install jade\r\n[\/c]\r\n\r\n<blockquote>\r\nEjs, jade, mustache, etc. son paquetes externos a Express. Por lo que hay que instalarlos por npm aparte.\r\n<\/blockquote>\r\n\r\n<h4>Configurando un ViewEngine en Express<\/h4>\r\nEl objetivo de los view engines en express es que podamos definir a nuestro gusto como renderizar la vista utilizando templates.\r\nEjs y Jade son los primeros que salieron con Express, hoy en dia tenemos mas opciones como jQuery Template, Mustache, etc.\r\n\r\nSiguiendo con la estructura, creamos el archivo nuevo lenguajes.ejs donde vamos a tener nuestra vista.\r\n\r\n[c highlight=\"6,7\"]\r\n\/app-root\r\n  \/models\r\n\r\n  \/controllers\r\n\r\n  \/views\r\n    lenguajes.ejs\r\n\r\n  \/public\r\n    \/images\r\n    \/styles\r\n    \/scripts\r\n\r\n  \/tests\r\n\r\n  \/utils\r\n\r\n  app.js\r\n  package.json\r\n[\/c]\r\n\r\nLuego, configuramos el server express con el view engine:\r\n\r\n[js]\r\nvar express = require('express'),\r\n  app = express.createServer();\r\n\r\napp.set('views', __dirname + '\/views');\r\napp.set('view engine', 'ejs');\r\n\r\napp.get('\/', function(req, res){\r\n  res.render('lenguajes', {\r\n    title: 'Lenguajes de Programacion',\r\n    lenguajes: ['javascript', 'java', '.net', 'python', 'php']\r\n  });\r\n});\r\n[\/js]\r\n\r\nEn la primeras 2 lineas referenciamos a express y creamos un server. En la linea 04 le decimos a express donde vamos a guardar las vistas y en la 05 le especificamos el view engine a utilizar.\r\n\r\n<h4>EJS<\/h4>\r\n\r\nEjs es el mas simple, ya que se parece mucho a otros lenguajes como Java o .NET. Con Ejs la vista nos quedaria de esta forma:\r\n\r\n[html]\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;&lt;%= title %&gt;&lt;\/title&gt;\r\n  &lt;\/head&gt;\r\n  &lt;body&gt;\r\n  &lt;% if (lenguajes.length) { %&gt;\r\n    &lt;ul&gt;\r\n      &lt;% lenguajes.forEach(function(lenguaje){ %&gt;\r\n        &lt;li&gt;&lt;%= lenguaje %&gt;&lt;\/li&gt;\r\n      &lt;% }) %&gt;\r\n    &lt;\/ul&gt;\r\n  &lt;% } %&gt;\r\n  &lt;\/body&gt;\r\n&lt;\/html&gt;\r\n[\/html]\r\n\r\n<a href=\"http:\/\/github.com\/visionmedia\/ejs\">Github Ejs<\/a>\r\n\r\n<h4>Jade<\/h4>\r\n\r\nJade es bastante diferente, ya que es mas apuntando a <a href=\"http:\/\/code.google.com\/p\/zen-coding\/\">ZenCoding<\/a>, no exactamente eso, pero es divertido:\r\n\r\n[js]\r\n!!! html\r\n  head\r\n    title= title\r\n  body\r\n    - if (lenguajes.length)\r\n    ul\r\n      - lenguajes.forEach(function(lenguaje){\r\n        li= lenguaje\r\n      - })\r\n[\/js]\r\n\r\n<a href=\"http:\/\/github.com\/visionmedia\/jade\">Github Jade<\/a>\r\n\r\n<h4>Mustache<\/h4>\r\nEste es interesante ya que el template queda bastante mas limpio, es decir, no tiene condicionales ni forEachs. Por lo que no es para cualquier cosa, pero si armas templates simple (como el de arriba) queda mucho mas limpio tu view.\r\n\r\n[html]\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;{{title}}&lt;\/title&gt;\r\n  &lt;\/head&gt;\r\n  &lt;body&gt;\r\n  &lt;ul&gt;\r\n  {{# lenguajes}}\r\n    &lt;li&gt;{{.}}&lt;\/li&gt;\r\n  {{\/ lenguajes}}\r\n  &lt;\/ul&gt;\r\n  &lt;\/body&gt;\r\n&lt;\/html&gt;\r\n[\/html]\r\n\r\n<a href=\"http:\/\/mustache.github.com\/\">Github Mustache<\/a>\r\n\r\nComo dije antes hay muchos mas, para cerrar les dejo <a href=\"https:\/\/github.com\/visionmedia\/consolidate.js\">Consolidate.js<\/a> es un repositorio de VisionMedia donde consolidan todos los templates, para que no estemos referenciando a cada uno en especial.\r\n\r\n<blockquote>\r\nEn Consolidate mustache est\u00e1 dentro de hogan y jqueryTmpl en jqtpl\r\n<\/blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 17 May 2012 10:52:16 +0000","created_by":1,"updated_at":"Thu, 17 May 2012 10:52:16 +0000","updated_by":1,"published_at":"Thu, 17 May 2012 10:52:16 +0000","published_by":1},{"id":1619,"title":"A pantalla completa","slug":"a-pantalla-completa","markdown":"\nFullscreen API\n--------------\n\n La implementaci\u00f3n y definici\u00f3n de esta API supone mejoras realmente necesarias dentro de lo que es el desarrollo web. La fullscreen API potencia muchos componentes ya existentes en HTML5. Por ejemplo, el tag video, est\u00e1 muy bueno y todo, pero la pantalla completa es una vuelta de rosca que \u00a0faltaba.\u00a0De la misma manera, ahora se puede desarrollar juegos o crear visualizaciones impactantes en un canvas y mostrarlas en pantalla completa... Eso suma bastante en muchos casos! Al momento de escribir este post, la API para fullscreen no est\u00e1 cerrada, y existen [solo un par](http:\/\/caniuse.com\/#search=fullscreen \"caniuse fullscreen\") de implementaciones tempranas accesibles usando prefijos del vendor. Las especificaciones pueden ser encontradas en [el sitio de la W3C](http:\/\/dvcs.w3.org\/hg\/fullscreen\/raw-file\/tip\/Overview.html \"Est\u00e1ndar fullscreen\"). La posta\n--------\n\n Para ilustrar un poco esto, tom\u00e9 la p\u00e1gina de 404 de fernetjs y la edit\u00e9 para que el invaders soporte pantalla completa: [http:\/\/fernetjs.com\/notfound](http:\/\/fernetjs.com\/notfound \"error 404\") (para switchear a fullscreen, presionar ctrl+enter; para salir esc). Los cambios relacionados que fueron necesarios pueden ser observados [en este commit](https:\/\/github.com\/MatiasArriola\/invaders404\/commit\/ddd9cbe83505d617ed007a876c8940e5690f812e)\u00a0(ignorar los espacios, mi error jeje). En este caso, el c\u00f3digo del m\u00e9todo que llevar\u00eda el elemento canvas a estar en pantalla completa ser\u00eda: [js] var canvas = this.canvas, requestFullscreen = canvas.requestFullscreen || canvas.mozRequestFullScreen || canvas.webkitRequestFullScreen; if(requestFullscreen){ requestFullscreen.call(canvas); } [\/js] De la misma manera, para cancelarlo: [js] var cancelFullscreen = document.cancelFullscreen || document.mozCancelFullScreen || document.webkitCancelFullScreen; if(cancelFullscreen){ cancelFullscreen.call(document); } [\/js] Existe un evento que se dispara cada vez que se produce el switch hacia o desde fullscreen. Este es misteriosamente (?) llamado fullscreenchange, que tambi\u00e9n viene acompa\u00f1ado por sus hermanos mozfullscreenchange y webkitfullscreenchange. De la misma manera, existe un flag a nivel document que nos indica si actualmente se encuentra en pantalla completa, o no. Ejemplo: [js] document.addEventListener(\"fullscreenchange\", function () { \/\/ Aca podes reordenar todo el contenido, o hacer cosas copadas console.log((document.fullscreen)? \"Ahora estoy en fullscreen\" : \"Ahora no\"); }, false); document.addEventListener(\"mozfullscreenchange\", function () { console.log((document.mozFullScreen)? \"estoy en fullscreen\" : \"ya no\"); }, false); document.addEventListener(\"webkitfullscreenchange\", function () { console.log((document.webkitIsFullScreen)? \"Ahora estoy en fullscreen\" : \"Ahora no\"); }, false); [\/js] Cabe aclarar que no s\u00f3lo se puede aplicar a un video o a un canvas, sino que tambien a un div, u otros elementos del DOM. El d\u00eda de hoy\n-------------\n\n Hay varias cosas, y comportamientos que tenemos que normalizar para que a esta altura ir a pantalla completa se comporte de la misma manera en distintos browsers. Evidentemente, en este caso aparecen los prefijos del vendor, en js y css. O sea que dependiendo del navegador, para hacer una misma cosa, tenemos que llamar a ciertas funciones. Uno de los temas es que en firefox cuando pasas a fullscreen, todo el contenido se ajusta a la pantalla. En cambio, en browsers basados en webkit como el chrome, el contenido queda con el tama\u00f1o original, y si lo queremos ajustar, lo tenemos que hacer con CSS y los pseudo-selectores. [css] :fullscreen { width: 100% !important; height: 100% !important; } :-webkit-full-screen { width: 100% !important; height: 100% !important; } -moz-full-screen { width: 100% !important; height: 100% !important; } [\/css] Otra cosa, seg\u00fan mis pruebas, es que var\u00eda por browser cuando se puede disparar el fullscreen. En Chrome por ejemplo, no se va a poder pasar a fullscreen si la llamada a requestFullscreen no es consecuencia de una interacci\u00f3n de usuario. Por ejemplo, si tiras un requestFullscreen desde la consola, no se va a hacer el paso a fullscreen. La \u00faltima diferencia en comportamiento que observ\u00e9, y no menor, es el input del usuario por teclado. En Chrome, para permitir a full el input del teclado en fullscreen usando chrome, hay que pasarle como par\u00e1metro Element.ALLOW_KEYBOARD_INPUT a la funci\u00f3n requestFullscreen. [js] elemento.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT); [\/js] Existen algunas libraries que tratan de solucionar algunas de esas diferencias, una de las mas conocidas es [screenfull.js](https:\/\/github.com\/sindresorhus\/screenfull.js\/ \"screenfull.js en github\"); aunque estoy seguro de que hay muchas m\u00e1s. ### Otros links\n\n[https:\/\/developer.mozilla.org\/en\/DOM\/Using_full-screen_mode](https:\/\/developer.mozilla.org\/en\/DOM\/Using_full-screen_mode \"DOM\/Using_full-screen_mode\") [http:\/\/hacks.mozilla.org\/2012\/01\/using-the-fullscreen-api-in-web-browsers\/](http:\/\/hacks.mozilla.org\/2012\/01\/using-the-fullscreen-api-in-web-browsers\/ \"using-the-fullscreen-api-in-web-browsers\") [http:\/\/updates.html5rocks.com\/2011\/10\/Let-Your-Content-Do-the-Talking-Fullscreen-API](http:\/\/updates.html5rocks.com\/2011\/10\/Let-Your-Content-Do-the-Talking-Fullscreen-API \"Let-Your-Content-Do-the-Talking-Fullscreen-API\")\n","html":"<h2>Fullscreen API<\/h2>\r\nLa implementaci\u00f3n y definici\u00f3n de esta API supone mejoras realmente necesarias dentro de lo que es el desarrollo web.\r\nLa fullscreen API potencia muchos componentes ya existentes en HTML5. Por ejemplo, el tag video, est\u00e1 muy bueno y todo, pero la pantalla completa es una vuelta de rosca que \u00a0faltaba.\u00a0De la misma manera, ahora se puede desarrollar juegos o crear visualizaciones impactantes en un canvas y mostrarlas en pantalla completa... Eso suma bastante en muchos casos!\r\n\r\nAl momento de escribir este post, la API para fullscreen no est\u00e1 cerrada, y existen <a title=\"caniuse fullscreen\" href=\"http:\/\/caniuse.com\/#search=fullscreen\" target=\"_blank\">solo un par<\/a> de implementaciones tempranas accesibles usando prefijos del vendor.\r\n\r\nLas especificaciones pueden ser encontradas en <a title=\"Est\u00e1ndar fullscreen\" href=\"http:\/\/dvcs.w3.org\/hg\/fullscreen\/raw-file\/tip\/Overview.html\" target=\"_blank\">el sitio de la W3C<\/a>.\r\n<h2>La posta<\/h2>\r\nPara ilustrar un poco esto, tom\u00e9 la p\u00e1gina de 404 de fernetjs y la edit\u00e9 para que el invaders soporte pantalla completa:\r\n<a title=\"error 404\" href=\"http:\/\/fernetjs.com\/notfound\" target=\"_blank\">http:\/\/fernetjs.com\/notfound<\/a> (para switchear a fullscreen, presionar ctrl+enter; para salir esc).\r\n\r\nLos cambios relacionados que fueron necesarios pueden ser observados <a href=\"https:\/\/github.com\/MatiasArriola\/invaders404\/commit\/ddd9cbe83505d617ed007a876c8940e5690f812e\">en este commit<\/a>\u00a0(ignorar los espacios, mi error jeje).\r\n\r\nEn este caso, el c\u00f3digo del m\u00e9todo que llevar\u00eda el elemento canvas a estar en pantalla completa ser\u00eda:\r\n\r\n[js]\r\nvar canvas = this.canvas,\r\n    requestFullscreen = canvas.requestFullscreen || canvas.mozRequestFullScreen || canvas.webkitRequestFullScreen;\r\nif(requestFullscreen){\r\n    requestFullscreen.call(canvas);\r\n}\r\n[\/js]\r\n\r\nDe la misma manera, para cancelarlo:\r\n\r\n[js]\r\nvar cancelFullscreen = document.cancelFullscreen || document.mozCancelFullScreen || document.webkitCancelFullScreen;\r\nif(cancelFullscreen){\r\n\tcancelFullscreen.call(document);\r\n}\r\n[\/js]\r\n\r\nExiste un evento que se dispara cada vez que se produce el switch hacia o desde fullscreen. Este es misteriosamente (?) llamado fullscreenchange, que tambi\u00e9n viene acompa\u00f1ado por sus hermanos mozfullscreenchange y webkitfullscreenchange.\r\nDe la misma manera, existe un flag a nivel document que nos indica si actualmente se encuentra en pantalla completa, o no. Ejemplo:\r\n\r\n[js]\r\ndocument.addEventListener(&quot;fullscreenchange&quot;, function () {\r\n    \/\/ Aca podes reordenar todo el contenido, o hacer cosas copadas\r\n    console.log((document.fullscreen)? &quot;Ahora estoy en fullscreen&quot; : &quot;Ahora no&quot;);\r\n}, false);\r\n\r\ndocument.addEventListener(&quot;mozfullscreenchange&quot;, function () {\r\n    console.log((document.mozFullScreen)? &quot;estoy en fullscreen&quot; : &quot;ya no&quot;);\r\n}, false);\r\n\r\ndocument.addEventListener(&quot;webkitfullscreenchange&quot;, function () {\r\n    console.log((document.webkitIsFullScreen)? &quot;Ahora estoy en fullscreen&quot; : &quot;Ahora no&quot;);\r\n}, false);\r\n[\/js]\r\n\r\nCabe aclarar que no s\u00f3lo se puede aplicar a un video o a un canvas, sino que tambien a un div, u otros elementos del DOM.\r\n<h2>El d\u00eda de hoy<\/h2>\r\nHay varias cosas, y comportamientos que tenemos que normalizar para que a esta altura ir a pantalla completa se comporte de la misma manera en distintos browsers.\r\nEvidentemente, en este caso aparecen los prefijos del vendor, en js y css. O sea que dependiendo del navegador, para hacer una misma cosa, tenemos que llamar a ciertas funciones.\r\n\r\nUno de los temas es que en firefox cuando pasas a fullscreen, todo el contenido se ajusta a la pantalla. En cambio, en browsers basados en webkit como el chrome, el contenido queda con el tama\u00f1o original, y si lo queremos ajustar, lo tenemos que hacer con CSS y los pseudo-selectores.\r\n\r\n[css]\r\n        :fullscreen {\r\n                width: 100% !important;\r\n                height: 100% !important;\r\n        }\r\n        :-webkit-full-screen {\r\n                width: 100% !important;\r\n                height: 100% !important;\r\n        }\r\n        -moz-full-screen {\r\n                width: 100% !important;\r\n                height: 100% !important;\r\n        }\r\n[\/css]\r\n\r\nOtra cosa, seg\u00fan mis pruebas, es que var\u00eda por browser cuando se puede disparar el fullscreen. En Chrome por ejemplo, no se va a poder pasar a fullscreen si la llamada a requestFullscreen no es consecuencia de una interacci\u00f3n de usuario. Por ejemplo, si tiras un requestFullscreen desde la consola, no se va a hacer el paso a fullscreen.\r\n\r\nLa \u00faltima diferencia en comportamiento que observ\u00e9, y no menor, es el input del usuario por teclado. En Chrome, para permitir a full el input del teclado en fullscreen usando chrome, hay que pasarle como par\u00e1metro Element.ALLOW_KEYBOARD_INPUT a la funci\u00f3n requestFullscreen.\r\n[js]\r\nelemento.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\r\n[\/js]\r\n\r\nExisten algunas libraries que tratan de solucionar algunas de esas diferencias, una de las mas conocidas es \r\n<a href=\"https:\/\/github.com\/sindresorhus\/screenfull.js\/\" title=\"screenfull.js en github\" target=\"_blank\">screenfull.js<\/a>; aunque estoy seguro de que hay muchas m\u00e1s.\r\n\r\n<h3>Otros links<\/h3>\r\n<a href=\"https:\/\/developer.mozilla.org\/en\/DOM\/Using_full-screen_mode\" title=\"DOM\/Using_full-screen_mode\" target=\"_blank\">https:\/\/developer.mozilla.org\/en\/DOM\/Using_full-screen_mode<\/a>\r\n<a href=\"http:\/\/hacks.mozilla.org\/2012\/01\/using-the-fullscreen-api-in-web-browsers\/\" title=\"using-the-fullscreen-api-in-web-browsers\" target=\"_blank\">http:\/\/hacks.mozilla.org\/2012\/01\/using-the-fullscreen-api-in-web-browsers\/<\/a>\r\n<a href=\"http:\/\/updates.html5rocks.com\/2011\/10\/Let-Your-Content-Do-the-Talking-Fullscreen-API\" title=\"Let-Your-Content-Do-the-Talking-Fullscreen-API\" target=\"_blank\">http:\/\/updates.html5rocks.com\/2011\/10\/Let-Your-Content-Do-the-Talking-Fullscreen-API<\/a>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Wed, 23 May 2012 23:16:55 +0000","created_by":1,"updated_at":"Wed, 23 May 2012 23:16:55 +0000","updated_by":1,"published_at":"Wed, 23 May 2012 23:16:55 +0000","published_by":1},{"id":2096,"title":"querySelector y querySelectorAll existen","slug":"queryselector-y-queryselectorall-existen","markdown":"\nEn el pasado me encontr\u00e9 utilizando jQuery principalmente por los selectores y la potencia que me daban a la hora de trabajar y referenciar a elementos del DOM. Poco m\u00e1s tarde, me d\u00ed cuenta de que en varias oportunidades no era realmente necesario incluir todo jquery, sino que con solo un motor o biblioteca especializada en \u00a0selectores como [sizzle](http:\/\/sizzlejs.com\/ \"sizzle\")\u00a0bastar\u00eda. Hoy quiero compartir que querySelector y querySelectorAll existen.\n\n##### Qu\u00e9 significa esto?\n\n Es importante saber que a la hora de trabajar con el DOM no s\u00f3lo estamos en la discusi\u00f3n de ir con los amigazos getElementById y getElementsByTagName o con bibliotecas como jQuery. Con js plano, puro, vanilla, o como udsted quiera llamarle, tambi\u00e9n podemos obtener elementos del DOM a partir de selectores basados en CSS. Este post est\u00e1 hecho porque s\u00e9 que hay mucha gente que no est\u00e1 al tanto de querySelector. O de que tiene tan buen soporte; y yo me incluyo dentro dentro de este \u00faltimo grupo. No hace mucho me d\u00ed cuenta de que el tiempo hab\u00eda pasado y que [casi todos los browsers se lo bancan](http:\/\/caniuse.com\/queryselector \"soporte querySelector\") lo m\u00e1s bien. ![copado](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/burns-ok.jpg \"Que piola!! cross-browser!\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ##### Uso\n\n querySelector es una funci\u00f3n que a partir de un selector, devuelve el primer elemento que matchea con ese selector, o null en caso de que no matchee con ning\u00fan elemento. [js] \/\/ obtengo el primer art\u00edculo var articulo = document.querySelector('article'), primerLinkDelArticulo = null; \/\/ checkeo si existe al menos un \"article\" if (articulo !== null){ \/\/ tambien puedo correr querySelector sobre un elemento (matchea hijos) primerLinkDelArticulo = articulo.querySelector('a'); } [\/js] querySelectorAll devuelve un array de elementos con los que el selector matchea. En caso de que esto no ocurra con ning\u00fan elemento, el resultado va a ser un array vac\u00edo (array con length === 0). [js] \/\/traigo todos los elementos con la clase warning var warnings = document.querySelectorAll('.warning'); if (warnings.length > 0){ throw new Error('que lo pario! que pas\u00f3??'); } [\/js] Obviamente, todo esto toma un poco m\u00e1s de sentido cuando tenemos selectores un poco m\u00e1s complejos.. un ejemplo un toque mas pr\u00e1ctico: [js] \/\/ los links que apuntan a un pdf var pdfs = document.querySelectorAll('a[href$=\".pdf\"]'); pdfs.forEach(function(aPdf){ console.log(aPdf.href); }); [\/js] En fin.. \u00e9stas funciones son una herramienta m\u00e1s a tener en cuenta - que en mi caso y algunos casos conocidos estaba siendo menospreciada y casi olvidada.\n","html":"En el pasado me encontr\u00e9 utilizando jQuery principalmente por los selectores y la potencia que me daban a la hora de trabajar y referenciar a elementos del DOM.\r\nPoco m\u00e1s tarde, me d\u00ed cuenta de que en varias oportunidades no era realmente necesario incluir todo jquery, sino que con solo un motor o biblioteca especializada en \u00a0selectores como <a title=\"sizzle\" href=\"http:\/\/sizzlejs.com\/\" target=\"_blank\">sizzle<\/a>\u00a0bastar\u00eda.\r\nHoy quiero compartir que querySelector y querySelectorAll existen.\r\n\r\n<h5>Qu\u00e9 significa esto?<\/h5>\r\nEs importante saber que a la hora de trabajar con el DOM no s\u00f3lo estamos en la discusi\u00f3n de ir con los amigazos getElementById y getElementsByTagName o con bibliotecas como jQuery.\r\nCon js plano, puro, vanilla, o como udsted quiera llamarle, tambi\u00e9n podemos obtener elementos del DOM a partir de selectores basados en CSS.\r\nEste post est\u00e1 hecho porque s\u00e9 que hay mucha gente que no est\u00e1 al tanto de querySelector. O de que tiene tan buen soporte; y yo me incluyo dentro dentro de este \u00faltimo grupo. No hace mucho me d\u00ed cuenta de que el tiempo hab\u00eda pasado y que <a href=\"http:\/\/caniuse.com\/queryselector\" title=\"soporte querySelector\" target=\"_blank\">casi todos los browsers se lo bancan<\/a> lo m\u00e1s bien. \r\n\r\n<img class=\"alignleft size-full wp-image-2097\" title=\"Que piola!! cross-browser!\" src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/burns-ok.jpg\" alt=\"copado\" width=\"251\" height=\"224\" \/>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n<h5>Uso<\/h5>\r\nquerySelector es una funci\u00f3n que a partir de un selector, devuelve el primer elemento que matchea con ese selector, o null en caso de que no matchee con ning\u00fan elemento.\r\n[js]\r\n\/\/ obtengo el primer art\u00edculo\r\nvar articulo = document.querySelector('article'),\r\n    primerLinkDelArticulo = null;\r\n\/\/ checkeo si existe al menos un &quot;article&quot;\r\nif (articulo !== null){\r\n    \/\/ tambien puedo correr querySelector sobre un elemento (matchea hijos)\r\n    primerLinkDelArticulo = articulo.querySelector('a');\r\n}\r\n[\/js]\r\nquerySelectorAll devuelve un array de elementos con los que el selector matchea. En caso de que esto no ocurra con ning\u00fan elemento, el resultado va a ser un array vac\u00edo (array con length === 0).\r\n[js]\r\n\/\/traigo todos los elementos con la clase warning\r\nvar warnings = document.querySelectorAll('.warning');\r\nif (warnings.length &gt; 0){\r\n    throw new Error('que lo pario! que pas\u00f3??');\r\n}\r\n[\/js]\r\n\r\nObviamente, todo esto toma un poco m\u00e1s de sentido cuando tenemos selectores un poco m\u00e1s complejos.. un ejemplo un toque mas pr\u00e1ctico:\r\n[js]\r\n\/\/ los links que apuntan a un pdf\r\nvar pdfs = document.querySelectorAll('a[href$=&quot;.pdf&quot;]');\r\npdfs.forEach(function(aPdf){\r\n    console.log(aPdf.href);\r\n});\r\n[\/js]\r\n\r\nEn fin.. \u00e9stas funciones son una herramienta m\u00e1s a tener en cuenta - que en mi caso y algunos casos conocidos estaba siendo menospreciada y casi olvidada.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Sat, 02 Jun 2012 02:06:29 +0000","created_by":1,"updated_at":"Sat, 02 Jun 2012 02:06:29 +0000","updated_by":1,"published_at":"Sat, 02 Jun 2012 02:06:29 +0000","published_by":1},{"id":2118,"title":"Problemas de dise\u00f1o? Jamaica no problem","slug":"problemas-de-diseno-jamaica-no-problem","markdown":"\n[CodeStre.am](http:\/\/codestre.am\/ \"CodeStre.am\") te permite grabar y\/o hacer streaming de tu terminal, es asi de simple como suena. Los cr\u00e9ditos van para @wat [iframe src=\"http:\/\/play.codestre.am\/embed\/42b172009e91278ffde1545d0\" frameborder=\"0\" width=\"660px\" height=\"400px\"] Si no podes verlo: [WTF JS by panchot](http:\/\/codestre.am\/853aabbe043c637f3450e8ab1 \"WTF JS by panchot\")\n","html":"<a href=\"http:\/\/codestre.am\/\" title=\"CodeStre.am\">CodeStre.am<\/a> te permite grabar y\/o hacer streaming de tu terminal, es asi de simple como suena.\r\n\r\nLos cr\u00e9ditos van para @wat\r\n\r\n[iframe src=\"http:\/\/play.codestre.am\/embed\/42b172009e91278ffde1545d0\" frameborder=\"0\" width=\"660px\" height=\"400px\"]\r\n\r\nSi no podes verlo: <a href=\"http:\/\/codestre.am\/853aabbe043c637f3450e8ab1\" title=\"WTF JS by panchot\">WTF JS by panchot<\/a>\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":13,"created_at":"Tue, 05 Jun 2012 16:59:24 +0000","created_by":1,"updated_at":"Wed, 13 Jun 2012 15:47:58 +0000","updated_by":1,"published_at":"Tue, 05 Jun 2012 16:59:24 +0000","published_by":1},{"id":2154,"title":"npm init, para empezar proyectos con el pie derecho","slug":"npm-init-para-empezar-proyectos-con-el-pie-derecho","markdown":"\nPara organizar y\/o compartir tus proyectos en node.js necesitas crear un archivo json nombrado package.json con un [formato determinado](http:\/\/npmjs.org\/doc\/json.html). Si bien no es una tarea demasiado ardua, es buena idea delegar al menos parte de la tarea a nuestro package manager amigo, en este caso [npm](http:\/\/npmjs.org). En este [codestream](http:\/\/codestre.am) vamos a ver como npm nos puede ayudar a crear nuestro package.json de una forma simple. Ubic\u00e1 tu terminal en la carpeta ra\u00edz de tu proyecto y segu\u00ed este peque\u00f1o paso: [iframe frameborder=\"0\" width=\"660px\" height=\"400px\" src=\"http:\/\/play.codestre.am\/embed\/7e00446b0d384004316a075c0\"] Si no podes verlo: [npm init by panchot](http:\/\/codestre.am\/c22ee0dc811070b974abc9448 \"npm init by panchot\")\n\n\n","html":"Para organizar y\/o compartir tus proyectos en node.js necesitas crear un archivo json nombrado package.json con un <a href=\"http:\/\/npmjs.org\/doc\/json.html\">formato determinado<\/a>. Si bien no es una tarea demasiado ardua, es buena idea delegar al menos parte de la tarea a nuestro package manager amigo, en este caso <a href=\"http:\/\/npmjs.org\">npm<\/a>.\r\n\r\nEn este <a href=\"http:\/\/codestre.am\">codestream<\/a> vamos a ver como npm nos puede ayudar a crear nuestro package.json de una forma simple.\r\n\r\nUbic\u00e1 tu terminal en la carpeta ra\u00edz de tu proyecto y segu\u00ed este peque\u00f1o paso:\r\n\r\n[iframe frameborder=\"0\" width=\"660px\" height=\"400px\" src=\"http:\/\/play.codestre.am\/embed\/7e00446b0d384004316a075c0\"]\r\n\r\nSi no podes verlo: <a href=\"http:\/\/codestre.am\/c22ee0dc811070b974abc9448\" title=\"npm init by panchot\">npm init by panchot<\/a>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":13,"created_at":"Wed, 13 Jun 2012 10:50:37 +0000","created_by":1,"updated_at":"Wed, 13 Jun 2012 15:47:01 +0000","updated_by":1,"published_at":"Wed, 13 Jun 2012 10:50:37 +0000","published_by":1},{"id":2192,"title":"Una excepci\u00f3n y chau proceso","slug":"una-excepcion-y-chau-proceso","markdown":"\nBueno, no s\u00e9 si te pas\u00f3 antes, pero si ocurre una excepci\u00f3n no manejada, corta el proceso :P Por ejemplo: tenemos nuestro WebServer genial corriendo en NodeJS y algo se nos pas\u00f3, algo que no esperabamos o alguna libreria explot\u00f3 ... chau server, se cae el proceso de NodeJS y por lo tanto nuestro WebServer muere con el :( Eso no suena nada bien ... Fuera de que el *try* y el *catch* son nuestros amigos, cometemos errores y hay situaciones en las que se nos pasa, y tampoco podemos garantizar los *catcheos* de excepciones de todas las librerias que usamos. Entonces, cual ser\u00eda el nivel m\u00e1s alto para poner un try catch?: el objeto global *process* ... ah\u00ed es cuando aparece un gran y maravilloso \"try catch\" para el *proceso* que nos puede \"garantizar\" (notese las comillas :P) que no se caiga al momento de explotar en mil colores: [js] process.on(\"uncaughtException\", function (err) { console.log('Seee vol\u00f3 en mil pedazos, pero el proceso sigue arriba'); console.log('Exception: ' + err.stack); }); [\/js] Nos suscribimos al evento \"uncaughtException\" del process y a partir de ahi nos queda logear o hacer lo que creamos necesario al momento de una explosi\u00f3n no calculada. Documentaci\u00f3n de Node para [Process Event Uncaughtexception](http:\/\/nodejs.org\/api\/process.html#process_event_uncaughtexception)\n\n### Librer\u00edas interesantes\n\n Pero eso no es todo: como dije antes nos \"garantiza\", pero entre comillas. Para estar completamente seguros tenemos alguna librerias: <dl><dt>[Nodemon](https:\/\/github.com\/remy\/nodemon)<\/dt><dd>Para ambiente de desarrollo, Nodemon vigila los archivos y si alguno se modifica re inicia le proceso<\/dd><dt>[Forever](https:\/\/github.com\/nodejitsu\/forever)<\/dt><dd>Una herramienta para asegurarnos que nuestro proceso corra por siempre, si cae vuelve arriba (se pueden configurar la cantidad de intentos y tambien usarlo dentro de la app NodeJS)<\/dd><dt>[Node Supervisor](https:\/\/github.com\/isaacs\/node-supervisor)<\/dt><dd>Basicamente hace lo mismo que las dos anteriores. Por linea de comando seteamos par\u00e1metros para vigilar, re-start onError, etc.<\/dd><dt>[LearnBoost: Up](https:\/\/github.com\/LearnBoost\/up)<\/dt><dd>Otra opcion piola de parte de LearnBoost<\/dd><\/dl> Yo no prob\u00e9 ninguna y estoy con ganas de arrancar, usaste alguna de esas?, otra? \n","html":"Bueno, no s\u00e9 si te pas\u00f3 antes, pero si ocurre una excepci\u00f3n no manejada, corta el proceso :P \r\nPor ejemplo: tenemos nuestro WebServer genial corriendo en NodeJS y algo se nos pas\u00f3, algo que no esperabamos o alguna libreria explot\u00f3 ... chau server, se cae el proceso de NodeJS y por lo tanto nuestro WebServer muere con el :(\r\n\r\nEso no suena nada bien ...\r\n\r\nFuera de que el <em>try<\/em> y el <em>catch<\/em> son nuestros amigos, cometemos errores y hay situaciones en las que se nos pasa, y tampoco podemos garantizar los <em>catcheos<\/em> de excepciones de todas las librerias que usamos. \r\n\r\nEntonces, cual ser\u00eda el nivel m\u00e1s alto para poner un try catch?: el objeto global <em>process<\/em> ... ah\u00ed es cuando aparece un gran y maravilloso \"try catch\" para el <em>proceso<\/em> que nos puede \"garantizar\" (notese las comillas :P) que no se caiga al momento de explotar en mil colores:\r\n\r\n[js]\r\nprocess.on(&quot;uncaughtException&quot;, function (err) { \r\n  console.log('Seee vol\u00f3 en mil pedazos, pero el proceso sigue arriba');\r\n  console.log('Exception: ' + err.stack);\r\n});\r\n[\/js]\r\n\r\nNos suscribimos al evento \"uncaughtException\" del process y a partir de ahi nos queda logear o hacer lo que creamos necesario al momento de una explosi\u00f3n no calculada.\r\n\r\nDocumentaci\u00f3n de Node para <a href=\"http:\/\/nodejs.org\/api\/process.html#process_event_uncaughtexception\">Process Event Uncaughtexception<\/a>\r\n\r\n<h3>Librer\u00edas interesantes<\/h3>\r\n\r\nPero eso no es todo: como dije antes nos \"garantiza\", pero entre comillas. Para estar completamente seguros tenemos alguna librerias:\r\n\r\n<dl>\r\n<dt><a href=\"https:\/\/github.com\/remy\/nodemon\">Nodemon<\/a><\/dt>\r\n<dd>Para ambiente de desarrollo, Nodemon vigila los archivos y si alguno se modifica re inicia le proceso<\/dd>\r\n<dt><a href=\"https:\/\/github.com\/nodejitsu\/forever\">Forever<\/a><\/dt>\r\n<dd>Una herramienta para asegurarnos que nuestro proceso corra por siempre, si cae vuelve arriba (se pueden configurar la cantidad de intentos y tambien usarlo dentro de la app NodeJS)<\/dd>\r\n<dt><a href=\"https:\/\/github.com\/isaacs\/node-supervisor\">Node Supervisor<\/a><\/dt>\r\n<dd>Basicamente hace lo mismo que las dos anteriores. Por linea de comando seteamos par\u00e1metros para vigilar, re-start onError, etc.<\/dd>\r\n<dt><a href=\"https:\/\/github.com\/LearnBoost\/up\">LearnBoost: Up<\/a><\/dt>\r\n<dd>Otra opcion piola de parte de LearnBoost<\/dd>\r\n<\/dl>\r\n\r\nYo no prob\u00e9 ninguna y estoy con ganas de arrancar, usaste alguna de esas?, otra? ","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 14 Jun 2012 11:30:17 +0000","created_by":1,"updated_at":"Thu, 12 Jul 2012 20:36:30 +0000","updated_by":1,"published_at":"Thu, 14 Jun 2012 11:30:17 +0000","published_by":1},{"id":2156,"title":"Del ofuscador al konami code ","slug":"del-ofuscador-al-konami-code","markdown":"\nCuenta la historia que durante una juntada de fernetjs, estaba tratando de probar [nice.js](https:\/\/github.com\/TShadwell\/Nice.js \"nice.js\"). Nice.js supuestamente ofusca el c\u00f3digo javascript, y lo transforma a ascii art en base a una imagen. Me pareci\u00f3 divertido, y lo quise probar. M\u00e1s all\u00e1 de que fui cuidadoso eligiendo la imagen y le dediqu\u00e9 varios minutos, a la hora de elegir el script no quise perder el tiempo, entonces fu\u00ed al azar a un tab que ten\u00eda abierto, abr\u00ed las developer tools de chrome, agarr\u00e9 un script, y lo copi\u00e9 todo. El tab era jquery.com, y me qued\u00e9 sorprendido cuando v\u00ed el siguiente comentario: [js] \/\/ Hehe. [\/js] Seguido a eso, el siguiente c\u00f3digo (el archivo es [custom.js](http:\/\/jquery.com\/files\/rocker\/scripts\/custom.js)): [js] if ( window.addEventListener ) { var kkeys = [], konami = \"38,38,40,40,37,39,37,39,66,65\"; window.addEventListener(\"keydown\", function(e){ kkeys.push( e.keyCode ); if ( kkeys.toString().indexOf( konami ) >= 0 ) window.location = \"http:\/\/ejohn.org\/apps\/hero\/\"; }, true); } [\/js] Qu\u00e9 fue lo que hice? Probar la combinaci\u00f3n de teclas de esos c\u00f3digos :38, etc. (arriba, arriba, abajo, abajo, izquierda, derecha, izquierda, derecha, b, a). Muy buena onda! Por un momento pens\u00e9 que hab\u00eda descubierto un huevo de pascua en el sitio oficial de jQuery, hasta que lo *gugli\u00e9*, y me d\u00ed cuenta que Paul Irish [ya hab\u00eda hablado de eso 3 a\u00f1os atr\u00e1s](http:\/\/paulirish.com\/2009\/cornify-easter-egg-with-jquery\/ \"jQuery easter egg by paul irish\"). Pero bueno, fu\u00e9 muy satisfactorio haber encontrado eso, y el haber tenido la oportunidad de jugar a ese \"guitar hero\". La ivestigaci\u00f3n continu\u00f3.\n\n### Konami codes\n\n jQuery no fu\u00e9 ni el \u00faltimo ni el primer sitio en implementar ese \"truquito\", m\u00e1s bien conocido como konami code. Un poco de contexto e historia pueden ser encontrados en la [wikipedia](http:\/\/es.wikipedia.org\/wiki\/C%C3%B3digo_Konami \"C\u00f3digo konami - wikipedia\"). Hay [una p\u00e1gina que lista sitios implementando konami codes](http:\/\/konamicodesites.com\/ \"konamicodesites.com\"), e inclusive existen bastantes [utilidades](http:\/\/snaptortoise.com\/konami-js\/ \"konami-js\"), [plugins de jQuery](https:\/\/github.com\/davidcoallier\/jquery-konami \"jquery-konami\"), y dem\u00e1s. [Konami-js](https:\/\/github.com\/snaptortoise\/konami-js \"konami-js en github\") soporta gestures para dispositivos m\u00f3viles, e incluso existe un plugin de wordpress basado en el mismo. Gente se preguntar\u00e1: Qu\u00e9 *utilidad* tienen estos proyectos? NINGUNA!!! Muchas veces, solo el hecho de hacer de algo divertido, y de divertirse mientras se lo desarrolla y aprender, justifica los medios. PD: Cuidado con d\u00f3nde ejecutan la combinaci\u00f3n de teclas ;).\n","html":"Cuenta la historia que durante una juntada de fernetjs, estaba tratando de probar <a href=\"https:\/\/github.com\/TShadwell\/Nice.js\" title=\"nice.js\" target=\"_blank\">nice.js<\/a>. \r\nNice.js supuestamente ofusca el c\u00f3digo javascript, y lo transforma a ascii art en base a una imagen. Me pareci\u00f3 divertido, y lo quise probar. M\u00e1s all\u00e1 de que fui cuidadoso eligiendo la imagen y le dediqu\u00e9 varios minutos, a la hora de elegir el script no quise perder el tiempo, entonces fu\u00ed al azar a un tab que ten\u00eda abierto, abr\u00ed las developer tools de chrome, agarr\u00e9 un script, y lo copi\u00e9 todo. El tab era jquery.com, y me qued\u00e9 sorprendido cuando v\u00ed el siguiente comentario:\r\n\r\n[js]\r\n\/\/ Hehe.\r\n[\/js]\r\n\r\nSeguido a eso, el siguiente c\u00f3digo (el archivo es <a href=\"http:\/\/jquery.com\/files\/rocker\/scripts\/custom.js\" target=\"_blank\">custom.js<\/a>):\r\n\r\n[js]\r\nif ( window.addEventListener ) {\r\n        var kkeys = [], konami = &quot;38,38,40,40,37,39,37,39,66,65&quot;;\r\n        window.addEventListener(&quot;keydown&quot;, function(e){\r\n                kkeys.push( e.keyCode );\r\n                if ( kkeys.toString().indexOf( konami ) &gt;= 0 )\r\n                        window.location = &quot;http:\/\/ejohn.org\/apps\/hero\/&quot;;\r\n        }, true);\r\n}\r\n[\/js]\r\n\r\nQu\u00e9 fue lo que hice? Probar la combinaci\u00f3n de teclas de esos c\u00f3digos :38, etc. (arriba, arriba, abajo, abajo, izquierda, derecha, izquierda, derecha, b, a).\r\n\r\nMuy buena onda! Por un momento pens\u00e9 que hab\u00eda descubierto un huevo de pascua en el sitio oficial de jQuery, hasta que lo <i>gugli\u00e9<\/i>, y me d\u00ed cuenta que Paul Irish <a href=\"http:\/\/paulirish.com\/2009\/cornify-easter-egg-with-jquery\/\" title=\"jQuery easter egg by paul irish\" target=\"_blank\">ya hab\u00eda hablado de eso 3 a\u00f1os atr\u00e1s<\/a>.  \r\n\r\nPero bueno, fu\u00e9 muy satisfactorio haber encontrado eso, y el haber tenido la oportunidad de jugar a ese \"guitar hero\". La ivestigaci\u00f3n continu\u00f3.\r\n\r\n<h3>Konami codes<\/h3> \r\n\r\njQuery no fu\u00e9 ni el \u00faltimo ni el primer sitio en implementar ese \"truquito\", m\u00e1s bien conocido como konami code. Un poco de contexto e historia pueden ser encontrados en la <a href=\"http:\/\/es.wikipedia.org\/wiki\/C%C3%B3digo_Konami\" title=\"C\u00f3digo konami - wikipedia\" target=\"_blank\">wikipedia<\/a>.\r\nHay <a href=\"http:\/\/konamicodesites.com\/\" title=\"konamicodesites.com\" target=\"_blank\">una p\u00e1gina que lista sitios  implementando konami codes<\/a>, e inclusive existen bastantes <a href=\"http:\/\/snaptortoise.com\/konami-js\/\" title=\"konami-js\" target=\"_blank\">utilidades<\/a>, <a href=\"https:\/\/github.com\/davidcoallier\/jquery-konami\" title=\"jquery-konami\" target=\"_blank\">plugins de jQuery<\/a>, y dem\u00e1s.\r\n\r\n<a href=\"https:\/\/github.com\/snaptortoise\/konami-js\" title=\"konami-js en github\">Konami-js<\/a> soporta gestures para dispositivos m\u00f3viles, e incluso existe un plugin de wordpress basado en el mismo. \r\n\r\nGente se preguntar\u00e1: Qu\u00e9 <i>utilidad<\/i> tienen estos proyectos? NINGUNA!!!\r\nMuchas veces, solo el hecho de hacer de algo divertido, y de divertirse mientras se lo desarrolla y aprender, justifica los medios.\r\n\r\n\r\nPD: Cuidado con d\u00f3nde ejecutan la combinaci\u00f3n de teclas ;).","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Mon, 18 Jun 2012 10:24:12 +0000","created_by":1,"updated_at":"Mon, 18 Jun 2012 10:24:12 +0000","updated_by":1,"published_at":"Mon, 18 Jun 2012 10:24:12 +0000","published_by":1},{"id":2260,"title":"Es un Array o no?","slug":"es-un-array-o-no","markdown":"\nTe pas\u00f3, no?, ten\u00e9s que comprobar si el par\u00e1metro que recibiste en tu maravillosa funcion es un Array, o no. Primero probamos, tardamos menos que abrir google (o no ..): [js] var unArray = []; if (typeof unArray === 'Array') \/\/puede que tenga sentido, pero no if (unArray.constructor === Array) \/\/anda?, no parece piola [\/js] Ahora si, abrimos google y nos tira mil opciones mas [js] if (unArray instanceof Array) \/\/esta pinta bien toString.call(unArray) === \"[object Array]\"; \/\/bueh.. [\/js] No estar\u00eda bueno poder hacer lo siguiente y fue?: [js] if (Array.isArray(unArray)) { } [\/js] Est\u00e1 bueno y se puede, no entiendo porque tantas formas de comprobar lo mismo si ya podemos hacerlo tan simple. Soporte: Chrome 5+, Firefox 4+, Safari 5+, Opera 10.5+, IE 9+ Si, ya se, me vas a decir que en IE 6, 7 y 8 no funca, bueno para todo browser que no se la banque, metemos el script: [js] if(!Array.isArray) { Array.isArray = function (vArg) { return Object.prototype.toString.call(vArg) === \"[object Array]\"; }; } [\/js] o bien, algunas de todas las librerias que \"levantan\" el soporte del browser. Como conclusi\u00f3n, dejemos de tirar condiciones extra\u00f1as de comprobacion de Arrays, ya tenemos a disposici\u00f3n un m\u00e9todo que queda muy coqueto :P [Mas documentaci\u00f3n en MDN: isArray()](https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/isArray \"isArray en MDN\")\n\n\n","html":"Te pas\u00f3, no?, ten\u00e9s que comprobar si el par\u00e1metro que recibiste en tu maravillosa funcion es un Array, o no. Primero probamos, tardamos menos que abrir google (o no ..):\r\n\r\n[js]\r\nvar unArray = [];\r\nif (typeof unArray === 'Array') \/\/puede que tenga sentido, pero no\r\nif (unArray.constructor === Array) \/\/anda?, no parece piola \r\n[\/js]\r\n\r\nAhora si, abrimos google y nos tira mil opciones mas\r\n\r\n[js]\r\nif (unArray instanceof Array) \/\/esta pinta bien\r\ntoString.call(unArray) === &quot;[object Array]&quot;; \/\/bueh..\r\n[\/js]\r\n\r\nNo estar\u00eda bueno poder hacer lo siguiente y fue?:\r\n[js]\r\nif (Array.isArray(unArray)) {\r\n}\r\n[\/js]\r\n\r\nEst\u00e1 bueno y se puede, no entiendo porque tantas formas de comprobar lo mismo si ya podemos hacerlo tan simple.\r\n\r\nSoporte: Chrome 5+, Firefox 4+, Safari 5+, Opera 10.5+, IE 9+\r\n\r\nSi, ya se, me vas a decir que en IE 6, 7 y 8 no funca, bueno para todo browser que no se la banque, metemos el script:\r\n\r\n[js]\r\nif(!Array.isArray) {\r\n  Array.isArray = function (vArg) {\r\n    return Object.prototype.toString.call(vArg) === &quot;[object Array]&quot;;\r\n  };\r\n}\r\n[\/js]\r\n\r\no bien, algunas de todas las librerias que \"levantan\" el soporte del browser.\r\n\r\nComo conclusi\u00f3n, dejemos de tirar condiciones extra\u00f1as de comprobacion de Arrays, ya tenemos a disposici\u00f3n un m\u00e9todo que queda muy coqueto :P\r\n\r\n<a href=\"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/isArray\" title=\"isArray en MDN\">Mas documentaci\u00f3n en MDN: isArray()<\/a>\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 21 Jun 2012 13:44:58 +0000","created_by":1,"updated_at":"Thu, 21 Jun 2012 13:44:58 +0000","updated_by":1,"published_at":"Thu, 21 Jun 2012 13:44:58 +0000","published_by":1},{"id":2276,"title":"Fernet Volador: detr\u00e1s de escena","slug":"fernet-volador-detras-de-escena","markdown":"\nA pedido del p\u00fablico (mentira, lo queria compartir :P), el c\u00f3digo del Fernet Volador explicado: Antes que nada, si no lo viste en funcionamiento, abri tu consola y pone konamiFernetJS.run(), para terminarlo ingresa konamiFernetJS.stop(). Todo nace desde [este post de Matias](http:\/\/fernetjs.com\/2012\/06\/del-ofuscador-al-konami-code\/ \"Del ofuscador al konami code\") El objetivo del fernet volador es basicamente lo que se v\u00e9, una botella de fernet con una capita y que pudieramos volar por la pantalla.\n\n### Un poco de como armarlo\n\n Primero nuestra imagen de la botella, hacemos los movimientos de la capa en la misma imagen, la cual va a estar cambiando continuamente (el background-position en CSS) dando el efecto de que se mueve la capa: [![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/fernet-capita.png \"fernet-capita\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/fernet-capita.png) Vamos a tener que mover la botella en angulos dependiendo de *hacia donde este yendo*, por lo que usamos CSS3 y el copado *rotate*, pero tambi\u00e9n vamos a tener que mover la posici\u00f3n de la botella en la pantalla para simular el movimiento, asi que armamos 2 divs, uno con la imagen del fernet (en posici\u00f3n absoluta), en el cual vamos a ir modificando el rotate (verde) y otro que contiene a este con posicion absoluta al documento (rojo), al cual le vamos a cambiar el top y left para ir posicionandolo. [![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/fernetvolador_ctn1.png \"fernetvolador_ctn\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/fernetvolador_ctn1.png) Y todo esto va a depender de las flechas presionadas, asi que dir\u00eda de mantenerlas en un array para que el loop se encargue de verificar cual est\u00e1 y aplicar los CSS. ### Estructurando el codigo\n\n Vamos a estructurar nuestro c\u00f3digo armando una funci\u00f3n para iniciar, 2 funciones para cuando presiona una flecha en el teclado y cuando la suelta, una funci\u00f3n para mover la botella (la que va a estar en un loop) y por \u00faltimo una funci\u00f3n para limpiar el dom cuando termina. Principalmente el fernet volador tiene 2 entradas p\u00fablicas, una para iniciar y otra para terminar, asi que vamos a dejar solo eso p\u00fablico utilizando lo que vimos en [este post](http:\/\/fernetjs.com\/2012\/05\/patrones-module-y-namespace\/ \"Patrones: Module y Namespace\") Arranquemos por el objeto konamiFernetJS: [js] var konamiFernetJS = (function($){ \/\/variables privadas var running = false, \/\/si est\u00e1 en ejecuci\u00f3n timerMove, \/\/timer para movimiento timerCapa, \/\/timer para la capa bottleWrap, \/\/ div de posicion para la botella bottle, \/\/div de imagen y rotacion de la botella legend, \/\/leyenda inicial vel = 10, \/\/velocidad cls = 0, \/\/angulo a aplicar $window = $(window), \/\/el jquery wrapper del window keys = [], \/\/ array con las flechas presionadas key = { \/\/keyCodes de las flechas del teclado up: 38, down: 40, left: 37, right: 39 }; \/\/function para la animacion de la botella \/\/se va a llamar en un loop cada x segundos var moveBottle = function(){}; \/\/eventos de keyup y keydown var konamiKeyDown = function(e){}; var konamiKeyUp = function(e){}; \/\/funcion para iniciar dom, eventos y loops var runKonami = function(){}; \/\/funcion para limpiar todo, dom, eventos y detener loops var reset = function(){}; \/\/acceso publico para iniciar y detener return { run: function(){ if (!running){ running = true; runKonami(); } }, stop: reset }; })(jQuery); [\/js] De esta manera dejamos toda funcionalidad, variables, etc. dentro de una sola variable global *konamiFernetJS*. #### iniciando: runKonami()\n\n En esta funcion vamos a crear el dom, eventos e iniciar los loops de animacion: [js] var runKonami = function(){ \/\/creamos los elementos del DOM \/\/este es el div que rota con la imagen de la botella bottle = $(\"<div>\").addClass('fernet-capita'); \/\/mensaje inicial legend = $(\"<div>\").addClass('legend').text(\"<- Fernet volador\"); \/\/este va a ser el div que se mueve por la pantalla bottleWrap = $(\"<div>\").addClass(\"bottle-wrap\") .append(bottle) \/\/agregamos la botella .append(legend) \/\/agregamos el mensaje inicial \/\/posicionamiento inicial de la botella .css('left', ($window.width()\/3) + 'px') .css('top', (($window.height()\/2) + $window.scrollTop()) + 'px') .appendTo('body'); \/\/agregamos todo al body \/\/hacemos desaparecer el scroll de la pagina, ya que lo vamos a manejar nosotros $('body, html').css('overflow', 'hidden'); \/\/creamos una funcion para el array keys, simplificando el manejo de las flechas presionadas \/\/vamos a usar mucho esta funcion dentro de moveBottle \/\/el array keys es donde vamos a mantener las flechas presionadas keys.has = function(){ for(var i=0;i<arguments.length;i++){ if(keys.indexOf(arguments[i]) === -1) return false; } return true; }; \/\/bindeamos los eventos keyup y keydown del window a nuestras funciones $(document).bind('keydown', konamiKeyDown); $(document).bind('keyup', konamiKeyUp); \/\/limpiamos todo interval que este dando vueltas (por si las dudas) clearInterval(timerMove); clearInterval(timerCapa); \/\/creamos el loop para el movimiento de la botella \/\/es decir, cada 50 milisegundos se va a llamar a la funci\u00f3n moveBottle timerMove = setInterval(moveBottle, 50); \/\/creamos el loop para el movimiento de la capa negra de la botella \/\/es el cambio continuo de la imagen, para animar la capa (background-position) var toggle = false; timerCapa = setInterval(function(){ toggle = !toggle; if (toggle) bottle.addClass('x'); else bottle.removeClass('x'); }, 200); }; [\/js] #### eventos keyup y keydown\n\n Manejando el array *keys* dependiendo de que esta presionado y que se dej\u00f3 de presionar [js] var konamiKeyDown = function(e){ \/\/comprobamos que la flecha presionada no est\u00e9 en el array (sea nueva) if (keys.indexOf(e.which) === -1) { if (keys.length > 1) keys.shift(); \/\/ si el array ya tiene 2, sacamos la primera keys.push(e.which); \/\/agregamos la flecha al array } \/\/si todavia esta la leyenda, animamos para que se vaya if (legend){ legend.animate({opacity: 0}, 1000, function(){ legend.remove(); legend = null; }); } }; var konamiKeyUp = function(e){ var idx = keys.indexOf(e.which); if (idx !== -1) keys.splice(idx, 1); \/\/si el array tiene la flecha que soltamos, la eliminamos }; [\/js] #### loop de movimiento de la botella: moveBottle()\n\n [js] var moveBottle = function(){ \/\/tomamos posiciones actuales y la altura de la ventana actual con su scroll var top = bottleWrap.position().top, left = bottleWrap.position().left, half = $window.height()\/2, hScroll = $window.scrollTop() + $window.height()\/2; \/\/comprobamos que flechas est\u00e1n en el array y asignamos angulo y posicion if(keys.has(key.up)){ cls = 0; if(top > 0) top-=vel; } if(keys.has(key.right)){ cls = 90; if((left + bottleWrap.width()) < $window.width()) left+=vel; } if(keys.has(key.down)){ cls = 180; if((top + bottleWrap.height() * 2) < $window.height() + $window.scrollTop()) top+=vel; } if(keys.has(key.left)){ cls = 270; if(left > 0) left-=vel; } \/\/este caso es para cuando tiene 2 flechas presionadas if(keys.length > 1){ cls = 45; if (keys.has(key.up, key.right)) cls *= 1; else if (keys.has(key.right, key.down)) cls *= 3; else if (keys.has(key.down, key.left)) cls *= 5; else if (keys.has(key.left, key.up)) cls *= 7; } \/\/creamos el CSS con la propiedad rotate var style = \"transform:rotate([d]deg);\" + \"-ms-transform:rotate([d]deg);\" + \"-moz-transform:rotate([d]deg);\" + \"-webkit-transform:rotate([d]deg);\" + \"-o-transform:rotate([d]deg);\"; \/\/reemplazamos [d] por el angulo calculado style = style.replace(\/\\[d\\]\/g, cls); \/\/comprobamos si hay que mover el scroll de la ventana if(top > hScroll || top < hScroll){ $window.scrollTop(top - half); } \/\/asignamos la posicion nueva y el CSS rotate bottleWrap.css('top', top + 'px').css('left', left + 'px'); bottle.attr('style', style); }; [\/js] #### Limpiamos memoria cuando se detenga: reset()\n\n [js] var reset = function(){ \/\/eliminamos eventos $(document).unbind('keydown', konamiKeyDown); $(document).unbind('keyup', konamiKeyUp); \/\/volvemos el scroll a como estaba $('body, html').css('overflow', 'auto'); \/\/detenemos los loops clearInterval(timerMove); clearInterval(timerCapa); bottleWrap.empty().remove(); \/\/eliminamos el DOM keys = []; \/\/volvemos a cero el array de flechas running = false; \/\/le avisamos que ya no est\u00e1 en ejecuci\u00f3n }; [\/js] Y eso es todo el fernet volador (sacando el css), estoy seguro que cambiarias varias cosas (con escribir el post yo cambiar\u00eda algunas :P) por eso te dejo un repo en github para que tengas todo el ejemplo completo y puedas modificarlo o reutilizarlo. [Fernet Volador en GitHub](https:\/\/github.com\/fernetjs\/fernetvolador)\n","html":"A pedido del p\u00fablico (mentira, lo queria compartir :P), el c\u00f3digo del Fernet Volador explicado:\r\n\r\nAntes que nada, si no lo viste en funcionamiento, abri tu consola y pone konamiFernetJS.run(), para terminarlo ingresa konamiFernetJS.stop(). Todo nace desde <a href=\"http:\/\/fernetjs.com\/2012\/06\/del-ofuscador-al-konami-code\/\" title=\"Del ofuscador al konami code\">este post de Matias<\/a>\r\n\r\nEl objetivo del fernet volador es basicamente lo que se v\u00e9, una botella de fernet con una capita y que pudieramos volar por la pantalla.\r\n\r\n<h3>Un poco de como armarlo<\/h3>\r\nPrimero nuestra imagen de la botella, hacemos los movimientos de la capa en la misma imagen, la cual va a estar cambiando continuamente (el background-position en CSS) dando el efecto de que se mueve la capa:\r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/fernet-capita.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/fernet-capita.png\" alt=\"\" title=\"fernet-capita\" width=\"160\" height=\"80\" class=\"alignnone size-full wp-image-2306\" \/><\/a>\r\n\r\nVamos a tener que mover la botella en angulos dependiendo de <em>hacia donde este yendo<\/em>, por lo que usamos CSS3 y el copado <em>rotate<\/em>, pero tambi\u00e9n vamos a tener que mover la posici\u00f3n de la botella en la pantalla para simular el movimiento, asi que armamos 2 divs, uno con la imagen del fernet (en posici\u00f3n absoluta), en el cual vamos a ir modificando el rotate (verde) y otro que contiene a este con posicion absoluta al documento (rojo), al cual le vamos a cambiar el top y left para ir posicionandolo. \r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/fernetvolador_ctn1.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/fernetvolador_ctn1.png\" alt=\"\" title=\"fernetvolador_ctn\" width=\"150\" height=\"150\" class=\"alignnone size-full wp-image-2314\" \/><\/a>\r\n\r\nY todo esto va a depender de las flechas presionadas, asi que dir\u00eda de mantenerlas en un array para que el loop se encargue de verificar cual est\u00e1 y aplicar los CSS. \r\n\r\n<h3>Estructurando el codigo<\/h3>\r\nVamos a estructurar nuestro c\u00f3digo armando una funci\u00f3n para iniciar, 2 funciones para cuando presiona una flecha en el teclado y cuando la suelta, una funci\u00f3n para mover la botella (la que va a estar en un loop) y por \u00faltimo una funci\u00f3n para limpiar el dom cuando termina.\r\n\r\nPrincipalmente el fernet volador tiene 2 entradas p\u00fablicas, una para iniciar y otra para terminar, asi que vamos a dejar solo eso p\u00fablico utilizando lo que vimos en <a href=\"http:\/\/fernetjs.com\/2012\/05\/patrones-module-y-namespace\/\" title=\"Patrones: Module y Namespace\">este post<\/a>\r\n\r\nArranquemos por el objeto konamiFernetJS:\r\n\r\n[js]\r\nvar konamiFernetJS = (function($){\r\n  \/\/variables privadas\r\n  var running = false, \/\/si est\u00e1 en ejecuci\u00f3n\r\n    timerMove, \/\/timer para movimiento\r\n    timerCapa, \/\/timer para la capa\r\n    bottleWrap, \/\/ div de posicion para la botella\r\n    bottle, \/\/div de imagen y rotacion de la botella\r\n    legend, \/\/leyenda inicial\r\n    vel = 10, \/\/velocidad\r\n    cls = 0, \/\/angulo a aplicar\r\n    $window = $(window), \/\/el jquery wrapper del window \r\n    keys = [], \/\/ array con las flechas presionadas\r\n    key = { \/\/keyCodes de las flechas del teclado\r\n      up: 38,\r\n      down: 40,\r\n      left: 37,\r\n      right: 39\r\n    };\r\n\r\n  \/\/function para la animacion de la botella\r\n  \/\/se va a llamar en un loop cada x segundos\r\n  var moveBottle = function(){};  \r\n\r\n  \/\/eventos de keyup y keydown\r\n  var konamiKeyDown = function(e){};\r\n  var konamiKeyUp = function(e){};\r\n\r\n  \/\/funcion para iniciar dom, eventos y loops\r\n  var runKonami = function(){};\r\n\r\n  \/\/funcion para  limpiar todo, dom, eventos y detener loops\r\n  var reset = function(){};\r\n \r\n  \/\/acceso publico para iniciar y detener\r\n  return {\r\n    run: function(){\r\n      if (!running){\r\n        running = true;\r\n        runKonami();\r\n      }\r\n    },\r\n    stop: reset\r\n  }; \r\n})(jQuery);\r\n[\/js]\r\n\r\nDe esta manera dejamos toda funcionalidad, variables, etc. dentro de una sola variable global <em>konamiFernetJS<\/em>.\r\n\r\n<h4>iniciando: runKonami()<\/h4>\r\nEn esta funcion vamos a crear el dom, eventos e iniciar los loops de animacion:\r\n\r\n[js]\r\nvar runKonami = function(){\r\n  \/\/creamos los elementos del DOM\r\n  \/\/este es el div que rota con la imagen de la botella\r\n  bottle = $(&quot;&lt;div&gt;&quot;).addClass('fernet-capita');\r\n  \/\/mensaje inicial \r\n  legend = $(&quot;&lt;div&gt;&quot;).addClass('legend').text(&quot;&lt;- Fernet volador&quot;);\r\n\r\n  \/\/este va a ser el div que se mueve por la pantalla\r\n  bottleWrap = $(&quot;&lt;div&gt;&quot;).addClass(&quot;bottle-wrap&quot;)\r\n    .append(bottle) \/\/agregamos la botella\r\n    .append(legend) \/\/agregamos el mensaje inicial\r\n    \/\/posicionamiento inicial de la botella\r\n    .css('left', ($window.width()\/3) + 'px')\r\n    .css('top', (($window.height()\/2) + $window.scrollTop()) + 'px')\r\n    .appendTo('body'); \/\/agregamos todo al body\r\n\r\n  \/\/hacemos desaparecer el scroll de la pagina, ya que lo vamos a manejar nosotros\t\t\r\n  $('body, html').css('overflow', 'hidden');\r\n\r\n  \/\/creamos una funcion para el array keys, simplificando el manejo de las flechas presionadas\r\n  \/\/vamos a usar mucho esta funcion dentro de moveBottle\r\n  \/\/el array keys es donde vamos a mantener las flechas presionadas\r\n  keys.has = function(){\r\n    for(var i=0;i&lt;arguments.length;i++){\r\n      if(keys.indexOf(arguments[i]) === -1) return false;\r\n    }\r\n    return true;\r\n  };\r\n  \r\n  \/\/bindeamos los eventos keyup y keydown del window a nuestras funciones\r\n  $(document).bind('keydown', konamiKeyDown);\r\n  $(document).bind('keyup', konamiKeyUp);\r\n\r\n  \/\/limpiamos todo interval que este dando vueltas (por si las dudas)\r\n  clearInterval(timerMove);\r\n  clearInterval(timerCapa);\r\n  \r\n  \/\/creamos el loop para el movimiento de la botella\r\n  \/\/es decir, cada 50 milisegundos se va a llamar a la funci\u00f3n moveBottle\r\n  timerMove = setInterval(moveBottle, 50);\r\n\r\n  \/\/creamos el loop para el movimiento de la capa negra de la botella\t\r\n  \/\/es el cambio continuo de la imagen, para animar la capa (background-position)\t\r\n  var toggle = false;\r\n  timerCapa = setInterval(function(){\r\n    toggle = !toggle;\r\n    if (toggle) bottle.addClass('x');\r\n    else bottle.removeClass('x');\r\n  }, 200);\r\n\t\t\r\n};\r\n[\/js] \r\n\r\n<h4>eventos keyup y keydown<\/h4>\r\nManejando el array <em>keys<\/em> dependiendo de que esta presionado y que se dej\u00f3 de presionar\r\n\r\n[js]\r\nvar konamiKeyDown = function(e){\r\n  \/\/comprobamos que la flecha presionada no est\u00e9 en el array (sea nueva)\r\n  if (keys.indexOf(e.which) === -1) {\r\n    if (keys.length &gt; 1) keys.shift(); \/\/ si el array ya tiene 2, sacamos la primera\r\n    keys.push(e.which); \/\/agregamos la flecha al array\r\n  }\r\n\r\n  \/\/si todavia esta la leyenda, animamos para que se vaya\r\n  if (legend){\r\n    legend.animate({opacity: 0}, 1000, function(){\r\n      legend.remove();\r\n      legend = null;\r\n    });\r\n  }\r\n};\r\n\t\r\nvar konamiKeyUp = function(e){\r\n  var idx = keys.indexOf(e.which);\r\n  if (idx !== -1)\r\n    keys.splice(idx, 1); \/\/si el array tiene la flecha que soltamos, la eliminamos\r\n};\r\n[\/js]\r\n\r\n<h4>loop de movimiento de la botella: moveBottle()<\/h4>\r\n\r\n[js]\r\nvar moveBottle = function(){\r\n  \/\/tomamos posiciones actuales y la altura de la ventana actual con su scroll\r\n  var top = bottleWrap.position().top, \r\n    left = bottleWrap.position().left,\r\n    half = $window.height()\/2,\r\n    hScroll = $window.scrollTop() + $window.height()\/2;\r\n\r\n  \/\/comprobamos que flechas est\u00e1n en el array y asignamos angulo y posicion\r\n  if(keys.has(key.up)){\r\n    cls = 0;\r\n    if(top &gt; 0) top-=vel; \r\n  }\r\n  if(keys.has(key.right)){\r\n    cls = 90;\r\n    if((left + bottleWrap.width()) &lt; $window.width()) left+=vel;\r\n  }\r\n  if(keys.has(key.down)){\r\n    cls = 180;\r\n    if((top + bottleWrap.height() * 2) &lt; $window.height() + $window.scrollTop()) top+=vel;\r\n  }\r\n  if(keys.has(key.left)){\r\n    cls = 270;\r\n    if(left &gt; 0) left-=vel;\r\n  }\r\n\r\n  \/\/este caso es para cuando tiene 2 flechas presionadas\r\n  if(keys.length &gt; 1){\r\n    cls = 45;\r\n\t\t\t\r\n    if (keys.has(key.up, key.right)) cls *= 1;\r\n    else if (keys.has(key.right, key.down)) cls *= 3;\r\n    else if (keys.has(key.down, key.left)) cls *= 5;\r\n    else if (keys.has(key.left, key.up)) cls *= 7;\r\n  }\r\n\r\n  \/\/creamos el CSS con la propiedad rotate\r\n  var style = &quot;transform:rotate([d]deg);&quot;\r\n    + &quot;-ms-transform:rotate([d]deg);&quot;\r\n    + &quot;-moz-transform:rotate([d]deg);&quot;\r\n    + &quot;-webkit-transform:rotate([d]deg);&quot;\r\n    + &quot;-o-transform:rotate([d]deg);&quot;;\r\n\t\t\t\t\t\r\n  \/\/reemplazamos [d] por el angulo calculado\t\t\t\r\n  style = style.replace(\/\\[d\\]\/g, cls); \r\n\r\n  \/\/comprobamos si hay que mover el scroll de la ventana\r\n  if(top &gt; hScroll || top &lt; hScroll){\r\n    $window.scrollTop(top - half);\r\n  }\r\n\r\n  \/\/asignamos la posicion nueva y el CSS rotate\r\n  bottleWrap.css('top', top + 'px').css('left', left + 'px');\r\n  bottle.attr('style', style);\r\n};\r\n[\/js]\r\n\r\n<h4>Limpiamos memoria cuando se detenga: reset()<\/h4>\r\n[js]\r\nvar reset = function(){\r\n  \/\/eliminamos eventos\r\n  $(document).unbind('keydown', konamiKeyDown);\r\n  $(document).unbind('keyup', konamiKeyUp);\r\n\r\n  \/\/volvemos el scroll a como estaba\r\n  $('body, html').css('overflow', 'auto');\r\n\r\n  \/\/detenemos los loops\r\n  clearInterval(timerMove);\r\n  clearInterval(timerCapa);\r\n\r\n  bottleWrap.empty().remove(); \/\/eliminamos el DOM\r\n  keys = []; \/\/volvemos a cero el array de flechas\r\n  running = false; \/\/le avisamos que ya no est\u00e1 en ejecuci\u00f3n\r\n};\r\n[\/js]\r\n\r\nY eso es todo el fernet volador (sacando el css), estoy seguro que cambiarias varias cosas (con escribir el post yo cambiar\u00eda algunas :P) por eso te dejo un repo en github para que tengas todo el ejemplo completo y puedas modificarlo o reutilizarlo.\r\n\r\n<a href=\"https:\/\/github.com\/fernetjs\/fernetvolador\">Fernet Volador en GitHub<\/a>\r\n\r\n ","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 25 Jun 2012 16:17:53 +0000","created_by":1,"updated_at":"Mon, 25 Jun 2012 16:20:40 +0000","updated_by":1,"published_at":"Mon, 25 Jun 2012 16:17:53 +0000","published_by":1},{"id":2368,"title":"Pateando Google Analytics desde NodeJS","slug":"pateando-google-analytics-desde-nodejs","markdown":"\nLaburando en mi [API de feriados](http:\/\/nolaborables.info\/) para divertirme un poco y de paso dejar una API Rest p\u00fablica que no devuelva un 404 como sucede con la *actual*, me top\u00e9 con algunas cosas, como por ejemplo *patear* a GoogleAnalytics cuando alguien utiliza mi Servicio REST.\n\n> El punto es que el servicio REST devuelve un JSON, o xml, etc. pero al no devolver una vista donde pueda injectar un script, no puedo realizar la llamada GA para hacer el *tracking* de la url.\n\n Para este tema tenemos [scripts armados de google](https:\/\/developers.google.com\/analytics\/devguides\/collection\/other\/mobileWebsites) en varios lenguajes, pero no en NodeJS (o mejor dicho en javascript para server-side). Mientras me dispon\u00eda a realizar la *traducci\u00f3n* a Javascript desde PHP o alguno de esos usando la [documentacion del famoso .gif](https:\/\/developers.google.com\/analytics\/resources\/concepts\/gaConceptsTrackingOverview) me cruc\u00e9 con un paquete npm que lo hace: [node-ga](https:\/\/github.com\/jgallen23\/node-ga). La implementaci\u00f3n es bastante simple: [bash] $ npm install ga [\/bash] [js] var GoogleAnalytics = require('ga'); var ga = new GoogleAnalytics('UA-XXXXXXX-X', 'dominio.com'); \/\/suponemos que creamos nuestro server Express app.get('\/api\/v1\/:algo', function(req, res){ ga.trackPage(req.url); \/\/devolvemos en la respuesta la mag\u00eda que haga nuestra API }); \/\/... otros m\u00e9todos HTTP [\/js] El problema que aparece ahi es la IP, estamos llamando al GA desde el servidor, por lo que la IP va a ser siempre la del servidor, no la del cliente que utiliza nuestra API. Bueno, por lo pronto no parece posible llamar a la url del GA con otra IP, ya que no es enviada en el header o body del request, sino que a un nivel mas bajo. Lo que si podemos hacer es logearla, para despu\u00e9s comprobar de todas esas *visitas* que tenemos en el GA poder ver cuales fueron realmente \u00fanicas. Para el logeo podemos usar [Winston](https:\/\/github.com\/flatiron\/winston\/), por ah\u00ed con [Loggly](http:\/\/loggly.com\/), pero lo dejamos para otro post :). \n","html":"Laburando en mi <a href=\"http:\/\/nolaborables.info\/\">API de feriados<\/a> para divertirme un poco y de paso dejar una API Rest p\u00fablica que no devuelva un 404 como sucede con la <em>actual<\/em>, me top\u00e9 con algunas cosas, como por ejemplo <em>patear<\/em> a GoogleAnalytics cuando alguien utiliza mi Servicio REST.\r\n\r\n<blockquote>\r\nEl punto es que el servicio REST devuelve un JSON, o xml, etc. pero al no devolver una vista donde pueda injectar un script, no puedo realizar la llamada GA para hacer el <em>tracking<\/em> de la url.\r\n<\/blockquote>\r\n\r\nPara este tema tenemos <a href=\"https:\/\/developers.google.com\/analytics\/devguides\/collection\/other\/mobileWebsites\">scripts armados de google<\/a> en varios lenguajes, pero no en NodeJS (o mejor dicho en javascript para server-side). Mientras me dispon\u00eda a realizar la <em>traducci\u00f3n<\/em> a Javascript desde PHP o alguno de esos usando la <a href=\"https:\/\/developers.google.com\/analytics\/resources\/concepts\/gaConceptsTrackingOverview\">documentacion del famoso .gif<\/a> me cruc\u00e9 con un paquete npm que lo hace: <a href=\"https:\/\/github.com\/jgallen23\/node-ga\">node-ga<\/a>.\r\n\r\nLa implementaci\u00f3n es bastante simple:\r\n[bash]\r\n$ npm install ga\r\n[\/bash]\r\n[js]\r\nvar GoogleAnalytics = require('ga');\r\nvar ga = new GoogleAnalytics('UA-XXXXXXX-X', 'dominio.com');\r\n\r\n\/\/suponemos que creamos nuestro server Express\r\n\r\napp.get('\/api\/v1\/:algo', function(req, res){\r\n  ga.trackPage(req.url);\r\n  \/\/devolvemos en la respuesta la mag\u00eda que haga nuestra API\r\n});\r\n\r\n\/\/... otros m\u00e9todos HTTP\r\n[\/js]\r\n\r\nEl problema que aparece ahi es la IP, estamos llamando al GA desde el servidor, por lo que la IP va a ser siempre la del servidor, no la del cliente que utiliza nuestra API.\r\n\r\nBueno, por lo pronto no parece posible llamar a la url del GA con otra IP, ya que no es enviada en el header o body del request, sino que a un nivel mas bajo. Lo que si podemos hacer es logearla, para despu\u00e9s comprobar de todas esas <em>visitas<\/em> que tenemos en el GA poder ver cuales fueron realmente \u00fanicas.\r\n\r\nPara el logeo podemos usar <a href=\"https:\/\/github.com\/flatiron\/winston\/\">Winston<\/a>, por ah\u00ed con <a href=\"http:\/\/loggly.com\/\">Loggly<\/a>, pero lo dejamos para otro post :).\r\n\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 12 Jul 2012 09:55:34 +0000","created_by":1,"updated_at":"Thu, 12 Jul 2012 09:55:34 +0000","updated_by":1,"published_at":"Thu, 12 Jul 2012 09:55:34 +0000","published_by":1},{"id":2401,"title":"NodeJS en la nube con Nodejitsu y Nodester","slug":"nodejs-en-la-nube-con-nodejitsu-y-nodester","markdown":"\nEleg\u00ed estas dos opciones [PaaS](http:\/\/en.wikipedia.org\/wiki\/Platform_as_a_service) porque son gratis, f\u00e1ciles y excelentes para arrancar con una aplicaci\u00f3n de NodeJS en la nube. Los pasos los voy a mostrar con Linux, pero no deber\u00edan variar en Windows, o la Manzanita. Antes de arrancar, es necesario tener nuestro package.json en orden, pueden ver del tema en [este post](http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/ \"La era del package.json\"). Arranquemos creando un web server con Express de la forma simple: [bash] mkdir sitioEnNode cd sitioEnNode npm install express node_modules\/express\/bin\/express [\/bash] Ahora que tenemos nuestro servidor web con Express vamos a ver que tenemos creado el package.json donde tenemos las dependencias (por ejemplo a jade), asi que primero vamos a instalarlas: [bash] npm install [\/bash] Con esto vamos a instalar desde npm las dependencias declaradas en el package.json. Iniciamos la aplicaci\u00f3n para probar que todo est\u00e9 en orden e ingresamos a http:\/\/localhost:3000: [bash] node app.js sitioEnNode server listening on port 3000 in development mode [\/bash]\n\n- - - - - -\n\n### Nodejitsu\n\n Primero ingresamos a [Nodejitsu](http:\/\/nodejitsu.com\/), nos creamos un usuario y lo activamos Luego nos queda instalar el cliente: [bash] npm install -g jitsu [\/bash] > Si estas en linux, necesitas permisos de root para instalar con npm como global (par\u00e1metro -g), para eso ingresa *sudo* antes de toda la linea anterior.\n\n Ahora nos queda autenticarnos, ya que es la primera vez que usamos el cliente: [bash] jitsu login [\/bash] Eso es todo, ahora hagamos un deploy!, vamos a la carpeta que creamos antes con nuestro web server: [bash] cd sitioEnNode jitsu deploy [\/bash] Nos va a preguntar: [js] prompt: subdomain (sitioEnNode): sitioEnNode \/\/nombre del subsominio prompt: scripts.start (server.js): app.js \/\/js del server prompt: version (0.0.0): 0.6.12 \/\/version de node [\/js] Estas preguntas son para configurarlas en nuestro package.json (si no estan las propiedades, las crea) Y eso es todo para Nodejitsu, simplemente entramos al sub-dominio y tenemos el deploy de la app. :) - - - - - -\n\n### Nodester\n\n Con [Nodester ](http:\/\/nodester.com\/) es distinto, pero no mas dif\u00edcil, utiliza Git para los deploys por lo que en realidad nuestro deploy es un repositorio m\u00e1s (nos proporciona otras formas tambi\u00e9n). Primero tenemos que pedir un cup\u00f3n para el acceso (por lo general no tarda mas de 2 d\u00edas) [bash] curl -X POST -d \"email=you@gmail.com\" http:\/\/nodester.com\/coupon [\/bash] Despues de recibir el cup\u00f3n, instalamos el cliente [bash] npm install nodester-cli -g nodester user setup <user> <pass> nodester user setkey [\/bash] Para seguir con el ejemplo, vamos a deployar la misma aplicaci\u00f3n que creamos al principio, as\u00ed que nos movemos a la carpeta y creamos una app de nodester [bash] cd sitioEnNode nodester app create sitioEnNode app.js [\/bash] El *create* nos va a dar el puerto donde va a estar corriendo la app, asi que confirmemos que tengamos nuestro app.js en ese puerto (o, en este ejemplo no va a ser necesario cambiar nada porque el autogenerado de express ya viene pensado para usar el puerto del proceso o 3000 si no tiene) [bash] nodester app info sitioEnNode [\/bash] Nos va a dar una url al repo de git donde se inici\u00f3 la app, por ejemplo: git@nodester.com:\/node\/git\/algo\/caracteresLocos, entonces ahora agregamos un remoto a ese repo: > En caso de no tener un repo git en esa carpeta, primero tenemos que iniciarlo y comitear los archivos [bash] git init git add . git commit -m \"commit inicial\" [\/bash]\n\n [bash] git remote add nodester git@nodester.com:\/node\/git\/algo\/caracteresLocos git push nodester master [\/bash] Y listo, cada vez que queramos subir cambios es un push al remoto nodester (\u00faltimo comando) > Acordate que es git, el comando push va a subir SOLO lo que se encuentre commiteado\n\n- - - - - -\n\n### Dominios Personalizados\n\n Para cerrar con el deploy vamos a configurar un dominio personalizado. El subdominio alcanza para algunos casos, pero en otros queremos registrar nuestro dominio y apuntarlo al deploy. > A la fecha de este post Nodester y Nodejitsu no poseen DNS registrados en nic.com\n\n Teniendo en cuenta eso, vamos a hacerlo con [A-Record](http:\/\/en.wikipedia.org\/wiki\/List_of_DNS_record_types) en [nic.com](http:\/\/nic.com\/). Despu\u00e9s de registrar el dominio, vamos a nuestra cuenta de nic.com, secci\u00f3n dominios y le damos al boton Launch. Eso nos va a llevar a la pagina de administracion de dominios (Domain Manager), en esa pantalla vamos a tener una secci\u00f3n \"DNS Manager\", la cual va a tener informaci\u00f3n cargada, si no esta la informaci\u00f3n y reci\u00e9n registran esperen un rato (mas o menos una hora). Dentro de esa informaci\u00f3n van a ver esta linea (con una IP real): A @ XXX.XXX.XXX.XXX\n\n**Y mas abajo un link *launch*, click a ese link!.**[![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/07\/nic.dnsManager.png \"nic.dnsManager\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/07\/nic.dnsManager.png) Lo vamos a hacer es modificar esa IP a la que nos da Nodester o Nodejitsu. Les recomiendo no modificar el nombre del host ( @ ), ya que est\u00e1 relacionado con otras configuraciones. Les dejo las IPs de [Nodester ](http:\/\/blog.nodester.com\/post\/3254776172\/custom-domains-now-supported-on-nodester)y [Nodejitsu](http:\/\/dns.jit.su\/) [![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/07\/nic.arecord.png \"nic.arecord\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/07\/nic.arecord.png) Luego de modificar y guardar, tienen que esperar un par de horas, pero mientras esperamos vamos a avisar que tenemos un dominio: #### Nodejitsu\n\n En el package.json agregamos una propiedad m\u00e1s \"domain\" donde ponemos nuestro\/s dominio\/s [js] \/\/...otras configuraciones \"subdomain\": \"sitioEnNode\", \"domains\": [ \"sitioEnNode.com\", \"www.sitioEnNode.com\" ], \/\/...otras configuraciones [\/js] #### Nodester\n\n En la consola ejecutamos el appdomain de nodester para setear nuestro dominio. [bash] nodester appdomain add sitioEnNode sitioEnNode.com nodester appdomain add sitioEnNode www.sitioEnNode.com [\/bash] Bueno, con eso ya tendr\u00edamos una aplicaci\u00f3n en NodeJS deployada y con dominio copado, que tal? Si tienen dudas, quieren agregar algo o cambiar, comenten! - - - - - -\n\n**Algunos Links:**- [Nodejitsu](http:\/\/nodejitsu.com)\n- [DNS Nodejitsu](http:\/\/dns.jit.su)\n- [Nodejitsu Handbook](https:\/\/github.com\/nodejitsu\/handbook)\n\n- [Nodester](http:\/\/nodester.com\/)\n- [DNS Nodester](http:\/\/blog.nodester.com\/post\/3254776172\/custom-domains-now-supported-on-nodester)\n\n\n","html":"Eleg\u00ed estas dos opciones <a href=\"http:\/\/en.wikipedia.org\/wiki\/Platform_as_a_service\">PaaS<\/a> porque son gratis, f\u00e1ciles y excelentes para arrancar con una aplicaci\u00f3n de NodeJS en la nube.\r\nLos pasos los voy a mostrar con Linux, pero no deber\u00edan variar en Windows, o la Manzanita.\r\n\r\nAntes de arrancar, es necesario tener nuestro package.json en orden, pueden ver del tema en <a href=\"http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/\" title=\"La era del package.json\">este post<\/a>.\r\n\r\nArranquemos creando un web server con Express de la forma simple:\r\n\r\n[bash]\r\nmkdir sitioEnNode\r\ncd sitioEnNode\r\nnpm install express\r\nnode_modules\/express\/bin\/express\r\n[\/bash]\r\n\r\nAhora que tenemos nuestro servidor web con Express vamos a ver que tenemos creado el package.json donde tenemos las dependencias (por ejemplo a jade), asi que primero vamos a instalarlas:\r\n\r\n[bash]\r\nnpm install\r\n[\/bash]\r\n\r\nCon esto vamos a instalar desde npm las dependencias declaradas en el package.json.\r\n\r\nIniciamos la aplicaci\u00f3n para probar que todo est\u00e9 en orden e ingresamos a http:\/\/localhost:3000:\r\n\r\n[bash]\r\nnode app.js\r\nsitioEnNode server listening on port 3000 in development mode\r\n[\/bash]\r\n<hr\/>\r\n<h3>Nodejitsu<\/h3>\r\n\r\nPrimero ingresamos a <a href=\"http:\/\/nodejitsu.com\/\">Nodejitsu<\/a>, nos creamos un usuario y lo activamos\r\nLuego nos queda instalar el cliente:\r\n[bash]\r\nnpm install -g jitsu\r\n[\/bash]\r\n\r\n<blockquote>\r\nSi estas en linux, necesitas permisos de root para instalar con npm como global (par\u00e1metro -g), para eso ingresa <em>sudo<\/em> antes de toda la linea anterior.\r\n<\/blockquote>\r\n\r\nAhora nos queda autenticarnos, ya que es la primera vez que usamos el cliente:\r\n\r\n[bash]\r\njitsu login\r\n[\/bash] \r\n\r\nEso es todo, ahora hagamos un deploy!, vamos a la carpeta que creamos antes con nuestro web server:\r\n\r\n[bash]\r\ncd sitioEnNode\r\njitsu deploy\r\n[\/bash]\r\n\r\nNos va a preguntar:\r\n\r\n[js]\r\nprompt: subdomain (sitioEnNode): sitioEnNode \/\/nombre del subsominio\r\nprompt: scripts.start (server.js): app.js \/\/js del server\r\nprompt: version (0.0.0): 0.6.12 \/\/version de node\r\n[\/js]\r\n\r\nEstas preguntas son para configurarlas en nuestro package.json (si no estan las propiedades, las crea)\r\n\r\nY eso es todo para Nodejitsu, simplemente entramos al sub-dominio y tenemos el deploy de la app. :)\r\n<hr\/>\r\n<h3>Nodester<\/h3>\r\n\r\nCon <a href=\"http:\/\/nodester.com\/\">Nodester <\/a> es distinto, pero no mas dif\u00edcil, utiliza Git para los deploys por lo que en realidad nuestro deploy es un repositorio m\u00e1s (nos proporciona otras formas tambi\u00e9n).\r\n\r\nPrimero tenemos que pedir un cup\u00f3n para el acceso (por lo general no tarda mas de 2 d\u00edas)\r\n\r\n[bash]\r\ncurl -X POST -d &quot;email=you@gmail.com&quot; http:\/\/nodester.com\/coupon\r\n[\/bash]\r\n\r\nDespues de recibir el cup\u00f3n, instalamos el cliente\r\n\r\n[bash]\r\nnpm install nodester-cli -g\r\nnodester user setup &lt;user&gt; &lt;pass&gt;\r\nnodester user setkey\r\n[\/bash]\r\n\r\nPara seguir con el ejemplo, vamos a deployar la misma aplicaci\u00f3n que creamos al principio, as\u00ed que nos movemos a la carpeta y creamos una app de nodester\r\n\r\n[bash]\r\ncd sitioEnNode\r\nnodester app create sitioEnNode app.js\r\n[\/bash]\r\n\r\nEl <em>create<\/em> nos va a dar el puerto donde va a estar corriendo la app, asi que confirmemos que tengamos nuestro app.js en ese puerto (o, en este ejemplo no va a ser necesario cambiar nada porque el autogenerado de express ya viene pensado para usar el puerto del proceso o 3000 si no tiene)\r\n\r\n[bash]\r\nnodester app info sitioEnNode\r\n[\/bash]\r\n\r\nNos va a dar una url al repo de git donde se inici\u00f3 la app, por ejemplo: git@nodester.com:\/node\/git\/algo\/caracteresLocos, entonces ahora agregamos un remoto a ese repo:\r\n\r\n<blockquote>\r\nEn caso de no tener un repo git en esa carpeta, primero tenemos que iniciarlo y comitear los archivos\r\n[bash]\r\ngit init\r\ngit add .\r\ngit commit -m &quot;commit inicial&quot;\r\n[\/bash]\r\n<\/blockquote>\r\n\r\n[bash]\r\ngit remote add nodester git@nodester.com:\/node\/git\/algo\/caracteresLocos\r\ngit push nodester master\r\n[\/bash]\r\n\r\nY listo, cada vez que queramos subir cambios es un push al remoto nodester (\u00faltimo comando)\r\n\r\n<blockquote>\r\nAcordate que es git, el comando push va a subir SOLO lo que se encuentre commiteado\r\n<\/blockquote>\r\n\r\n<hr\/>\r\n\r\n<h3>Dominios Personalizados<\/h3>\r\n\r\nPara cerrar con el deploy vamos a configurar un dominio personalizado. El subdominio alcanza para algunos casos, pero en otros queremos registrar nuestro dominio y apuntarlo al deploy. \r\n\r\n<blockquote>\r\nA la fecha de este post Nodester y Nodejitsu no poseen DNS registrados en nic.com\r\n<\/blockquote>\r\n\r\nTeniendo en cuenta eso, vamos a hacerlo con <a href=\"http:\/\/en.wikipedia.org\/wiki\/List_of_DNS_record_types\">A-Record<\/a> en <a href=\"http:\/\/nic.com\/\">nic.com<\/a>.\r\n\r\nDespu\u00e9s de registrar el dominio, vamos a nuestra cuenta de nic.com, secci\u00f3n dominios y le damos al boton Launch.\r\nEso nos va a llevar a la pagina de administracion de dominios (Domain Manager), en esa pantalla vamos a tener una secci\u00f3n \"DNS Manager\", la cual va a tener informaci\u00f3n cargada, si no esta la informaci\u00f3n y reci\u00e9n registran esperen un rato (mas o menos una hora).\r\n\r\nDentro de esa informaci\u00f3n van a ver esta linea (con una IP real):\r\n<pre>A  @  XXX.XXX.XXX.XXX<\/pre>\r\n<b>Y mas abajo un link <em>launch<\/em>, click a ese link!.<\/b>\r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/07\/nic.dnsManager.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/07\/nic.dnsManager.png\" alt=\"\" title=\"nic.dnsManager\" width=\"266\" height=\"178\" class=\"alignnone size-full wp-image-2431\" \/><\/a>\r\n\r\nLo vamos a hacer es modificar esa IP a la que nos da Nodester o Nodejitsu.\r\n\r\nLes recomiendo no modificar el nombre del host ( @ ), ya que est\u00e1 relacionado con otras configuraciones.\r\n\r\nLes dejo las IPs de <a href=\"http:\/\/blog.nodester.com\/post\/3254776172\/custom-domains-now-supported-on-nodester\">Nodester <\/a>y <a href=\"http:\/\/dns.jit.su\/\">Nodejitsu<\/a>\r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/07\/nic.arecord.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/07\/nic.arecord.png\" alt=\"\" title=\"nic.arecord\" width=\"653\" height=\"160\" class=\"alignnone size-full wp-image-2432\" \/><\/a>\r\n\r\nLuego de modificar y guardar, tienen que esperar un par de horas, pero mientras esperamos vamos a avisar que tenemos un dominio:\r\n\r\n<h4>Nodejitsu<\/h4>\r\nEn el package.json agregamos una propiedad m\u00e1s \"domain\" donde ponemos nuestro\/s dominio\/s\r\n[js]\r\n\/\/...otras configuraciones\r\n\r\n&quot;subdomain&quot;: &quot;sitioEnNode&quot;,\r\n&quot;domains&quot;: [\r\n  &quot;sitioEnNode.com&quot;,\r\n  &quot;www.sitioEnNode.com&quot;\r\n],\r\n\r\n\/\/...otras configuraciones\r\n[\/js]\r\n\r\n<h4>Nodester<\/h4>\r\nEn la consola ejecutamos el appdomain de nodester para setear nuestro dominio.\r\n[bash]\r\nnodester appdomain add sitioEnNode sitioEnNode.com\r\nnodester appdomain add sitioEnNode www.sitioEnNode.com\r\n[\/bash]\r\n\r\nBueno, con eso ya tendr\u00edamos una aplicaci\u00f3n en NodeJS deployada y con dominio copado, que tal?\r\nSi tienen dudas, quieren agregar algo o cambiar, comenten! \r\n\r\n<hr\/>\r\n<b>Algunos Links:<\/b>\r\n<ul>\r\n<li><a href=\"http:\/\/nodejitsu.com\">Nodejitsu<\/a><\/li>\r\n<li><a href=\"http:\/\/dns.jit.su\">DNS Nodejitsu<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/nodejitsu\/handbook\">Nodejitsu Handbook<\/a><\/li>\r\n<\/ul>\r\n<ul>\r\n<li><a href=\"http:\/\/nodester.com\/\">Nodester<\/a><\/li>\r\n<li><a href=\"http:\/\/blog.nodester.com\/post\/3254776172\/custom-domains-now-supported-on-nodester\">DNS Nodester<\/a><\/li>\r\n<\/ul>\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 16 Jul 2012 11:08:35 +0000","created_by":1,"updated_at":"Mon, 16 Jul 2012 11:08:35 +0000","updated_by":1,"published_at":"Mon, 16 Jul 2012 11:08:35 +0000","published_by":1},{"id":2460,"title":"Usando distintas versiones de node","slug":"usando-distintas-versiones-de-node","markdown":"\nUn escenario bastante com\u00fan es encontrarse con: > varios proyectos en node > escritos en distintos momentos > con dependencias a otros proyectos > dependencias que funcionan bajo X versi\u00f3n de node > varios desarrolladores que tienen distintas versiones de node Eso aumenta la probabilidad de confusi\u00f3n, errores y p\u00e9rdida de tiempo ( que no es lo que buscamos ). Node se encuentra en actividad permanente, y hay muchas versiones dando vueltas. Si bien los cambios que se van haciendo, en su mayor\u00eda, son compatibles hacia atr\u00e1s, seguramente no sepamos el changelog de memoria, ni querramos correr alg\u00fan tipo de riesgo. En [el package.json](http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/ \"La era del package.json\") de nuestro proyecto podemos especificar la versi\u00f3n de node con la que sabemos que funciona. Por ejemplo, [cheerio](https:\/\/github.com\/MatthewMueller\/cheerio\/blob\/master\/package.json \"cheerio package.json\") corre en versiones mayores o iguales a 0.6. [js] \"engines\": { \"node\": \">= 0.6\" } [\/js] La definici\u00f3n\/uso de \"engines\" la podemos encontrar en el sitio de npm: [http:\/\/npmjs.org\/doc\/json.html#engines](http:\/\/npmjs.org\/doc\/json.html#engines \"npm json-engines\")\n\n### nave\n\n[nave](https:\/\/github.com\/isaacs\/nave \"nave\") es una utilidad desarrollada por @izs, que nos permite tener conviviendo distintas versiones de node, y cambiar entre ellas f\u00e1cilmente. Una opci\u00f3n es simplemente clonar el proyecto, y correr nave.sh. Otra, es instalarlo por NPM: [bash] npm install -g nave [\/bash] Despu\u00e9s, el uso es bastante sencillo e intuitivo. **Instalar (descargar y buildear) una versi\u00f3n de node: **\tnave install 0.8.4\n\n Donde 0.8.4 es la versi\u00f3n, y puede ser reemplazado por stable o latest. **Usar la versi\u00f3n que querramos**\tnave use 0.8.4\n\n (si cuando hacemos use, no tenemos instalada esa versi\u00f3n, nave la va a instalar autom\u00e1ticamente) **Listar las versiones que tenemos instaladas: **\tnave ls\n\n**Listar las versiones que existen**\tnave ls-remote\n\n*Un par, no?* Y a nunca olvidarse de **checkear la versi\u00f3n** que en efecto vamos a ejecutar: \tnode -v\n\n nave trabaja con subshells, lo que significa que si hacemos nave use 0.4, entonces cuando cerremos la consola actual o abramos una nueva consola, no vamos a seguir sobre 0.4 sino que sobre la versi\u00f3n posta de node que ten\u00edamos inicialmente. Para los usuarios de node bajo windows, esta no es una soluci\u00f3n, ya que nave requiere de bash para funcionar. ### Otras alternativas\n\n Existen otras muy buenas alternativas: [NVM](https:\/\/github.com\/creationix\/nvm \"nvm\") (Node Version Manager) y [n](https:\/\/github.com\/visionmedia\/n \"n\"). La finalidad de ambas es la misma y el uso es muy parecido. La principal diferencia radica en que no trabajan con subshells, entonces cada vez que cambiemos de versi\u00f3n, el cambio se har\u00e1 de manera global (no se perder\u00e1 al cambiar de consola). \n","html":"Un escenario bastante com\u00fan es encontrarse con:\r\n\r\n> varios proyectos en node\r\n> escritos en distintos momentos\r\n> con dependencias a otros proyectos \r\n> dependencias que funcionan bajo X versi\u00f3n de node\r\n> varios desarrolladores que tienen distintas versiones de node\r\n\r\nEso aumenta la probabilidad de confusi\u00f3n, errores y p\u00e9rdida de tiempo ( que no es lo que buscamos ).\r\nNode se encuentra en actividad permanente, y hay muchas versiones dando vueltas. Si bien los cambios que se van haciendo, en su mayor\u00eda, son compatibles hacia atr\u00e1s, seguramente no sepamos el changelog de memoria, ni querramos correr alg\u00fan tipo de riesgo. \r\n\r\nEn <a href=\"http:\/\/fernetjs.com\/2011\/12\/la-era-del-package-json\/\" title=\"La era del package.json\" target=\"_blank\">el package.json<\/a> de nuestro proyecto podemos especificar la versi\u00f3n de node con la que sabemos que funciona. Por ejemplo, <a href=\"https:\/\/github.com\/MatthewMueller\/cheerio\/blob\/master\/package.json\" title=\"cheerio package.json\" target=\"_blank\">cheerio<\/a> corre en versiones mayores o iguales a 0.6.\r\n[js]\r\n  &quot;engines&quot;: {\r\n    &quot;node&quot;: &quot;&gt;= 0.6&quot;\r\n  }\r\n[\/js]\r\nLa definici\u00f3n\/uso de \"engines\" la podemos encontrar en el sitio de npm: <a href=\"http:\/\/npmjs.org\/doc\/json.html#engines\" title=\"npm json-engines\" target=\"_blank\">http:\/\/npmjs.org\/doc\/json.html#engines<\/a>\r\n\r\n<h3>nave<\/h3>\r\n\r\n<a href=\"https:\/\/github.com\/isaacs\/nave\" title=\"nave\" target=\"_blank\">nave<\/a> es una utilidad desarrollada por @izs, que nos permite tener conviviendo distintas versiones de node, y cambiar entre ellas f\u00e1cilmente.\r\n\r\nUna opci\u00f3n es simplemente clonar el proyecto, y correr nave.sh.\r\nOtra, es instalarlo por NPM:\r\n[bash]\r\nnpm install -g nave\r\n[\/bash]\r\n\r\nDespu\u00e9s, el uso es bastante sencillo e intuitivo.\r\n<strong>Instalar (descargar y buildear) una versi\u00f3n de node: <\/strong>\r\n<code>\r\nnave install 0.8.4\r\n<\/code>\r\nDonde 0.8.4 es la versi\u00f3n, y puede ser reemplazado por stable o latest.\r\n\r\n<strong>Usar la versi\u00f3n que querramos<\/strong>\r\n<code>\r\nnave use 0.8.4\r\n<\/code>\r\n(si cuando hacemos use, no tenemos instalada esa versi\u00f3n, nave la va a instalar autom\u00e1ticamente)\r\n\r\n<strong>Listar las versiones que tenemos instaladas: <\/strong>\r\n<code>\r\nnave ls\r\n<\/code>\r\n\r\n<strong>Listar las versiones que existen<\/strong>\r\n<code>\r\nnave ls-remote\r\n<\/code>\r\n<em>Un par, no?<\/em>\r\n\r\nY a nunca olvidarse de <strong>checkear la versi\u00f3n<\/strong> que en efecto vamos a ejecutar:\r\n<code>\r\nnode -v\r\n<\/code>\r\n\r\nnave trabaja con subshells, lo que significa que si hacemos nave use 0.4, entonces cuando cerremos la consola actual o abramos una nueva consola, no vamos a seguir sobre 0.4 sino que sobre la versi\u00f3n posta de node que ten\u00edamos inicialmente.\r\n\r\nPara los usuarios de node bajo windows, esta no es una soluci\u00f3n, ya que nave requiere de bash para funcionar.\r\n\r\n<h3>Otras alternativas<\/h3>\r\nExisten otras muy buenas alternativas: <a href=\"https:\/\/github.com\/creationix\/nvm\" title=\"nvm\" target=\"_blank\">NVM<\/a> (Node Version Manager) y <a href=\"https:\/\/github.com\/visionmedia\/n\" title=\"n\" target=\"_blank\">n<\/a>. La finalidad de ambas es la misma y el uso es muy parecido. \r\nLa principal diferencia radica en que no trabajan con subshells, entonces cada vez que cambiemos de versi\u00f3n, el cambio se har\u00e1 de manera global (no se perder\u00e1 al cambiar de consola).\r\n\r\n \r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Thu, 26 Jul 2012 10:28:08 +0000","created_by":1,"updated_at":"Thu, 26 Jul 2012 10:28:08 +0000","updated_by":1,"published_at":"Thu, 26 Jul 2012 10:28:08 +0000","published_by":1},{"id":2477,"title":"Tuneando las Dev Tools de Google Chrome ","slug":"tuneando-las-dev-tools-de-google-chrome","markdown":"\nProbaste usar la consola, o mejor dicho, alguna de las herramientas de desarrollo de Google Chrome (F12) en un proyector?, se complica, el tama\u00f1o de las fonts no est\u00e1 preparado para hacerse visible, as\u00ed que me puse a investigar como modificarlo y me encontr\u00e9 con algo muy interesante: est\u00e1n hechas en Javascript, HTML y CSS con toda la locura, lo que significa que modificando sus clases CSS podemos variarlas a nuestro gusto. Ac\u00e1 dejo los path donde encontrar los archivos para modificar:\n\n<dl><dt>Windows Vista y 7<\/dt><dd> [bash]C:\\Users\\[userName]\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\User StyleSheets\\Custom.css[\/bash]<\/dd><dt>Windows XP<\/dt><dd> [bash]C:\\Documents and Settings\\[userName]\\Configuraci\u00f3n local\\Datos de programa\\Google\\Chrome\\User Data\\Default\\User StyleSheets\\Custom.css[\/bash]<\/dd><dt>Linux<\/dt><dd> [bash]~\/.config\/google-chrome\/Default\/User StyleSheets\/Customs.css[\/bash]<\/dd><dt>Mac<\/dt><dd> [bash]~\/Library\/Application Support\/Google\/Chrome\/Default\/User StyleSheets\/Custom.css[\/bash]<\/dd><\/dl> El archivo Custom.css lo vas a tener en blanco, as\u00ed que para guiarte en los cambios de sobre-escritura de clases pod\u00e9s ver los que actualmente est\u00e1n aplicados en tu browser ingresando lo siguiente en el cuadro de direcciones del Chrome [bash]chrome-devtools:\/\/devtools\/devTools.css[\/bash] Como se puede ver, el archivo es bastante extenso, pero se torna muy divertido lo que se puede lograr dandole tu *estilo*. Por ejemplo, para solucionar mi problema con el tama\u00f1o de la font, hice lo siguiente en mi Custom.css (estoy en Ubuntu): [css] body.platform-linux .monospace, body.platform-linux .source-code { font-size: 22px !important; line-height: 26px; font-family: dejavu sans mono, monospace; } [\/css] Algunos links con Themes (algunos extra\u00eddos de [este excelente post](http:\/\/darcyclarke.me\/design\/skin-your-chrome-inspector\/)): - [IR_black](https:\/\/gist.github.com\/1150520) [![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/Screen-shot-2011-08-19-at-2.06.52-PM-300x121.png \"Screen shot 2011-08-19 at 2.06.52 PM\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/Screen-shot-2011-08-19-at-2.06.52-PM.png)\n- [Expresso](https:\/\/gist.github.com\/1152045) [![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/Style-Chrome-Inspector-3-300x122.png \"Style Chrome Inspector-3\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/Style-Chrome-Inspector-3.png)\n- [Solarized Dark (mi preferido)](https:\/\/gist.github.com\/2174604) [![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/3yAuuh-300x80.jpg \"3yAuuh\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/3yAuuh.jpg)\n\n\n\n","html":"Probaste usar la consola, o mejor dicho, alguna de las herramientas de desarrollo de Google Chrome (F12) en un proyector?, se complica, el tama\u00f1o de las fonts no est\u00e1 preparado para hacerse visible, as\u00ed que me puse a investigar como modificarlo y me encontr\u00e9 con algo muy interesante: est\u00e1n hechas en Javascript, HTML y CSS con toda la locura, lo que significa que modificando sus clases CSS podemos variarlas a nuestro gusto.\r\n\r\nAc\u00e1 dejo los path donde encontrar los archivos para modificar:\r\n\r\n<dl>\r\n<dt>Windows Vista y 7<\/dt>\r\n<dd>\r\n[bash]C:\\Users\\[userName]\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\User StyleSheets\\Custom.css[\/bash]<\/dd>\r\n<dt>Windows XP<\/dt>\r\n<dd>\r\n[bash]C:\\Documents and Settings\\[userName]\\Configuraci\u00f3n local\\Datos de programa\\Google\\Chrome\\User Data\\Default\\User StyleSheets\\Custom.css[\/bash]<\/dd>\r\n<dt>Linux<\/dt>\r\n<dd>\r\n[bash]~\/.config\/google-chrome\/Default\/User StyleSheets\/Customs.css[\/bash]<\/dd>\r\n<dt>Mac<\/dt>\r\n<dd>\r\n[bash]~\/Library\/Application Support\/Google\/Chrome\/Default\/User StyleSheets\/Custom.css[\/bash]<\/dd>\r\n<\/dl>\r\nEl archivo Custom.css lo vas a tener en blanco, as\u00ed que para guiarte en los cambios de sobre-escritura de clases pod\u00e9s ver los que actualmente est\u00e1n aplicados en tu browser ingresando lo siguiente en el cuadro de direcciones del Chrome \r\n[bash]chrome-devtools:\/\/devtools\/devTools.css[\/bash]\r\nComo se puede ver, el archivo es bastante extenso, pero se torna muy divertido lo que se puede lograr dandole tu <em>estilo<\/em>.\r\n\r\nPor ejemplo, para solucionar mi problema con el tama\u00f1o de la font, hice lo siguiente en mi Custom.css (estoy en Ubuntu):\r\n[css]\r\nbody.platform-linux .monospace, body.platform-linux .source-code {\r\n    font-size: 22px !important;\r\n    line-height: 26px;\r\n    font-family: dejavu sans mono, monospace;\r\n}\r\n[\/css]\r\n\r\nAlgunos links con Themes (algunos extra\u00eddos de <a href=\"http:\/\/darcyclarke.me\/design\/skin-your-chrome-inspector\/\" target=\"_blank\">este excelente post<\/a>):\r\n<ul>\r\n<li><a href=\"https:\/\/gist.github.com\/1150520\" target=\"_blank\">IR_black<\/a>\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/Screen-shot-2011-08-19-at-2.06.52-PM.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/Screen-shot-2011-08-19-at-2.06.52-PM-300x121.png\" alt=\"\" title=\"Screen shot 2011-08-19 at 2.06.52 PM\" width=\"300\" height=\"121\" class=\"alignnone size-medium wp-image-2484\" \/><\/a>\r\n<\/li>\r\n<li><a href=\"https:\/\/gist.github.com\/1152045\" target=\"_blank\">Expresso<\/a>\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/Style-Chrome-Inspector-3.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/Style-Chrome-Inspector-3-300x122.png\" alt=\"\" title=\"Style Chrome Inspector-3\" width=\"300\" height=\"122\" class=\"alignnone size-medium wp-image-2485\" \/><\/a>\r\n<\/li>\r\n<li><a href=\"https:\/\/gist.github.com\/2174604\" target=\"_blank\">Solarized Dark (mi preferido)<\/a>\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/3yAuuh.jpg\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/3yAuuh-300x80.jpg\" alt=\"\" title=\"3yAuuh\" width=\"300\" height=\"80\" class=\"alignnone size-medium wp-image-2481\" \/><\/a>\r\n<\/li>\r\n<ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 02 Aug 2012 11:55:34 +0000","created_by":1,"updated_at":"Tue, 18 Sep 2012 18:48:38 +0000","updated_by":1,"published_at":"Thu, 02 Aug 2012 11:55:34 +0000","published_by":1},{"id":2139,"title":"FAQ","slug":"faq","markdown":"\n### \u00bfPor qu\u00e9 existe fernetjs?\n\n Cre\u00edmos que hac\u00eda falta un poco de movimiento, una comunidad de javascript de habla hispana, por y para gente apasionada, y sin ning\u00fan tipo de inter\u00e9s comercial. fernetjs intenta ser un espacio para todos aquellos con ganas de compartir sus experiencias en js o cosas que haya descubierto, ya sea a trav\u00e9s de una entrada de blog, un comentario, un tweet, o incluso eventuales juntadas y hackathons. ### \u00bfC\u00f3mo hago para postear?\n\n1. Registrarse en el sitio o hacer login a trav\u00e9s del bot\u00f3n \"Postear\"\n2. Agregar una nueva entrada.  Conviene armar el post en el modo html, especialmente si contiene c\u00f3digo o alg\u00fan tipo embebido, por ejemplo js, iframe, etc. Previsualizar el post y ver c\u00f3mo queda antes de enviar para revisi\u00f3n o publicar es muy importante.\n3. Enviar para revisi\u00f3n.\n\n Nada m\u00e1s ni nada menos.. esto es un wordpress as\u00ed que mucha gente ya va a estar familiarizada. Sino, hay muy buenos [recursos en internet](https:\/\/www.google.com.ar\/search?hl=es&q=postear%20wordpress \"postear en wordpress\"), o estamos dispuestos a ayudar. ### \u00bfC\u00f3mo agrego c\u00f3digo a mi post?\n\n El c\u00f3digo javascript se escribe entre [js]...c\u00f3digo...[\/js], de la misma manera existen [css] y [html] por ejemplo. ### \u00bfQu\u00e9 criterios tiene que cumplir mi post?\n\n * Tiene que ser sobre javascript o relacionado. * Evitar agresi\u00f3n, o material destructivo (es muy gen\u00e9rico, pero esto es puro sentido com\u00fan y no un mecanismo de censura). * El contenido tiene que ser apto para todo p\u00fablico. No puedo incluir una foto de una mina desnuda con un tatuaje de node.js ### \u00bfPor qu\u00e9 tienen que aprobar mi post?\n\n![trolling...](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/troll.png \"trolling\") Por eso. Para prevenir posts trolls o ataques terroristas de fan\u00e1ticos de vbscript. Posteando la gente puede ir ganando confianza e ir ganando privilegios, como postear sin necesitar aprobaci\u00f3n (No hay un l\u00edmite definido por ahora). ### \u00bfCu\u00e1l es el mail de fernetjs?\n\n equipo@fernetjs.com Se acepta todo tipo de sugerencia, propuesta, feedback. En fin.. todo menos spam.\n","html":"<h3>\u00bfPor qu\u00e9 existe fernetjs?<\/h3>\r\nCre\u00edmos que hac\u00eda falta un poco de movimiento, una comunidad de javascript de habla hispana, por y para gente apasionada, y sin ning\u00fan tipo de inter\u00e9s comercial.\r\nfernetjs intenta ser un espacio para todos aquellos con ganas de compartir sus experiencias en js o cosas que haya descubierto, ya sea a trav\u00e9s de una entrada de blog, un comentario, un tweet, o incluso eventuales juntadas y hackathons.\r\n<h3>\u00bfC\u00f3mo hago para postear?<\/h3>\r\n<ol>\r\n\t<li>Registrarse en el sitio o hacer login a trav\u00e9s del bot\u00f3n \"Postear\"<\/li>\r\n\t<li>Agregar una nueva entrada.\r\n<p>\tConviene armar el post en el modo html, especialmente si contiene c\u00f3digo o alg\u00fan tipo embebido, por ejemplo js, iframe, etc.\r\n\tPrevisualizar el post y ver c\u00f3mo queda antes de enviar para revisi\u00f3n o publicar es muy importante.\r\n<\/p>\r\n<\/li>\r\n\t<li>Enviar para revisi\u00f3n.<\/li>\r\n<\/ol>\r\nNada m\u00e1s ni nada menos.. esto es un wordpress as\u00ed que mucha gente ya va a estar familiarizada. Sino, hay muy buenos <a href=\"https:\/\/www.google.com.ar\/search?hl=es&q=postear%20wordpress\" title=\"postear en wordpress\" target=\"_blank\">recursos en internet<\/a>, o estamos dispuestos a ayudar.\r\n<h3>\u00bfC\u00f3mo agrego c\u00f3digo a mi post?<\/h3>\r\nEl c\u00f3digo javascript se escribe entre &#91;js&#93;...c\u00f3digo...&#91;\/js&#93;, de la misma manera existen &#91;css&#93; y &#91;html&#93; por ejemplo.\r\n<h3>\u00bfQu\u00e9 criterios tiene que cumplir mi post?<\/h3>\r\n* Tiene que ser sobre javascript o relacionado.\r\n* Evitar agresi\u00f3n, o material destructivo (es muy gen\u00e9rico, pero esto es puro sentido com\u00fan y no un mecanismo de censura).\r\n* El contenido tiene que ser apto para todo p\u00fablico. No puedo incluir una foto de una mina desnuda con un tatuaje de node.js\r\n<h3>\u00bfPor qu\u00e9 tienen que aprobar mi post?<\/h3>\r\n<img class=\"alignleft  wp-image-2141\" title=\"trolling\" src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/06\/troll.png\" alt=\"trolling...\" width=\"210\" height=\"210\" \/>\r\n\r\nPor eso. Para prevenir posts trolls o ataques terroristas de fan\u00e1ticos de vbscript. Posteando la gente puede ir ganando confianza e ir ganando privilegios, como postear sin necesitar aprobaci\u00f3n (No hay un l\u00edmite definido por ahora).\r\n\r\n<h3>\u00bfCu\u00e1l es el mail de fernetjs?<\/h3>\r\nequipo@fernetjs.com\r\nSe acepta todo tipo de sugerencia, propuesta, feedback. En fin.. todo menos spam.","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Thu, 02 Aug 2012 22:55:27 +0000","created_by":1,"updated_at":"Thu, 02 Aug 2012 22:55:27 +0000","updated_by":1,"published_at":"Thu, 02 Aug 2012 22:55:27 +0000","published_by":1},{"id":2038,"title":"Buenos amigos: NodeJS + MongoDB ","slug":"buenos-amigos-nodejs-mongodb","markdown":"\nEl intento de este post no es explicar qu\u00e9 es y c\u00f3mo funciona MongoDB sino como utilizar una base con NodeJS. Para lo referido a MongoDB, descubr\u00ed un librito excelente, corto y conciso en la [jsConfAR](http:\/\/jsconf.com.ar\/): [The Little MongoDB Book by Karl Seguin](http:\/\/openmymind.net\/mongodb.pdf), lo interesante del libro es que est\u00e1 hecho en markdown y publicado en [github](https:\/\/github.com\/karlseguin\/the-little-mongodb-book) con una [versi\u00f3n al espa\u00f1ol](https:\/\/github.com\/uokesita\/the-little-mongodb-book\/blob\/master\/es\/mongodb.markdown) traducida por [@uokesita](http:\/\/www.codersvenezuela.com\/post\/el-pequeno-libro-de-mongodb\/54). Me tom\u00e9 el trabajito de pasar el markdown espa\u00f1ol a varias versiones para que lo puedas leer online, en alg\u00fan dispositivo movil o en el kindle: ![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/title.png \"title\")\n\n- [PDF](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/mongodb.pdf \"El peque\u00f1o libro MongoDB - Version PDF\")\n- [ePub](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/mongodb.epub \"El peque\u00f1o libro MongoDB - version epub\")\n- [Mobi](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/mongodb.mobi \"El peque\u00f1o libro MongoDB - version mobi\")\n\n  \n#### Instalando y configurando un Server Mongo\n\n Mi prueba la hice en Ubuntu, pero no varia mucho para otras distribuciones\/ SOs, pod\u00e9s ver las instrucciones para otros en: [Quickstart - Installation Guides](http:\/\/www.mongodb.org\/display\/DOCS\/Quickstart). Descargamos la versi\u00f3n estable de MongoDB desde el [sitio oficial de descargas](http:\/\/www.mongodb.org\/downloads) Despu\u00e9s que termina toda la descarga, descomprimimos y navegamos hasta la carpeta bin de adentro y creamos un archivo mongodb.config donde le configuramos el path a donde van a ir las bases de datos (en mi caso de linux) agreg\u00e1ndole la siguiente linea: [c] dbpath=\/home\/[usuario]\/mongodb\/data [\/c] Para windows podr\u00eda ser: [c] dbpath=c:\\mongodb\\data [\/c] > Asegurate de que el path exista y sino crealo (yo tuve que crear el directorio data)\n\n Y ahora (parados en el bin) iniciamos el servidor con el path al mongodb.config: [c] .\/mongod --config mongodb.config [\/c] > *mongod* es el proceso de servidor y *mongo* el cliente.\n\n En ese momento vamos a ver que inicia el server y queda en espera en un puerto, en mi caso el 27017 (que es el default de Mongo) [c] MongoDB starting : pid=22105 port=27017 dbpath=\/data\/db\/ 32-bit host=miUbuntu [\/c] Listo!, ya tenemos el server corriendo. Ahora abrimos otro terminal y ejecutemos el cliente *mongo* y un *db.version()* para probar: [c] $ .\/mongo > db.version() [\/c] Bueno, ya tenemos todo listo, podemos crear una colecci\u00f3n y un documento: [c] use unTestDB db.personas.insert({nombre: 'pepe', apellido: 'gonzales'}) db.personas.find() { \"_id\" : ObjectId(\"4fbaf11c7b25b9eac0403c26\"), \"nombre\" : \"pepe\", \"apellido\" : \"gonzales\" } [\/c] > El cliente lo iniciamos para crear una base de prueba, ya podemos matar el proceso *mongo* si molesta. No mates el *mongod* que es el server!\n\n  \n#### Conectando a MongoDB desde NodeJS\n\n Primero necesitamos un driver para node, y ahora se pone f\u00e1cil: [c] npm install mongodb [\/c] El packete de NPM [mongodb](https:\/\/github.com\/mongodb\/node-mongodb-native\/) es un driver para NodeJS como tambi\u00e9n hay otras bibliotecas que vienen con algunas cosas interesantes como [Mongoose](http:\/\/mongoosejs.com\/), o [MongoJS](https:\/\/github.com\/gett\/mongojs), pero no es nuestro caso ahora. Creamos un app.js donde vamos a hacer una prueba contra la base unTestDB que creamos antes: [js] \/\/ hacemos referencia a la dependencia var mongodb = require('mongodb'); \/\/ obtenemos el server MongoDB que dejamos corriendo \/\/ *** el puerto 27017 es el default de MongoDB var server = new mongodb.Server(\"127.0.0.1\", 27017, {}); \/\/ obtenemos la base de datos de prueba que creamos var dbTest = new mongodb.Db('unTestDB', server, {}) \/\/ abrimos la base pasando el callback para cuando est\u00e9 lista para usar dbTest.open(function (error, client) { if (error) throw error; \/\/en el par\u00e1metro client recibimos el cliente para comenzar a hacer llamadas \/\/este par\u00e1metro ser\u00eda lo mismo que hicimos por consola al llamar a mongo \/\/Obtenemos la coleccion personas que creamos antes var collection = new mongodb.Collection(client, 'personas'); \/\/disparamos un query buscando la persona que habiamos insertado por consola collection.find({'nombre': 'pepe'}).toArray(function(err, docs) { \/\/imprimimos en la consola el resultado console.dir(docs); }); }); [\/js] Lo que nos queda es correr el app.js y ver el output en la consola [bash] $ node app.js [ { _id: 4fbaf11c7b25b9eac0403c26, nombre: 'pepe', apellido: 'gonzales' } ] [\/bash] Y eso es todo!. De nuevo, el objetivo del post es que veas lo simple que es engancharse desde NodeJS a un MongoDB, la parte de estudio (si nunca usaste Mongo) est\u00e1 m\u00e1s del lado de qu\u00e9 es y c\u00f3mo funciona Mongo, el libro que est\u00e1 al inicio del post es un arranque muy bueno. #### Links \u00fatiles\n\n- [Documentaci\u00f3n completa del Driver Nativo de MongoDB para NodeJS](http:\/\/mongodb.github.com\/node-mongodb-native\/contents.html)\n- [The Little MongoDB Book by Karl Seguin](http:\/\/openmymind.net\/mongodb.pdf)\n- [Quickstart - Installation Guides](http:\/\/www.mongodb.org\/display\/DOCS\/Quickstart)\n- [Sitio oficial de descargas - MongoDB](http:\/\/www.mongodb.org\/downloads)\n- [Mongo-Express: Interfaz Web de administraci\u00f3n de bases MongoDB](https:\/\/github.com\/andzdroid\/mongo-express)\n\n##### Algunos drivers y bibliotecas\n\n- [MongoDB driver usado en la explicaci\u00f3n](https:\/\/github.com\/mongodb\/node-mongodb-native\/)\n- [MongoJS](https:\/\/github.com\/gett\/mongojs)\n- [Mongoose (ODM)](http:\/\/mongoosejs.com\/)\n- [Lista de Drivers Soportados](http:\/\/www.mongodb.org\/display\/DOCS\/Drivers)\n\n[Lista completa de Bibliotecas para MongoDB en NodeJS](https:\/\/github.com\/joyent\/node\/wiki\/modules#wiki-db-nosql-mongo)\n","html":"El intento de este post no es explicar qu\u00e9 es y c\u00f3mo funciona MongoDB sino como utilizar una base con NodeJS.\r\n\r\nPara lo referido a MongoDB, descubr\u00ed un librito excelente, corto y conciso en la <a href=\"http:\/\/jsconf.com.ar\/\">jsConfAR<\/a>: <a href=\"http:\/\/openmymind.net\/mongodb.pdf\">The Little MongoDB Book by Karl Seguin<\/a>, lo interesante del libro es que est\u00e1 hecho en markdown y publicado en <a href=\"https:\/\/github.com\/karlseguin\/the-little-mongodb-book\">github<\/a> con una <a href=\"https:\/\/github.com\/uokesita\/the-little-mongodb-book\/blob\/master\/es\/mongodb.markdown\">versi\u00f3n al espa\u00f1ol<\/a> traducida por <a href=\"http:\/\/www.codersvenezuela.com\/post\/el-pequeno-libro-de-mongodb\/54\">@uokesita<\/a>.\r\n\r\nMe tom\u00e9 el trabajito de pasar el markdown espa\u00f1ol a varias versiones para que lo puedas leer online, en alg\u00fan dispositivo movil o en el kindle:\r\n<img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/title.png\" alt=\"\" title=\"title\" width=\"180\" height=\"60\" class=\"alignleft size-full wp-image-2584\" \/>\r\n<ul style=\"display: inline-block;\">\r\n<li><a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/mongodb.pdf\" title=\"El peque\u00f1o libro MongoDB - Version PDF\">PDF<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/mongodb.epub\" title=\"El peque\u00f1o libro MongoDB - version epub\">ePub<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/08\/mongodb.mobi\" title=\"El peque\u00f1o libro MongoDB - version mobi\">Mobi<\/a><\/li>\r\n<\/ul>\r\n<br\/>\r\n<h4>Instalando y configurando un Server Mongo<\/h4>\r\nMi prueba la hice en Ubuntu, pero no varia mucho para otras distribuciones\/ SOs, pod\u00e9s ver las instrucciones para otros en: <a href=\"http:\/\/www.mongodb.org\/display\/DOCS\/Quickstart\">Quickstart - Installation Guides<\/a>.\r\n\r\nDescargamos la versi\u00f3n estable de MongoDB desde el <a href=\"http:\/\/www.mongodb.org\/downloads\">sitio oficial de descargas<\/a>\r\n\r\nDespu\u00e9s que termina toda la descarga, descomprimimos y navegamos hasta la carpeta bin de adentro y creamos un archivo mongodb.config donde le configuramos el path a donde van a ir las bases de datos (en mi caso de linux) agreg\u00e1ndole la siguiente linea:\r\n[c]\r\ndbpath=\/home\/[usuario]\/mongodb\/data\r\n[\/c]\r\nPara windows podr\u00eda ser:\r\n[c]\r\ndbpath=c:\\mongodb\\data\r\n[\/c]\r\n\r\n<blockquote>\r\nAsegurate de que el path exista y sino crealo (yo tuve que crear el directorio data)\r\n<\/blockquote>\r\n\r\nY ahora (parados en el bin) iniciamos el servidor con el path al mongodb.config:\r\n[c]\r\n.\/mongod --config mongodb.config\r\n[\/c]\r\n\r\n<blockquote>\r\n<em>mongod<\/em> es el proceso de servidor y <em>mongo<\/em> el cliente.\r\n<\/blockquote>\r\n\r\nEn ese momento vamos a ver que inicia el server y queda en espera en un puerto, en mi caso el 27017 (que es el default de Mongo)\r\n[c]\r\nMongoDB starting : pid=22105 port=27017 dbpath=\/data\/db\/ 32-bit host=miUbuntu\r\n[\/c]\r\n\r\nListo!, ya tenemos el server corriendo. Ahora abrimos otro terminal y ejecutemos el cliente <em>mongo<\/em> y un <em>db.version()<\/em> para probar:\r\n\r\n[c]\r\n$ .\/mongo\r\n&gt; db.version()\r\n[\/c]\r\n\r\nBueno, ya tenemos todo listo, podemos crear una colecci\u00f3n y un documento:\r\n[c]\r\nuse unTestDB\r\ndb.personas.insert({nombre: 'pepe', apellido: 'gonzales'})\r\ndb.personas.find()\r\n\r\n{ &quot;_id&quot; : ObjectId(&quot;4fbaf11c7b25b9eac0403c26&quot;), &quot;nombre&quot; : &quot;pepe&quot;, &quot;apellido&quot; : &quot;gonzales&quot; }\r\n[\/c]\r\n\r\n<blockquote>\r\nEl cliente lo iniciamos para crear una base de prueba, ya podemos matar el proceso <em>mongo<\/em> si molesta.\r\nNo mates el <em>mongod<\/em> que es el server!\r\n<\/blockquote>\r\n\r\n<br\/>\r\n<h4>Conectando a MongoDB desde NodeJS<\/h4>\r\nPrimero necesitamos un driver para node, y ahora se pone f\u00e1cil:\r\n\r\n[c]\r\nnpm install mongodb\r\n[\/c]\r\n\r\nEl packete de NPM <a href=\"https:\/\/github.com\/mongodb\/node-mongodb-native\/\">mongodb<\/a> es un driver para NodeJS como tambi\u00e9n hay otras bibliotecas que vienen con algunas cosas interesantes como <a href=\"http:\/\/mongoosejs.com\/\">Mongoose<\/a>, o <a href=\"https:\/\/github.com\/gett\/mongojs\">MongoJS<\/a>, pero no es nuestro caso ahora.\r\n\r\nCreamos un app.js donde vamos a hacer una prueba contra la base unTestDB que creamos antes:\r\n[js]\r\n\/\/ hacemos referencia a la dependencia \r\nvar mongodb = require('mongodb');\r\n\r\n\/\/ obtenemos el server MongoDB que dejamos corriendo\r\n\/\/ *** el puerto 27017 es el default de MongoDB\r\nvar server = new mongodb.Server(&quot;127.0.0.1&quot;, 27017, {});\r\n\r\n\/\/ obtenemos la base de datos de prueba que creamos\r\nvar dbTest = new mongodb.Db('unTestDB', server, {})\r\n\r\n\/\/ abrimos la base pasando el callback para cuando est\u00e9 lista para usar\r\ndbTest.open(function (error, client) {\r\n  if (error) throw error;\r\n\r\n  \/\/en el par\u00e1metro client recibimos el cliente para comenzar a hacer llamadas\r\n  \/\/este par\u00e1metro ser\u00eda lo mismo que hicimos por consola al llamar a mongo\r\n  \r\n  \/\/Obtenemos la coleccion personas que creamos antes\r\n  var collection = new mongodb.Collection(client, 'personas');\r\n  \r\n  \/\/disparamos un query buscando la persona que habiamos insertado por consola\r\n  collection.find({'nombre': 'pepe'}).toArray(function(err, docs) {\r\n\r\n    \/\/imprimimos en la consola el resultado\r\n    console.dir(docs);\r\n  });\r\n});\r\n[\/js]\r\n\r\nLo que nos queda es correr el app.js y ver el output en la consola\r\n[bash]\r\n$ node app.js\r\n[ { _id: 4fbaf11c7b25b9eac0403c26,\r\n    nombre: 'pepe',\r\n    apellido: 'gonzales' } ]\r\n[\/bash]\r\n\r\nY eso es todo!. \r\n\r\nDe nuevo, el objetivo del post es que veas lo simple que es engancharse desde NodeJS a un MongoDB, la parte de estudio (si nunca usaste Mongo) est\u00e1 m\u00e1s del lado de qu\u00e9 es y c\u00f3mo funciona Mongo, el libro que est\u00e1 al inicio del post es un arranque muy bueno.\r\n\r\n<h4>Links \u00fatiles<\/h4>\r\n<ul>\r\n<li><a href=\"http:\/\/mongodb.github.com\/node-mongodb-native\/contents.html\">Documentaci\u00f3n completa del Driver Nativo de MongoDB para NodeJS<\/a><\/li>\r\n<li><a href=\"http:\/\/openmymind.net\/mongodb.pdf\">The Little MongoDB Book by Karl Seguin<\/a><\/li>\r\n<li><a href=\"http:\/\/www.mongodb.org\/display\/DOCS\/Quickstart\">Quickstart - Installation Guides<\/a><\/li>\r\n<li><a href=\"http:\/\/www.mongodb.org\/downloads\">Sitio oficial de descargas - MongoDB<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/andzdroid\/mongo-express\">Mongo-Express: Interfaz Web de administraci\u00f3n de bases MongoDB<\/a><\/li>\r\n<\/ul>\r\n<h5>Algunos drivers y bibliotecas<\/h5>\r\n<ul>\r\n<li><a href=\"https:\/\/github.com\/mongodb\/node-mongodb-native\/\">MongoDB driver usado en la explicaci\u00f3n<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/gett\/mongojs\">MongoJS<\/a><\/li>\r\n<li><a href=\"http:\/\/mongoosejs.com\/\">Mongoose (ODM)<\/a><\/li>\r\n<li><a href=\"http:\/\/www.mongodb.org\/display\/DOCS\/Drivers\">Lista de Drivers Soportados<\/a><\/li>\r\n<\/ul>\r\n\r\n<a href=\"https:\/\/github.com\/joyent\/node\/wiki\/modules#wiki-db-nosql-mongo\">Lista completa de Bibliotecas para MongoDB en NodeJS<\/a>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 13 Aug 2012 09:53:15 +0000","created_by":1,"updated_at":"Thu, 06 Dec 2012 11:05:11 +0000","updated_by":1,"published_at":"Mon, 13 Aug 2012 09:53:15 +0000","published_by":1},{"id":2616,"title":"Construyendo un Game Loop","slug":"construyendo-un-game-loop","markdown":"\nHace tiempo que tengo ganas de armar este post, hay muchas formas de hacerlo, seguramente hay mejores. Est\u00e1 es una forma a la que llegu\u00e9 yo probando varias cosas y la queria compartir. Antes que nada, el prop\u00f3sito de este post es ir creando un Game Loop paso por paso intentando ver detalladamente cada aspecto para llegar al c\u00f3digo final, lo que puede ser el alma de un juego en HTML5.\n\n#### Temas\n\n1. [Que es el Game Loop?](#1.1)\n2. [Encapsulando el juego](#1.2)\n3. [Agregando Canvas de HTML5](#1.3)\n4. [Actualizando y Dibujando](#1.4)\n5. [Optimizando](#1.5)\n1. [Canvas Buffer](#1.5.1)\n2. [Request Animation Frame](#1.5.2)\n\n7. [Conclusi\u00f3n](#1.6)\n\n- - - - - -\n\n#### [Que es el Game Loop?]()\n\n Dentro de la jerga gamer se le llama asi al ciclo en el que se basa todo el juego, un ciclo \"cuasi\" infinito por el cual el juego actualiza sus estados y se dibuja una y otra vez mientras este vive. [js] var velocidad = 20; function loop(){ actualizar(); dibujar(); setTimeout(loop, velocidad); } loop(); [\/js] Lo anterior es una versi\u00f3n extremadamente reducida del game loop, b\u00e1sicamente tengo una funcion *loop* a la que se llama a s\u00ed misma cada 20 mili-segundos y es la encargada de primero actualizar los estados del juego y despu\u00e9s dibujar. > Para una explicaci\u00f3n detallada del setTimeout te dejo [este post](http:\/\/fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/ \"Ejecuciones Asincr\u00f3nicas de funciones\")\n\n#### [Encapsulando el juego]()\n\n Para empezar a darle forma vamos a usar el [Patr\u00f3n M\u00f3dulo](http:\/\/fernetjs.com\/2012\/05\/patrones-module-y-namespace\/ \"Patrones: Module y Namespace\") y a mejorarlo. [js] var juego = (function(){ var timer, velocidad = 20; function actualizar() { \/\/actualizo el estado } function dibujar() { \/\/dibujo el estado } function loop(){ actualizar(); dibujar(); timer = setTimeout(loop, velocidad); } return { iniciar: function() { loop(); }, detener: function() { clearTimeout(timer); } } })(); juego.iniciar(); \/\/juego.detener(); [\/js] La idea de usar este patr\u00f3n es encapsular la funcionalidad del juego en un m\u00f3dulo, de esta manera cerrar el alcance y dejar lo que deber\u00eda ser privado, como privado (en este caso el loop, actualizar y dibujar) Como se v\u00e9 retornamos un objeto con el acceso a nuestro m\u00f3dulo, para poder iniciar o detener el juego. #### [Agregando Canvas de HTML5]()\n\n Ahora, para hacerlo un poco mas *real*, vamos a meter un canvas, ya que es una excelente opci\u00f3n hoy en d\u00eda al momento de desarrollar un juego con HTML5. [html] <canvas id=\"canvas\" width=\"600px\" height=\"600px\"> Tu explorador no soporta Canvas <\/canvas> [\/html] [js highlight=\"4,5,22-28,32\"] var juego = (function(){ var timer, velocidad = 20, canvas, contexto; function actualizar() { \/\/actualizo el estado } function dibujar() { \/\/dibujo el estado } function loop(){ actualizar(); dibujar(); timer = setTimeout(loop, velocidad); } function iniciarCanvas() { canvas = document.getElementById('canvas'); if (canvas.getContext){ contexto = canvas.getContext('2d'); } else throw \"canvas no soportado!\"; } return { iniciar: function() { iniciarCanvas(); loop(); }, detener: function() { clearTimeout(timer); } } })(); [\/js] Lo que hicimos fue agregar 2 variables dentro del alcance del m\u00f3dulo, uno para el canvas y otro para el contexto para poder referenciarlo desde la funci\u00f3n dibujar. Creamos una funci\u00f3n para iniciar y asignar las variables, y agregamos la llamada a esa funci\u00f3n al momento de iniciar el juego. > Te recomiendo unos posts si no estas familiarizado con Canvas: [Dibujando](http:\/\/fernetjs.com\/2011\/11\/dibujando-en-canvas-html5\/ \"Dibujando en CANVAS \u2013 HTML5\") y [Animando](http:\/\/fernetjs.com\/2011\/12\/animando-en-canvas-html5\/ \"Animando en CANVAS \u2013 HTML5\")\n\n#### [Actualizando y Dibujando]()\n\n Para completarlo vamos a hacer que realmente funcione con algo, como ejemplo hacer que dibuje y mueva un cuadrado cuando el usuario presiona las flechas. Primero agregamos las 2 variables que vamos a usar para conocer la tecla presionada y el estado del cuadrado actual: [js highlight=\"6,7-12\"] var juego = (function(){ var timer, velocidad = 20, canvas, contexto, presionada, cuadrado: { x: 100, y: 25, width: 50, height: 150 }; \/\/ aca sigue el mismo c\u00f3digo ... [\/js] Implementamos el manejo de los eventos keydown y keyup para saber la tecla presionada: [js highlight=\"3,6\"] function agregarManejador() { document.addEventListener('keydown', function(evento) { presionada = evento.keyCode; }); document.addEventListener('keyup', function(evento) { presionada = null; }); } [\/js] Luego implementamos el actualizar() con el cambio de estado del cuadrado (cuadrado.x) dependendiendo de la tecla presionada: [js] function actualizar() { switch(presionada){ case '37': \/\/izquierda cuadrado.x -= 20; \/\/para que no se pase del inicio del canvas if (cuadrado.x < 0) cuadrado.x = 0; break; case '39': \/\/derecha cuadrado.x += 20; \/\/para que no se pase del largo del canvas if (cuadrado.x + cuadrado.width > canvas.width) cuadrado.x = canvas.width - cuadrado.width; break; } } [\/js] Entonces cada vez que se ejecute la funci\u00f3n comprueba la flecha presionada y actualiza la x del cuadrado. Ahora nos queda dibujar el estado del cuadrado en cada momento que se ejecute dibujar(): [js] function dibujar() { contexto.clearRect(0, 0, canvas.width, canvas.height); \/\/fillRect(x,y,width,height); contexto.fillRect(cuadrado.x, cuadrado.y, cuadrado.width, cuadrado.height); } [\/js] En la primer linea limpiamos todo el canvas, y despues dibujamos el cuadrado en la posici\u00f3n actual. Nos queda algo asi: [iframe style=\"width: 100%; height: 300px\" src=\"http:\/\/jsfiddle.net\/pjnovas\/7F26V\/embedded\/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"][\/iframe] #### [Optimizando]()\n\n Hay muchas optimizaciones para tener en cuenta al hacer un juego en javascript, quiero centrarme en 2 que considero importantes y principales, m\u00e1s adelante veremos otras. ##### [Canvas Buffer]()\n\n Como suena, tener un canvas que funcione como un buffer para el redibujo continuo, b\u00e1sicamente la idea es dibujar sobre otro canvas *oculto* y cuando est\u00e9 todo listo dibujarlo completo sobre el *real*, porque esto?, si bien la mejora no es increible, logramos evitar el famoso \"flickering\" y es esa sensaci\u00f3n de que medio se traba la animaci\u00f3n. Para explicarlo mejor: suponiendo que tenemos 30 elementos que se dibujan de a uno sobre el canvas, y a medida que se van dibujando y armando la escena de una secuencia de animaci\u00f3n puede tardar un m\u00ednimo de tiempo en el cual el ojo llega a percibirlo y nos queda un efecto no muy feliz. Bueno, para evitar ese \"efecto\", dibujamos todos en un canvas \"falso\" y despu\u00e9s aplicamos el dibujo completo de la escena en el canvas \"real\". Genial, vamos a agregar esta optimizaci\u00f3n al game loop volviendo a nuestro c\u00f3digo, empezando por la funci\u00f3n donde iniciamos el canvas: [js highlight=\"11-13,17\"] \/\/Nos creamos las variables de buffer al inicio del modulo \/\/ ... otras variables que ten\u00edamos canvas, contexto, canvasBuffer, contextoBuffer; function iniciarCanvas() { canvas = document.getElementById('canvas'); canvasBuffer = document.createElement('canvas'); canvasBuffer.width = canvas.width; canvasBuffer.height = canvas.height; if (canvas.getContext){ contexto = canvas.getContext('2d'); contextoBuffer = canvasBuffer.getContext('2d'); } else throw \"canvas no soportado!\"; } [\/js] Lo que hicimos ahi es crearnos el \"falso\" canvas y su contexto partiendo como base del tama\u00f1o del canvas real, ahora lo que necesitamos es, al momento de dibujar, hacerlo sobre el falso y despu\u00e9s aplicarlo en el real, entonces nuestra funcion dibujar() quedar\u00eda as\u00ed: [js highlight=\"2,3,10\"] function dibujar() { contextoBuffer.clearRect(0, 0, canvas.width, canvas.height); contextoBuffer.fillRect(cuadrado.x, cuadrado.y, cuadrado.width, cuadrado.height); \/\/dibujamos sobre el contexto del buffer todo lo que necesitemos \/\/limpiamos el real contexto.clearRect(0, 0, canvas.width, canvas.height); \/\/aplicamos el buffer contexto.drawImage(canvasBuffer, 0, 0); } [\/js] ##### [Request Animation Frame]()\n\n Nuestro setTimeout() para realizar el loop es genial, pero no ser\u00eda mejor avisarle al explorador que vamos a correr una animaci\u00f3n y queremos que se prepare y lo haga lo mejor que pueda?, bueno eso es el requestAnimationFrame(). Fue creado con ese prop\u00f3sito, que el explorador sepa cuando vamos a hacer este tipo de cosas, como por ejemplo: un loop con muchos \"frames\" para realizar una animaci\u00f3n. El cambio es bastante simple para nuestro game loop, ya que es \"casi\" reemplazar el setTimeout() por el pedido de animaciones por frames as\u00ed que cambiemos el loop: [js highlight=\"6,12,16\"] function loop(){ actualizar(); dibujar(); \/\/timer = setTimeout(loop, velocidad); timer = window.requestAnimationFrame(loop); } return { iniciar: function() { iniciarCanvas(); loop(); }, detener: function() { \/\/clearTimeout(timer); window.cancelAnimationFrame(timer); } } [\/js] Como se v\u00e9 el cambio fue bastante simple, pero no se si notaste que ya no tenemos velocidad, bueno, es mejor no tenerla jeje, personalmente prefiero que el requestAnimationFrame la maneje por mi, por el hecho de que es bastante complicado calcular un buen \"frame rate\" no siendo un experto en el tema y sobretodo pensando que ese frame rate es el tiempo que tenemos para dibujar tooodo el estado de la escena (suena complicado para mi :P) Y si el explorador no lo soporta?, bueno para ese caso les recomiendo utilizar el [requestAnimationFrame polyfill de Erik M\u00f6ller](http:\/\/my.opera.com\/emoller\/blog\/2011\/12\/20\/requestanimationframe-for-smart-er-animating), en el cual se arm\u00f3 un script buenisimo con todo ese problema resuelto, dejandonos el *window.requestAnimationFrame* listo para usar est\u00e9 o no soportado (esto lo hace llevandolo a un setTimeout como \u00faltima medida) #### [Conclusi\u00f3n]()\n\n**Que sigue ahora?, bueno primero que nada este c\u00f3digo que construimos es a modo de ejemplo, las funciones de actualizar() y dibujar() deber\u00edan encargarse de llamar a otros m\u00f3dulos o clases y delegar totalmente las funcionalidades, con esto quiero decir que no deber\u00eda crecer mas el m\u00f3dulo de lo que est\u00e1 y mantenerse s\u00f3lo en la l\u00f3gica del game loop, no queremos que se vuelva un mounstro gigante :)** Les dejo el Game Loop terminado con el ejemplo: [iframe style=\"width: 100%; height: 300px\" src=\"http:\/\/jsfiddle.net\/pjnovas\/SB8Pn\/embedded\/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"][\/iframe] Y un [Gist](http:\/\/gist.github.com\/3649399) con el Game Loop completo como template para que hagan cosas locas: [js] var fernetjs = fernetjs || {}; fernetjs.juego = (function(){ var reqAnimId, canvas, contexto, canvasBuffer, contextoBuffer; function actualizar() { \/\/actualizaciones del estado } function dibujar() { contextoBuffer.clearRect(0, 0, canvas.width, canvas.height); \/\/dibujos en el contextoBuffer contexto.clearRect(0, 0, canvas.width, canvas.height); contexto.drawImage(canvasBuffer, 0, 0); } function iniciarCanvas() { canvas = document.getElementById('canvas'); canvasBuffer = document.createElement('canvas'); canvasBuffer.width = canvas.width; canvasBuffer.height = canvas.height; if (canvas.getContext){ contexto = canvas.getContext('2d'); contextoBuffer = canvasBuffer.getContext('2d'); } else throw \"canvas no soportado!\"; } function loop(){ actualizar(); dibujar(); reqAnimId = window.requestAnimationFrame(loop); } return { iniciar: function() { if (!canvas) iniciarCanvas(); if(reqAnimId) this.detener(); loop(); }, detener: function() { window.cancelAnimationFrame(reqAnimId); reqAnimId = 0; } } })(); \/\/iniciar: \/\/fernetjs.juego.iniciar(); \/\/detener: \/\/fernetjs.juego.detener(); [\/js]\n","html":"Hace tiempo que tengo ganas de armar este post, hay muchas formas de hacerlo, seguramente hay mejores. Est\u00e1 es una forma a la que llegu\u00e9 yo probando varias cosas y la queria compartir.\r\nAntes que nada, el prop\u00f3sito de este post es ir creando un Game Loop paso por paso intentando ver detalladamente cada aspecto para llegar al c\u00f3digo final, lo que puede ser el alma de un juego en HTML5. \r\n\r\n<h4>Temas<\/h4>\r\n<ol>\r\n  <li><a href=\"#1.1\">Que es el Game Loop?<\/a><\/li>\r\n  <li><a href=\"#1.2\">Encapsulando el juego<\/a><\/li>\r\n  <li><a href=\"#1.3\">Agregando Canvas de HTML5<\/a><\/li>\r\n  <li><a href=\"#1.4\">Actualizando y Dibujando<\/a><\/li>\r\n  <li><a href=\"#1.5\">Optimizando<\/a><\/li>\r\n  <ol>\r\n    <li><a href=\"#1.5.1\">Canvas Buffer<\/a><\/li>\r\n    <li><a href=\"#1.5.2\">Request Animation Frame<\/a><\/li>\r\n  <\/ol>\r\n  <li><a href=\"#1.6\">Conclusi\u00f3n<\/a><\/li>\r\n<\/ol>\r\n\r\n<hr\/>\r\n\r\n<h4><a name=\"1.1\" style=\"text-decoration: none;\">Que es el Game Loop?<\/a><\/h4>\r\nDentro de la jerga gamer se le llama asi al ciclo en el que se basa todo el juego, un ciclo \"cuasi\" infinito por el cual el juego actualiza sus estados y se dibuja una y otra vez mientras este vive.\r\n\r\n[js]\r\nvar velocidad = 20;\r\nfunction loop(){\r\n\r\n  actualizar();\r\n  dibujar();\r\n\r\n  setTimeout(loop, velocidad);\r\n}\r\n\r\nloop();\r\n[\/js]\r\n\r\nLo anterior es una versi\u00f3n extremadamente reducida del game loop, b\u00e1sicamente tengo una funcion <em>loop<\/em> a la que se llama a s\u00ed misma cada 20 mili-segundos y es la encargada de primero actualizar los estados del juego y despu\u00e9s dibujar.\r\n\r\n<blockquote>\r\nPara una explicaci\u00f3n detallada del setTimeout te dejo <a href=\"http:\/\/fernetjs.com\/2011\/11\/ejecuciones-asincronicas-de-funciones\/\" title=\"Ejecuciones Asincr\u00f3nicas de funciones\">este post<\/a>\r\n<\/blockquote>\r\n\r\n<h4><a name=\"1.2\" style=\"text-decoration: none;\">Encapsulando el juego<\/a><\/h4>\r\nPara empezar a darle forma vamos a usar el <a href=\"http:\/\/fernetjs.com\/2012\/05\/patrones-module-y-namespace\/\" title=\"Patrones: Module y Namespace\">Patr\u00f3n M\u00f3dulo<\/a> y a mejorarlo.\r\n\r\n[js]\r\nvar juego = (function(){\r\n  var timer,\r\n    velocidad = 20;\r\n\r\n  function actualizar() {\r\n    \/\/actualizo el estado\r\n  }\r\n\r\n  function dibujar() {\r\n    \/\/dibujo el estado\r\n  }\r\n\r\n  function loop(){\r\n    actualizar();\r\n    dibujar();\r\n\r\n    timer = setTimeout(loop, velocidad);\r\n  }\r\n\r\n  return {\r\n    iniciar: function() {\r\n      loop();\r\n    },\r\n    detener: function() {\r\n      clearTimeout(timer);\r\n    }\r\n  }\r\n\r\n})();\r\n\r\njuego.iniciar();\r\n\/\/juego.detener();\r\n\r\n[\/js]\r\n\r\nLa idea de usar este patr\u00f3n es encapsular la funcionalidad del juego en un m\u00f3dulo, de esta manera cerrar el alcance y dejar lo que deber\u00eda ser privado, como privado (en este caso el loop, actualizar y dibujar)\r\nComo se v\u00e9 retornamos un objeto con el acceso a nuestro m\u00f3dulo, para poder iniciar o detener el juego.\r\n\r\n<h4><a name=\"1.3\" style=\"text-decoration: none;\">Agregando Canvas de HTML5<\/a><\/h4>\r\nAhora, para hacerlo un poco mas <em>real<\/em>, vamos a meter un canvas, ya que es una excelente opci\u00f3n hoy en d\u00eda al momento de desarrollar un juego con HTML5.\r\n\r\n[html]\r\n&lt;canvas id=&quot;canvas&quot; width=&quot;600px&quot; height=&quot;600px&quot;&gt;\r\n  Tu explorador no soporta Canvas\r\n&lt;\/canvas&gt;\r\n[\/html]\r\n\r\n[js highlight=\"4,5,22-28,32\"]\r\nvar juego = (function(){\r\n  var timer,\r\n    velocidad = 20,\r\n    canvas,\r\n    contexto;\r\n\r\n  function actualizar() {\r\n    \/\/actualizo el estado\r\n  }\r\n\r\n  function dibujar() {\r\n    \/\/dibujo el estado\r\n  }\r\n\r\n  function loop(){\r\n    actualizar();\r\n    dibujar();\r\n\r\n    timer = setTimeout(loop, velocidad);\r\n  }\r\n\r\n  function iniciarCanvas() {\r\n      canvas = document.getElementById('canvas');\r\n      if (canvas.getContext){\r\n        contexto = canvas.getContext('2d');\r\n      } \r\n      else throw &quot;canvas no soportado!&quot;;\r\n  }\r\n\r\n  return {\r\n    iniciar: function() {\r\n      iniciarCanvas();\r\n      loop();\r\n    },\r\n    detener: function() {\r\n      clearTimeout(timer);\r\n    }\r\n  }\r\n\r\n})();\r\n[\/js]\r\n\r\nLo que hicimos fue agregar 2 variables dentro del alcance del m\u00f3dulo, uno para el canvas y otro para el contexto para poder referenciarlo desde la funci\u00f3n dibujar. Creamos una funci\u00f3n para iniciar y asignar las variables, y agregamos la llamada a esa funci\u00f3n al momento de iniciar el juego.\r\n\r\n<blockquote>\r\nTe recomiendo unos posts si no estas familiarizado con Canvas: <a href=\"http:\/\/fernetjs.com\/2011\/11\/dibujando-en-canvas-html5\/\" title=\"Dibujando en CANVAS \u2013 HTML5\">Dibujando<\/a> y <a href=\"http:\/\/fernetjs.com\/2011\/12\/animando-en-canvas-html5\/\" title=\"Animando en CANVAS \u2013 HTML5\">Animando<\/a>\r\n<\/blockquote>\r\n\r\n<h4><a name=\"1.4\" style=\"text-decoration: none;\">Actualizando y Dibujando<\/a><\/h4>\r\nPara completarlo vamos a hacer que realmente funcione con algo, como ejemplo hacer que dibuje y mueva un cuadrado cuando el usuario presiona las flechas.\r\n\r\nPrimero agregamos las 2 variables que vamos a usar para conocer la tecla presionada y el estado del cuadrado actual:\r\n\r\n[js highlight=\"6,7-12\"]\r\nvar juego = (function(){\r\n  var timer,\r\n    velocidad = 20,\r\n    canvas,\r\n    contexto,\r\n    presionada,\r\n    cuadrado: {\r\n      x: 100,\r\n      y: 25,\r\n      width: 50,\r\n      height: 150 \r\n    };\r\n\r\n\/\/ aca sigue el mismo c\u00f3digo ...\r\n[\/js]\r\n\r\nImplementamos el manejo de los eventos keydown y keyup para saber la tecla presionada:\r\n\r\n[js highlight=\"3,6\"]\r\nfunction agregarManejador() {\r\n   document.addEventListener('keydown', function(evento) {\r\n     presionada = evento.keyCode;\r\n   });\r\n   document.addEventListener('keyup', function(evento) {\r\n     presionada = null;\r\n   });\r\n}\r\n[\/js]\r\n\r\nLuego implementamos el actualizar() con el cambio de estado del cuadrado (cuadrado.x) dependendiendo de la tecla presionada:\r\n\r\n[js]\r\nfunction actualizar() {\r\n  switch(presionada){\r\n    case '37': \/\/izquierda\r\n      cuadrado.x -= 20;\r\n      \/\/para que no se pase del inicio del canvas\r\n      if (cuadrado.x &lt; 0) \r\n        cuadrado.x = 0;\r\n    break;\r\n    case '39': \/\/derecha\r\n      cuadrado.x += 20;\r\n      \/\/para que no se pase del largo del canvas\r\n      if (cuadrado.x + cuadrado.width &gt; canvas.width) \r\n        cuadrado.x = canvas.width - cuadrado.width;\r\n    break;\r\n  }\r\n}\r\n[\/js]\r\n\r\nEntonces cada vez que se ejecute la funci\u00f3n comprueba la flecha presionada y actualiza la x del cuadrado. \r\n\r\nAhora nos queda dibujar el estado del cuadrado en cada momento que se ejecute dibujar():\r\n[js]\r\nfunction dibujar() {\r\n  contexto.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  \/\/fillRect(x,y,width,height);\r\n  contexto.fillRect(cuadrado.x, cuadrado.y, cuadrado.width, cuadrado.height);\r\n}\r\n[\/js]\r\n\r\nEn la primer linea limpiamos todo el canvas, y despues dibujamos el cuadrado en la posici\u00f3n actual.\r\n\r\nNos queda algo asi:\r\n[iframe style=\"width: 100%; height: 300px\" src=\"http:\/\/jsfiddle.net\/pjnovas\/7F26V\/embedded\/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"][\/iframe]\r\n\r\n<h4><a name=\"1.5\" style=\"text-decoration: none;\">Optimizando<\/a><\/h4>\r\n\r\nHay muchas optimizaciones para tener en cuenta al hacer un juego en javascript, quiero centrarme en 2 que considero importantes y principales, m\u00e1s adelante veremos otras.\r\n\r\n<h5><a name=\"1.5.1\" style=\"text-decoration: none;\">Canvas Buffer<\/a><\/h5>\r\nComo suena, tener un canvas que funcione como un buffer para el redibujo continuo, b\u00e1sicamente la idea es dibujar sobre otro canvas <em>oculto<\/em> y cuando est\u00e9 todo listo dibujarlo completo sobre el <em>real<\/em>, porque esto?, si bien la mejora no es increible, logramos evitar el famoso \"flickering\" y es esa sensaci\u00f3n de que medio se traba la animaci\u00f3n. \r\n\r\nPara explicarlo mejor: suponiendo que tenemos 30 elementos que se dibujan de a uno sobre el canvas, y a medida que se van dibujando y armando la escena de una secuencia de animaci\u00f3n puede tardar un m\u00ednimo de tiempo en el cual el ojo llega a percibirlo y nos queda un efecto no muy feliz. Bueno, para evitar ese \"efecto\", dibujamos todos en un canvas \"falso\" y despu\u00e9s aplicamos el dibujo completo de la escena en el canvas \"real\".\r\n\r\nGenial, vamos a agregar esta optimizaci\u00f3n al game loop volviendo a nuestro c\u00f3digo, empezando por la funci\u00f3n donde iniciamos el canvas:\r\n\r\n[js highlight=\"11-13,17\"]\r\n  \/\/Nos creamos las variables de buffer al inicio del modulo\r\n  \/\/ ... otras variables que ten\u00edamos\r\n  canvas,\r\n  contexto,\r\n  canvasBuffer,\r\n  contextoBuffer;  \r\n\r\n  function iniciarCanvas() {\r\n      canvas = document.getElementById('canvas');\r\n      \r\n      canvasBuffer = document.createElement('canvas');\r\n      canvasBuffer.width = canvas.width;\r\n      canvasBuffer.height = canvas.height;\r\n      \r\n      if (canvas.getContext){\r\n        contexto = canvas.getContext('2d');\r\n        contextoBuffer = canvasBuffer.getContext('2d');\r\n      } \r\n      else throw &quot;canvas no soportado!&quot;;\r\n  }\r\n[\/js]\r\n\r\nLo que hicimos ahi es crearnos el \"falso\" canvas y su contexto partiendo como base del tama\u00f1o del canvas real, ahora lo que necesitamos es, al momento de dibujar, hacerlo sobre el falso y despu\u00e9s aplicarlo en el real, entonces nuestra funcion dibujar() quedar\u00eda as\u00ed:\r\n\r\n[js highlight=\"2,3,10\"]\r\nfunction dibujar() {\r\n  contextoBuffer.clearRect(0, 0, canvas.width, canvas.height);\r\n  contextoBuffer.fillRect(cuadrado.x, cuadrado.y, cuadrado.width, cuadrado.height);\r\n\r\n  \/\/dibujamos sobre el contexto del buffer todo lo que necesitemos\r\n\r\n  \/\/limpiamos el real\r\n  contexto.clearRect(0, 0, canvas.width, canvas.height);  \r\n  \/\/aplicamos el buffer\r\n  contexto.drawImage(canvasBuffer, 0, 0); \r\n}\r\n[\/js]\r\n\r\n<h5><a name=\"1.5.2\" style=\"text-decoration: none;\">Request Animation Frame<\/a><\/h5>\r\nNuestro setTimeout() para realizar el loop es genial, pero no ser\u00eda mejor avisarle al explorador que vamos a correr una animaci\u00f3n y queremos que se prepare y lo haga lo mejor que pueda?, bueno eso es el requestAnimationFrame(). Fue creado con ese prop\u00f3sito, que el explorador sepa cuando vamos a hacer este tipo de cosas, como por ejemplo: un loop con muchos \"frames\" para realizar una animaci\u00f3n.\r\n\r\nEl cambio es bastante simple para nuestro game loop, ya que es \"casi\" reemplazar el setTimeout() por el pedido de animaciones por frames as\u00ed que cambiemos el loop:\r\n\r\n[js highlight=\"6,12,16\"]\r\n function loop(){\r\n    actualizar();\r\n    dibujar();\r\n\r\n    \/\/timer = setTimeout(loop, velocidad);\r\n    timer = window.requestAnimationFrame(loop);\r\n  }\r\n\r\n  return {\r\n    iniciar: function() {\r\n      iniciarCanvas();\r\n      loop();\r\n    },\r\n    detener: function() {\r\n      \/\/clearTimeout(timer);\r\n      window.cancelAnimationFrame(timer);\r\n    }\r\n  }\r\n[\/js]\r\n\r\nComo se v\u00e9 el cambio fue bastante simple, pero no se si notaste que ya no tenemos velocidad, bueno, es mejor no tenerla jeje, personalmente prefiero que el requestAnimationFrame la maneje por mi, por el hecho de que es bastante complicado calcular un buen \"frame rate\" no siendo un experto en el tema y sobretodo pensando que ese frame rate es el tiempo que tenemos para dibujar tooodo el estado de la escena (suena complicado para mi :P)\r\n\r\nY si el explorador no lo soporta?, bueno para ese caso les recomiendo utilizar el <a href=\"http:\/\/my.opera.com\/emoller\/blog\/2011\/12\/20\/requestanimationframe-for-smart-er-animating\">requestAnimationFrame polyfill de Erik M\u00f6ller<\/a>, en el cual se arm\u00f3 un script buenisimo con todo ese problema resuelto, dejandonos el <em>window.requestAnimationFrame<\/em> listo para usar est\u00e9 o no soportado (esto lo hace llevandolo a un setTimeout como \u00faltima medida)\r\n\r\n<h4><a name=\"1.6\" style=\"text-decoration: none;\">Conclusi\u00f3n<\/a><\/h4>\r\n<b>Que sigue ahora?, bueno primero que nada este c\u00f3digo que construimos es a modo de ejemplo, las funciones de actualizar() y dibujar() deber\u00edan encargarse de llamar a otros m\u00f3dulos o clases y delegar totalmente las funcionalidades, con esto quiero decir que no deber\u00eda crecer mas el m\u00f3dulo de lo que est\u00e1 y mantenerse s\u00f3lo en la l\u00f3gica del game loop, no queremos que se vuelva un mounstro gigante :)<\/b>\r\n\r\nLes dejo el Game Loop terminado con el ejemplo:\r\n[iframe style=\"width: 100%; height: 300px\" src=\"http:\/\/jsfiddle.net\/pjnovas\/SB8Pn\/embedded\/\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\"][\/iframe]\r\n\r\nY un <a href=\"http:\/\/gist.github.com\/3649399\">Gist<\/a> con el Game Loop completo como template para que hagan cosas locas:\r\n\r\n[js]\r\nvar fernetjs = fernetjs || {};\r\nfernetjs.juego = (function(){\r\n  var reqAnimId,\r\n    canvas,\r\n    contexto,\r\n    canvasBuffer,\r\n    contextoBuffer;\r\n \r\n  function actualizar() {\r\n    \/\/actualizaciones del estado\r\n  }\r\n \r\n  function dibujar() {\r\n    contextoBuffer.clearRect(0, 0, canvas.width, canvas.height);\r\n    \r\n    \/\/dibujos en el contextoBuffer\r\n \r\n    contexto.clearRect(0, 0, canvas.width, canvas.height);  \r\n    contexto.drawImage(canvasBuffer, 0, 0); \r\n  }\r\n \r\n  function iniciarCanvas() {\r\n    canvas = document.getElementById('canvas');\r\n     \r\n    canvasBuffer = document.createElement('canvas');\r\n    canvasBuffer.width = canvas.width;\r\n    canvasBuffer.height = canvas.height;\r\n     \r\n    if (canvas.getContext){\r\n      contexto = canvas.getContext('2d');\r\n      contextoBuffer = canvasBuffer.getContext('2d');\r\n    } \r\n    else throw &quot;canvas no soportado!&quot;;\r\n  }\r\n \r\n  function loop(){\r\n   actualizar();\r\n   dibujar();\r\n \r\n   reqAnimId = window.requestAnimationFrame(loop);\r\n  }\r\n \r\n return {\r\n\r\n   iniciar: function() {\r\n     if (!canvas)\r\n       iniciarCanvas();\r\n  \r\n     if(reqAnimId)\r\n       this.detener();\r\n\r\n     loop();\r\n   },\r\n\r\n   detener: function() {\r\n      window.cancelAnimationFrame(reqAnimId);\r\n      reqAnimId = 0;\r\n   }\r\n }\r\n \r\n})();\r\n\r\n\/\/iniciar:\r\n\/\/fernetjs.juego.iniciar();\r\n\/\/detener:\r\n\/\/fernetjs.juego.detener();\r\n\r\n[\/js]","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 06 Sep 2012 10:34:24 +0000","created_by":1,"updated_at":"Sat, 08 Sep 2012 15:21:44 +0000","updated_by":1,"published_at":"Thu, 06 Sep 2012 10:34:24 +0000","published_by":1},{"id":2704,"title":"JSONP, CORS y como los soportamos desde NodeJS","slug":"jsonp-cors-y-como-los-soportamos-desde-nodejs","markdown":"\nLaburando con mi [API de feriados](http:\/\/nolaborables.com.ar) me cruc\u00e9 con el tema de *Same Origin Policy*, digamos que una API Rest de feriados deber\u00eda tener soporte para ser llamada desde un js en el cliente m\u00ednimamente, esto me llevo a conocer cosas nuevas y quer\u00eda compartir mi experiencia.\n\n1. [Same Origin Policy](#1.1)\n2. [JSONP](#1.2)\n3. [Soportando JSONP desde NodeJS](#1.3)\n4. [CORS](#2.1)\n5. [Soportando CORS desde NodeJS](#2.2)\n6. [Links \u00datiles](#3.1)\n\n- - - - - -\n\n### [Same Origin Policy]()\n\n El principal problema que nos encontramos al querer hacer una llamada desde un dominio a otro desde un javascript en el cliente (por ejemplo, una llamada ajax) es lo que se conoce como \"Same Origin Policy\" (pol\u00edtica de mismo origen), es decir, una seguridad impuesta para evitar las llamadas entre distintos or\u00edgenes desde client-side. Ahora, como identificamos que estamos en otro origen? Este *Origen* est\u00e1 definido por: 1. Protocolo\n2. Host (Dominio\/Direcci\u00f3n de IP)\n3. Puerto\n\n Esto significa que si alguno de los anteriores no es igual, es otro origen, y por esta seguridad, no podemos realizar la llamada ajax, hacer un GET de un .json, o cualquier operaci\u00f3n desde un Explorador. Por ejemplo: Supongamos que estamos en **http:\/\/localhost:3000** e intentamos acceder a: 1. **https**:\/\/localhost:3000\/algo - <span style=\"color: red\">Diferente protocolo<\/span>\n2. http:\/\/localhost:**1100**\/algo - <span style=\"color: red\">Diferente puerto<\/span>\n3. http:\/\/localhost\/algo - <span style=\"color: red\">Diferente puerto (el 80)<\/span>\n4. http:\/\/**www.google.com**\/algo - <span style=\"color: red\">Diferente host<\/span>\n5. http:\/\/**sub.**localhost:3000\/algo - <span style=\"color: red\">Diferente host (debe ser exacto)<\/span>\n6. http:\/\/localhost:3000\/algo - <span style=\"color: green\">Correcto<\/span>\n\n En todos los casos anteriores (menos el \u00faltimo) vamos a recibir un error, ya que no estamos cumpliendo con la seguridad. Bueno, ahora sabemos el por qu\u00e9 del error, c\u00f3mo hacemos para llamar a otro Origen desde el cliente? ### [JSONP]()\n\n Para arrancar, la sigla viene de JSON + P, lo que ser\u00eda Javascript Object Notation with (con) Padding. Ese Padding es un complemento para el JSON, y para que queremos ese complemento?, supongamos el siguiente escenario: Tenemos un script de cliente en el que queremos llamar a un servicio que retorna un JSON por AJAX, supongamos que el servicio es en [NoLaborables](http:\/\/nolaborables.com.ar\/): Por ejemplo, el Pr\u00f3ximo feriado [http:\/\/nolaborables.com.ar\/API\/v1\/proximo](http:\/\/nolaborables.com.ar\/API\/v1\/proximo) y nos devuelve un JSON: [js] { \"dia\": 24, \"mes\": 9, \"motivo\": \"Bicentenario de la Batalla de Tucum\u00e1n\", \"tipo\": \"nolaborable\" } [\/js] Este servicio est\u00e1 en otro dominio, y ahora sabemos que tenemos la pol\u00edtica Same Origin y no podemos hacer una llamada AJAX. Y si referenciamos una url bajo un tag script?, por ejemplo, esto si podemos hacerlo: [html] <script type=\"text\/javascript\" src=\"https:\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.8.1\/jquery.min.js\"><\/script> [\/html] Eso si funciona, ya que no hay problema en referenciar a un script que est\u00e9 en otro origen, ah\u00ed no *juega* la pol\u00edtica de Same Origin. Entonces referenciemos al servicio con un script: [html] <script type=\"text\/javascript\" src=\"http:\/\/nolaborables.com.ar\/API\/v1\/proximo\"><\/script> [\/html] Error!, porque el interpretador de JS no sabe como leer un json colgado de la nada, pero si la respuesta de ese servicio nos devolviera el json como una llamada a una funci\u00f3n?, el interpretador sabe que hacer con eso, no? ##### Respuesta normal de JSON\n\n [js] { \"dia\": 24, \"mes\": 9, \"motivo\": \"Bicentenario de la Batalla de Tucum\u00e1n\", \"tipo\": \"nolaborable\" } [\/js] ##### Respuesta de JSON con Padding\n\n [js] miFunction({ \"dia\": 24, \"mes\": 9, \"motivo\": \"Bicentenario de la Batalla de Tucum\u00e1n\", \"tipo\": \"nolaborable\" }); [\/js] Eso es el padding, el server nos responde el JSON como una llamada a una funci\u00f3n, para que podamos referenciarlo por un script y as\u00ed *saltearnos* la pol\u00edtica de Same Origin. Genial, o sea que para implementarme la llamada completa tendr\u00eda que hacer algo asi: [js] function llamame(jsonRespuesta){ \/\/hago algo con el JSON del server: jsonRespuesta } [\/js] Despu\u00e9s inyectamos el siguiente script para que haga la llamada, indic\u00e1ndole cual es la funci\u00f3n a la que va a llamar (el Padding): [html] <script type=\"text\/javascript\" src=\"http:\/\/nolaborables.com.ar\/API\/v1\/proximo?callback=llamame\"><\/script> [\/html] Ese script va a generar la llamada a la funci\u00f3n *llamame* envi\u00e1ndole el JSON: ##### Retorno del servicio\n\n [js] llamame({ \"dia\": 24, \"mes\": 9, \"motivo\": \"Bicentenario de la Batalla de Tucum\u00e1n\", \"tipo\": \"nolaborable\" }); [\/js] NOTA: con jquery se puede evitar la vuelta de funciones, simplificarlo un poco. El ejemplo anterior con jQuery quedar\u00eda algo asi: [js highlight=\"3\"] $.ajax({ url: \"http:\/\/nolaborables.com.ar\/API\/v1\/proximo\", dataType: 'jsonp' }).done(function(jsonRespuesta) { console.dir(jsonRespuesta); }); [\/js] En este caso jQuery se encarga de armar el script, con la funci\u00f3n de vuelta y nos entrega el resultado en el par\u00e1metro \"jsonRespuesta\" de forma transparente, s\u00f3lo tenemos que especificar que el tipo va a ser 'JSONP'. Listo, ya nos despreocupamos de la Pol\u00edtica de Mismo Origen, pero hay dos temas nuevos a tener en cuenta: 1. Seguridad: pensemos que con esto estamos inyectando un script en nuestra p\u00e1gina directo desde un servidor (que en algunos casos no es nuestro), por lo que si el servidor tiene ganas de inyectar otra cosa, va a correr sin problemas en nuestro sitio, por lo que tenemos que confiar mucho en el servicio para hacer una llamada JSONP. 2. El servidor tiene que soportar esta llamada: tiene que estar preparado para que le puedas pedir JSONP y en ese caso retornarte el JSON con su Padding, sino, vamos a seguir recibiendo el JSON pelado y no nos sirve. ### [Soportando JSONP desde NodeJS]()\n\n Para soportarlo en NodeJS de forma manual, deberiamos leer el request, comprobar si en el *header* nos pide JSONP como dataType y retornar el Padding con el JSON de respuesta. Pero ya que existen web frameworks, y en muy pocos casos tendr\u00edamos un servidor web http a mano, vamos a hacerlo con Express?: En la configuraci\u00f3n de express s\u00f3lo especificamos que soporte callbacks JSONP: [js highlight=\"4\"] app.configure(function(){ app.set('views', __dirname + '\/views'); app.set('view engine', 'jade'); app.set(\"jsonp callback\", true); app.use(express.bodyParser()); app.use(express.methodOverride()); app.use(express.cookieParser()); app.use(app.router); app.use(express.static(__dirname + '\/public')); }); [\/js] Listo, con esa linea soportamos JSONP con Express :) > Estuve leyendo por ah\u00ed preguntas sobre hacer un POST con JSONP, ahora que entendemos como funciona, podemos entender el \"porque\" es imposible realizar un POST: si estamos realizando un GET desde un tag script, como que no tenemos forma de cambiar el m\u00e9todo HTTP.\n\n### [CORS]()\n\n Desde que existe JSONP hay muchas cr\u00edticas del tema y convengamos que es un \"work-around\" al Same Origin Policy, hoy por hoy tenemos otra salida a este problema: CORS (Cross-Origin Resource Sharing). El objetivo de CORS es que bajo una propiedad en el header de la respuesta HTTP se puedan definir los origenes que pueden acceder al servidor como Cross Domain. La cosa ahora se pone mucho mas simple, desde el cliente no tenemos que hacer nada *especial*, el punto es que habilitamos en el servidor para que pueda ser llamado desde otro origen. Esto lo hacemos agregando una nueva propiedad en el header del HTTP request, es decir, en el pedido (request) al servidor especificamos que origenes est\u00e1n permitidos. Veamos un ejemplo: Cuando disparamos una llamada Ajax a un servidor, el explorador se encarga de agregar a nuestro header http la propiedad Origin con el valor de nuestro origen, por ejemplo: [bash title=\"Request\" highlight=\"2,6\"] GET \/API\/v1\/proximo HTTP\/1.1 <- metodo HTTP con el path al que llamanos Host: nolaborables.com.ar <- host al que estamos llamando User-Agent: Mozilla, Chrome, etc.. Accept: text\/html,application\/json Connection: keep-alive Origin: http:\/\/midominio.com <- aca estamos nosotros [\/bash] El servidor va a comprobar la propiedad Origen y decide si permite el acceso, una respuesta satisfactoria seria: [bash title=\"Response\" highlight=\"2\"] HTTP\/1.1 200 OK Access-Control-Allow-Origin: * <- aca tenemos la propiedad que dice si se puede o no Keep-Alive: timeout=2, max=100 Connection: Keep-Alive Transfer-Encoding: chunked Content-Type: application\/json [\/bash] Como vemos en la respuesta (response) del servidor, nos devuelve la propiedad *Access-Control-Allow-Origin* donde nos especifica que origen puede acceder, en el caso anterior es un ***** asi qu\u00e9 cualquier origen pasa tranquilo. > En esa propiedad tambi\u00e9n podemos especificar s\u00f3lo algunos origines, tambi\u00e9n se puede filtrar por m\u00e9todos HTTP, por ejemplo, solo darle acceso mediante GET.\n\n### [Soportando CORS desde NodeJS]()\n\n Como vimos, es una propiedad en el header, asi que de nuevo, si estamos creando un web server a mano, es agregar esa propiedad. Te dejo una forma de hacerlo con Express creando un middleware (ser\u00eda como un m\u00e9todo que se llama para toda request que ocurra): [js highlight=\"1-8,17\"] function perimitirCrossDomain(req, res, next) { \/\/en vez de * se puede definir S\u00d3LO los or\u00edgenes que permitimos res.header('Access-Control-Allow-Origin', '*'); \/\/metodos http permitidos para CORS res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE'); res.header('Access-Control-Allow-Headers', 'Content-Type'); next(); } \/\/Siguiendo con la configuraci\u00f3n de Express, agregamos el middleware app.configure(function() { app.set('views', __dirname + '\/views'); app.set('view engine', 'jade'); app.use(express.bodyParser()); app.use(express.methodOverride()); app.use(express.cookieParser()); app.use(perimitirCrossDomain); app.use(app.router); app.use(express.static(__dirname + '\/public')); }); [\/js] ### [Links \u00fatiles]()\n\n#### Same Origin Policy\n\n- [Wikipedia](http:\/\/en.wikipedia.org\/wiki\/Same_origin_policy)\n- [Google Chrome - Browser Security](http:\/\/code.google.com\/p\/browsersec\/wiki\/Part2#Same-origin_policy)\n- [Same origin policy for JavaScript (Mozilla)](http:\/\/developer.mozilla.org\/en-US\/docs\/Same_origin_policy_for_JavaScript)\n\n#### Cross-Origin Resource Sharing\n\n- [Wikipedia](http:\/\/en.wikipedia.org\/wiki\/Cross-origin_resource_sharing)\n- [CORS - Mozilla](http:\/\/developer.mozilla.org\/en-US\/docs\/HTTP_access_control)\n- [CORS - Chrome](http:\/\/developers.google.com\/storage\/docs\/cross-origin)\n\n\n\n","html":"Laburando con mi <a href=\"http:\/\/nolaborables.com.ar\">API de feriados<\/a> me cruc\u00e9 con el tema de <em>Same Origin Policy<\/em>, digamos que una API Rest de feriados deber\u00eda tener soporte para ser llamada desde un js en el cliente m\u00ednimamente, esto me llevo a conocer cosas nuevas y quer\u00eda compartir mi experiencia.\r\n\r\n<ol>\r\n  <li><a href=\"#1.1\">Same Origin Policy<\/a><\/li>\r\n  <li><a href=\"#1.2\">JSONP<\/a><\/li>\r\n  <li><a href=\"#1.3\">Soportando JSONP desde NodeJS<\/a><\/li>\r\n  <li><a href=\"#2.1\">CORS<\/a><\/li>\r\n  <li><a href=\"#2.2\">Soportando CORS desde NodeJS<\/a><\/li>\r\n  <li><a href=\"#3.1\">Links \u00datiles<\/a><\/li>\r\n<\/ol>\r\n\r\n<hr\/>\r\n\r\n<h3><a name=\"1.1\" style=\"text-decoration: none;\">Same Origin Policy<\/a><\/h3>\r\n\r\nEl principal problema que nos encontramos al querer hacer una llamada desde un dominio a otro desde un javascript en el cliente (por ejemplo, una llamada ajax) es lo que se conoce como \"Same Origin Policy\" (pol\u00edtica de mismo origen), es decir, una seguridad impuesta para evitar las llamadas entre distintos or\u00edgenes desde client-side.\r\n\r\n\r\nAhora, como identificamos que estamos en otro origen?\r\nEste <em>Origen<\/em> est\u00e1 definido por:\r\n<ol>\r\n<li>Protocolo<\/li>\r\n<li>Host (Dominio\/Direcci\u00f3n de IP)<\/li>\r\n<li>Puerto<\/li>\r\n<\/ol>\r\n\r\nEsto significa que si alguno de los anteriores no es igual, es otro origen, y por esta seguridad, no podemos realizar la llamada ajax, hacer un GET de un .json, o cualquier operaci\u00f3n desde un Explorador.\r\n\r\nPor ejemplo: Supongamos que estamos en <b>http:\/\/localhost:3000<\/b> e intentamos acceder a:\r\n\r\n<ol>\r\n<li><b>https<\/b>:\/\/localhost:3000\/algo - <span style=\"color: red\">Diferente protocolo<\/span><\/li>\r\n<li>http:\/\/localhost:<b>1100<\/b>\/algo - <span style=\"color: red\">Diferente puerto<\/span><\/li>\r\n<li>http:\/\/localhost\/algo - <span style=\"color: red\">Diferente puerto (el 80)<\/span><\/li>\r\n<li>http:\/\/<b>www.google.com<\/b>\/algo - <span style=\"color: red\">Diferente host<\/span><\/li>\r\n<li>http:\/\/<b>sub.<\/b>localhost:3000\/algo - <span style=\"color: red\">Diferente host (debe ser exacto)<\/span><\/li>\r\n<li>http:\/\/localhost:3000\/algo - <span style=\"color: green\">Correcto<\/span><\/li>\r\n<\/ol>\r\n\r\nEn todos los casos anteriores (menos el \u00faltimo) vamos a recibir un error, ya que no estamos cumpliendo con la seguridad.\r\nBueno, ahora sabemos el por qu\u00e9 del error, c\u00f3mo hacemos para llamar a otro Origen desde el cliente?\r\n\r\n<h3><a name=\"1.2\" style=\"text-decoration: none;\">JSONP<\/a><\/h3>\r\nPara arrancar, la sigla viene de JSON + P, lo que ser\u00eda Javascript Object Notation with (con) Padding. Ese Padding es un complemento para el JSON, y para que queremos ese complemento?, supongamos el siguiente escenario:\r\n\r\nTenemos un script de cliente en el que queremos llamar a un servicio que retorna un JSON por AJAX, supongamos que el servicio es en <a href=\"http:\/\/nolaborables.com.ar\/\">NoLaborables<\/a>:\r\n\r\nPor ejemplo, el Pr\u00f3ximo feriado <a href=\"http:\/\/nolaborables.com.ar\/API\/v1\/proximo\">http:\/\/nolaborables.com.ar\/API\/v1\/proximo<\/a> y nos devuelve un JSON:\r\n\r\n[js]\r\n{\r\n  &quot;dia&quot;: 24,\r\n  &quot;mes&quot;: 9,\r\n  &quot;motivo&quot;: &quot;Bicentenario de la Batalla de Tucum\u00e1n&quot;,\r\n  &quot;tipo&quot;: &quot;nolaborable&quot;\r\n}\r\n[\/js]\r\n\r\nEste servicio est\u00e1 en otro dominio, y ahora sabemos que tenemos la pol\u00edtica Same Origin y no podemos hacer una llamada AJAX. \r\n\r\nY si referenciamos una url bajo un tag script?, por ejemplo, esto si podemos hacerlo:\r\n\r\n[html]\r\n&lt;script type=&quot;text\/javascript&quot; src=&quot;https:\/\/ajax.googleapis.com\/ajax\/libs\/jquery\/1.8.1\/jquery.min.js&quot;&gt;&lt;\/script&gt;\r\n[\/html]\r\n\r\nEso si funciona, ya que no hay problema en referenciar a un script que est\u00e9 en otro origen, ah\u00ed no <em>juega<\/em> la pol\u00edtica de Same Origin.\r\nEntonces referenciemos al servicio con un script:\r\n\r\n[html]\r\n&lt;script type=&quot;text\/javascript&quot; src=&quot;http:\/\/nolaborables.com.ar\/API\/v1\/proximo&quot;&gt;&lt;\/script&gt;\r\n[\/html]\r\n\r\nError!, porque el interpretador de JS no sabe como leer un json colgado de la nada, pero si la respuesta de ese servicio nos devolviera el json como una llamada a una funci\u00f3n?, el interpretador sabe que hacer con eso, no?\r\n\r\n<h5>Respuesta normal de JSON<\/h5>\r\n[js]\r\n{\r\n  &quot;dia&quot;: 24,\r\n  &quot;mes&quot;: 9,\r\n  &quot;motivo&quot;: &quot;Bicentenario de la Batalla de Tucum\u00e1n&quot;,\r\n  &quot;tipo&quot;: &quot;nolaborable&quot;\r\n}\r\n[\/js]\r\n\r\n<h5>Respuesta de JSON con Padding<\/h5>\r\n[js]\r\nmiFunction({\r\n  &quot;dia&quot;: 24,\r\n  &quot;mes&quot;: 9,\r\n  &quot;motivo&quot;: &quot;Bicentenario de la Batalla de Tucum\u00e1n&quot;,\r\n  &quot;tipo&quot;: &quot;nolaborable&quot;\r\n});\r\n[\/js]\r\n\r\nEso es el padding, el server nos responde el JSON como una llamada a una funci\u00f3n, para que podamos referenciarlo por un script y as\u00ed <em>saltearnos<\/em> la pol\u00edtica de Same Origin.\r\n\r\nGenial, o sea que para implementarme la llamada completa tendr\u00eda que hacer algo asi:\r\n\r\n[js]\r\n\r\nfunction llamame(jsonRespuesta){\r\n  \/\/hago algo con el JSON del server: jsonRespuesta\r\n}\r\n\r\n[\/js]\r\n\r\nDespu\u00e9s inyectamos el siguiente script para que haga la llamada, indic\u00e1ndole cual es la funci\u00f3n a la que va a llamar (el Padding):\r\n\r\n[html]\r\n&lt;script type=&quot;text\/javascript&quot; src=&quot;http:\/\/nolaborables.com.ar\/API\/v1\/proximo?callback=llamame&quot;&gt;&lt;\/script&gt;\r\n[\/html]\r\n\r\nEse script va a generar la llamada a la funci\u00f3n <em>llamame<\/em> envi\u00e1ndole el JSON:\r\n\r\n<h5>Retorno del servicio<\/h5>\r\n[js]\r\nllamame({\r\n  &quot;dia&quot;: 24,\r\n  &quot;mes&quot;: 9,\r\n  &quot;motivo&quot;: &quot;Bicentenario de la Batalla de Tucum\u00e1n&quot;,\r\n  &quot;tipo&quot;: &quot;nolaborable&quot;\r\n});\r\n[\/js]\r\n\r\nNOTA: con jquery se puede evitar la vuelta de funciones, simplificarlo un poco.\r\nEl ejemplo anterior con jQuery quedar\u00eda algo asi:\r\n\r\n[js highlight=\"3\"]\r\n$.ajax({\r\n  url: &quot;http:\/\/nolaborables.com.ar\/API\/v1\/proximo&quot;,\r\n  dataType: 'jsonp'\r\n}).done(function(jsonRespuesta) { \r\n  console.dir(jsonRespuesta);\r\n});\r\n[\/js]\r\n\r\nEn este caso jQuery se encarga de armar el script, con la funci\u00f3n de vuelta  y nos entrega el resultado en el par\u00e1metro \"jsonRespuesta\" de forma transparente, s\u00f3lo tenemos que especificar que el tipo va a ser 'JSONP'.\r\n\r\nListo, ya nos despreocupamos de la Pol\u00edtica de Mismo Origen, pero hay dos temas nuevos a tener en cuenta:\r\n\r\n1. Seguridad: pensemos que con esto estamos inyectando un script en nuestra p\u00e1gina directo desde un servidor (que en algunos casos no es nuestro), por lo que si el servidor tiene ganas de inyectar otra cosa, va a correr sin problemas en nuestro sitio, por lo que tenemos que confiar mucho en el servicio para hacer una llamada JSONP.\r\n\r\n2. El servidor tiene que soportar esta llamada: tiene que estar preparado para que le puedas pedir JSONP y en ese caso retornarte el JSON con su Padding, sino, vamos a seguir recibiendo el JSON pelado y no nos sirve.\r\n\r\n<h3><a name=\"1.3\" style=\"text-decoration: none;\">Soportando JSONP desde NodeJS<\/a><\/h3>\r\nPara soportarlo en NodeJS de forma manual, deberiamos leer el request, comprobar si en el <em>header<\/em> nos pide JSONP como dataType y retornar el Padding con el JSON de respuesta. Pero ya que existen web frameworks, y en muy pocos casos tendr\u00edamos un servidor web http a mano, vamos a hacerlo con Express?: \r\n\r\nEn la configuraci\u00f3n de express s\u00f3lo especificamos que soporte callbacks JSONP:\r\n[js highlight=\"4\"]\r\napp.configure(function(){\r\n  app.set('views', __dirname + '\/views');\r\n  app.set('view engine', 'jade');\r\n  app.set(&quot;jsonp callback&quot;, true);\r\n  app.use(express.bodyParser());\r\n  app.use(express.methodOverride());\r\n  app.use(express.cookieParser());\r\n  app.use(app.router);\r\n  app.use(express.static(__dirname + '\/public'));\r\n});\r\n[\/js]\r\n\r\nListo, con esa linea soportamos JSONP con Express :)\r\n\r\n<blockquote>\r\nEstuve leyendo por ah\u00ed preguntas sobre hacer un POST con JSONP, ahora que entendemos como funciona, podemos entender el \"porque\" es imposible realizar un POST: si estamos realizando un GET desde un tag script, como que no tenemos forma de cambiar el m\u00e9todo HTTP.\r\n<\/blockquote>\r\n\r\n<h3><a name=\"2.1\" style=\"text-decoration: none;\">CORS<\/a><\/h3>\r\nDesde que existe JSONP hay muchas cr\u00edticas del tema y convengamos que es un \"work-around\" al Same Origin Policy, hoy por hoy tenemos otra salida a este problema: CORS (Cross-Origin Resource Sharing).\r\nEl objetivo de CORS es que bajo una propiedad en el header de la respuesta HTTP se puedan definir los origenes que pueden acceder al servidor como Cross Domain.\r\n\r\nLa cosa ahora se pone mucho mas simple, desde el cliente no tenemos que hacer nada <em>especial<\/em>, el punto es que habilitamos en el servidor para que pueda ser llamado desde otro origen.\r\nEsto lo hacemos agregando una nueva propiedad en el header del HTTP request, es decir, en el pedido (request) al servidor especificamos que origenes est\u00e1n permitidos. \r\n\r\nVeamos un ejemplo:\r\n\r\nCuando disparamos una llamada Ajax a un servidor, el explorador se encarga de agregar a nuestro header http la propiedad Origin con el valor de nuestro origen, por ejemplo:\r\n\r\n[bash title=\"Request\" highlight=\"2,6\"]\r\nGET \/API\/v1\/proximo HTTP\/1.1 &lt;- metodo HTTP con el path al que llamanos\r\nHost: nolaborables.com.ar &lt;- host al que estamos llamando\r\nUser-Agent: Mozilla, Chrome, etc..\r\nAccept: text\/html,application\/json\r\nConnection: keep-alive\r\nOrigin: http:\/\/midominio.com  &lt;- aca estamos nosotros\r\n[\/bash]\r\n\r\nEl servidor va a comprobar la propiedad Origen y decide si permite el acceso, una respuesta satisfactoria seria:\r\n\r\n[bash title=\"Response\" highlight=\"2\"]\r\nHTTP\/1.1 200 OK\r\nAccess-Control-Allow-Origin: *  &lt;- aca tenemos la propiedad que dice si se puede o no\r\nKeep-Alive: timeout=2, max=100\r\nConnection: Keep-Alive\r\nTransfer-Encoding: chunked\r\nContent-Type: application\/json\r\n[\/bash]\r\n\r\nComo vemos en la respuesta (response) del servidor, nos devuelve la propiedad <em>Access-Control-Allow-Origin<\/em> donde nos especifica que origen puede acceder, en el caso anterior es un <strong>*<\/strong> asi qu\u00e9 cualquier origen pasa tranquilo.\r\n\r\n<blockquote>\r\nEn esa propiedad tambi\u00e9n podemos especificar s\u00f3lo algunos origines, tambi\u00e9n se puede filtrar por m\u00e9todos HTTP, por ejemplo, solo darle acceso mediante GET.\r\n<\/blockquote>\r\n\r\n<h3><a name=\"2.2\" style=\"text-decoration: none;\">Soportando CORS desde NodeJS<\/a><\/h3>\r\nComo vimos, es una propiedad en el header, asi que de nuevo, si estamos creando un web server a mano, es agregar esa propiedad. Te dejo una forma de hacerlo con Express creando un middleware (ser\u00eda como un m\u00e9todo que se llama para toda request que ocurra):\r\n\r\n[js highlight=\"1-8,17\"]\r\nfunction perimitirCrossDomain(req, res, next) {\r\n  \/\/en vez de * se puede definir S\u00d3LO los or\u00edgenes que permitimos\r\n  res.header('Access-Control-Allow-Origin', '*'); \r\n  \/\/metodos http permitidos para CORS\r\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE'); \r\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\r\n  next();\r\n}\r\n\r\n\/\/Siguiendo con la configuraci\u00f3n de Express, agregamos el middleware\r\napp.configure(function() {\r\n  app.set('views', __dirname + '\/views');\r\n  app.set('view engine', 'jade');\r\n  app.use(express.bodyParser());\r\n  app.use(express.methodOverride());\r\n  app.use(express.cookieParser());\r\n  app.use(perimitirCrossDomain);\r\n  app.use(app.router);\r\n  app.use(express.static(__dirname + '\/public'));\r\n});\r\n[\/js]\r\n\r\n\r\n<h3><a name=\"3.1\" style=\"text-decoration: none;\">Links \u00fatiles<\/a><\/h3>\r\n\r\n<h4>Same Origin Policy<\/h4>\r\n<ul>\r\n<li><a href=\"http:\/\/en.wikipedia.org\/wiki\/Same_origin_policy\">Wikipedia<\/a><\/li>\r\n<li><a href=\"http:\/\/code.google.com\/p\/browsersec\/wiki\/Part2#Same-origin_policy\">Google Chrome - Browser Security<\/a><\/li>\r\n<li><a href=\"http:\/\/developer.mozilla.org\/en-US\/docs\/Same_origin_policy_for_JavaScript\">Same origin policy for JavaScript (Mozilla)<\/a><\/li>\r\n<\/ul>\r\n\r\n<h4>Cross-Origin Resource Sharing<\/h4>\r\n<ul>\r\n<li><a href=\"http:\/\/en.wikipedia.org\/wiki\/Cross-origin_resource_sharing\">Wikipedia<\/a><\/li>\r\n<li><a href=\"http:\/\/developer.mozilla.org\/en-US\/docs\/HTTP_access_control\">CORS - Mozilla<\/a><\/li>\r\n<li><a href=\"http:\/\/developers.google.com\/storage\/docs\/cross-origin\">CORS - Chrome<\/a><\/li>\r\n<ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 17 Sep 2012 13:11:20 +0000","created_by":1,"updated_at":"Wed, 02 Jul 2014 11:39:47 +0000","updated_by":1,"published_at":"Mon, 17 Sep 2012 13:11:20 +0000","published_by":1},{"id":2817,"title":"Parser Javascript para planillas de Google Docs","slug":"parser-javascript-para-planillas-de-google-docs","markdown":"\nEstoy armando un sitio donde quer\u00eda publicar una peque\u00f1a porci\u00f3n con informaci\u00f3n din\u00e1mica. Y por varias conversaciones que tuve, se me ocurri\u00f3: \u00bfpor qu\u00e9 no usar una planilla de c\u00e1lculo de Google Docs para editar estos datos, y luego parsearlos desde JavaScript en mi p\u00e1gina? Lo que parec\u00eda una cosa trivial (porque Google Docs expone sus planillas con JSON, no?) result\u00f3 tener m\u00e1s vueltas de las esperadas. Lo positivo: les comparto [Google Docs Simple Parser](http:\/\/code.ideasagiles.com\/google-docs-simple-parser), un parser Javascript para crear objetos a partir de planillas de c\u00e1culo.\n\n#### Que es gdsp?\n\n Google Docs Simple Parser (gdsp para los amigos) es una peque\u00f1a librer\u00eda Javascript que permite crear un array de objetos a partir de una planilla de c\u00e1lculos sencilla en Google Docs. La idea es contar con una utilidad sencilla para acceder de forma simple y r\u00e1pida a datos almacenados en una planilla (que puede resultar muy pr\u00e1ctico para editar en equipo, mantener y actualizar). Si, si, Google Docs ya provee una exportaci\u00f3n a JSON... pero las dos opciones que ofrece para exportar varian entre lo complicado (la exportaci\u00f3n \"de celdas\") y lo inusable (la exportaci\u00f3n \"de lista\", que para parsear es casi un imposible). gdsp permite parsear la exportaci\u00f3n JSON a celdas, y tambi\u00e9n una exportaci\u00f3n sencilla a TXT de la planilla, y devolver un array de objetos para utilizar. ### Ejemplo de uso\n\n##### Creacion de la planilla\n\n Supongamos una planilla en Google Docs de 3 filas: <table style=\"width: 100px;border: solid 1px silver\"><tbody><tr><th>nombre<\/th><th>apellido<\/th><\/tr><tr><td>Kilgoure<\/td><td>Trout<\/td><\/tr><tr><td>Billy<\/td><td>Pilgrim<\/td><\/tr><\/tbody><\/table> gdsp utiliza la primer fila como nombres de atributos para los objetos que generar\u00e1. Tenemos que hacer que la planilla sea de lectura p\u00fablica para que gdsp pueda accederla. Para esto, abierta la planilla hacemos click en \"Compartir\" y le damos acceso p\u00fablico de lectura. ##### Publicacion\n\n El siguiente paso es publicar la planilla en la web, en formato TXT. Bastante simple tambi\u00e9n:abrimos el men\u00fa Archivo > Publicar en la Web... y all\u00ed podemos iniciar la publicaci\u00f3n. En la parte inferior aparecer\u00e1 un combo donde podremos elegir el formato (elegir TXT), y aparecer\u00e1 el link de la publicaci\u00f3n en la Web.. ##### Parseo con gdsp\n\n Finalmente! Desde un script en nuestro HTML podemos acceder a los datos de la planilla: [js] var url = \"la url de la publicacion en la web de la planilla\"; googleDocsSimpleParser.parseSpreadsheetTxtUrl(url, function (personas) { \/\/personas es un array de objetos, lo podemos iterar o manipular a gusto! }); [\/js] La variable personas contendr\u00e1 un array de objetos con la informaci\u00f3n de la planilla. En particular, en este ejemplo la variable personas contendr\u00e1: [js] [{nombre: \"Kilgoure\", apellido: \"Trout\"}, {nombre: \"Billy\" , apellido: \"Pilgrim\"}] [\/js] Si no quieren escribir tanto, en la p\u00e1gina de descarga hay una p\u00e1gina demo.html que contiene un par de ejemplos concretos de uso, conect\u00e1ndose a una planilla de prueba que ya est\u00e1 publicada. Bajen y abran con el navegador, y voil\u00e1 :) #### Descarga y distribucion\n\n gdsp lo distribuyo bajo la licencia MPL 2.0 (b\u00e1sicamente, son libres de usar, modificar y redistribuir a gusto, siempre y cuando su distribuci\u00f3n respete la MPL). Pueden [descargar gdsp desde mi p\u00e1gina en BitBucket](http:\/\/code.ideasagiles.com\/google-docs-simple-parser). Comentarios e ideas son siempre bienvenidas!\n","html":"Estoy armando un sitio donde quer\u00eda publicar una peque\u00f1a porci\u00f3n con informaci\u00f3n din\u00e1mica. Y por varias conversaciones que tuve, se me ocurri\u00f3: \u00bfpor qu\u00e9 no usar una planilla de c\u00e1lculo de Google Docs para editar estos datos, y luego parsearlos desde JavaScript en mi p\u00e1gina?\r\n\r\nLo que parec\u00eda una cosa trivial (porque Google Docs expone sus planillas con JSON, no?) result\u00f3 tener m\u00e1s vueltas de las esperadas. Lo positivo: les comparto <a href=\"http:\/\/code.ideasagiles.com\/google-docs-simple-parser\">Google Docs Simple Parser<\/a>, un parser Javascript para crear objetos a partir de planillas de c\u00e1culo.\r\n\r\n<!--more-->\r\n<h4>Que es gdsp?<\/h4>\r\nGoogle Docs Simple Parser (gdsp para los amigos) es una peque\u00f1a librer\u00eda Javascript que permite crear un array de objetos a partir de una planilla de c\u00e1lculos sencilla en Google Docs. La idea es contar con una utilidad sencilla para acceder de forma simple y r\u00e1pida a datos almacenados en una planilla (que puede resultar muy pr\u00e1ctico para editar en equipo, mantener y actualizar).\r\n\r\nSi, si, Google Docs ya provee una exportaci\u00f3n a JSON... pero las dos opciones que ofrece para exportar varian entre lo complicado (la exportaci\u00f3n \"de celdas\") y lo inusable (la exportaci\u00f3n \"de lista\", que para parsear es casi un imposible).\r\n\r\ngdsp permite parsear la exportaci\u00f3n JSON a celdas, y tambi\u00e9n una exportaci\u00f3n sencilla a TXT de la planilla, y devolver un array de objetos para utilizar.\r\n<h3>Ejemplo de uso<\/h3>\r\n<h5>Creacion de la planilla<\/h5>\r\nSupongamos una planilla en Google Docs de 3 filas:\r\n<table style=\"width: 100px;border: solid 1px silver\">\r\n<tbody>\r\n<tr>\r\n<th>nombre<\/th>\r\n<th>apellido<\/th>\r\n<\/tr>\r\n<tr>\r\n<td>Kilgoure<\/td>\r\n<td>Trout<\/td>\r\n<\/tr>\r\n<tr>\r\n<td>Billy<\/td>\r\n<td>Pilgrim<\/td>\r\n<\/tr>\r\n<\/tbody>\r\n<\/table>\r\ngdsp utiliza la primer fila como nombres de atributos para los objetos que generar\u00e1.\r\n\r\nTenemos que hacer que la planilla sea de lectura p\u00fablica para que gdsp pueda accederla. Para esto, abierta la planilla hacemos click en \"Compartir\" y le damos acceso p\u00fablico de lectura.\r\n<h5>Publicacion<\/h5>\r\nEl siguiente paso es publicar la planilla en la web, en formato TXT. Bastante simple tambi\u00e9n:abrimos el men\u00fa Archivo &gt; Publicar en la Web... y all\u00ed podemos iniciar la publicaci\u00f3n. En la parte inferior aparecer\u00e1 un combo donde podremos elegir el formato (elegir TXT), y aparecer\u00e1 el link de la publicaci\u00f3n en la Web..\r\n<h5>Parseo con gdsp<\/h5>\r\nFinalmente! Desde un script en nuestro HTML podemos acceder a los datos de la planilla:\r\n\r\n[js]\r\nvar url = &quot;la url de la publicacion en la web de la planilla&quot;;\r\ngoogleDocsSimpleParser.parseSpreadsheetTxtUrl(url, function (personas) {\r\n  \/\/personas es un array de objetos, lo podemos iterar o manipular a gusto!\r\n});\r\n[\/js]\r\n\r\n\r\nLa variable personas contendr\u00e1 un array de objetos con la informaci\u00f3n de la planilla. En particular, en este ejemplo la variable personas contendr\u00e1:\r\n\r\n[js]\r\n[{nombre: &quot;Kilgoure&quot;, apellido: &quot;Trout&quot;},\r\n {nombre: &quot;Billy&quot;   , apellido: &quot;Pilgrim&quot;}]\r\n[\/js]\r\n\r\n\r\nSi no quieren escribir tanto, en la p\u00e1gina de descarga hay una p\u00e1gina demo.html que contiene un par de ejemplos concretos de uso, conect\u00e1ndose a una planilla de prueba que ya est\u00e1 publicada. Bajen y abran con el navegador, y voil\u00e1 :)\r\n<h4>Descarga y distribucion<\/h4>\r\ngdsp lo distribuyo bajo la licencia MPL 2.0 (b\u00e1sicamente, son libres de usar, modificar y redistribuir a gusto, siempre y cuando su distribuci\u00f3n respete la MPL).\r\n\r\nPueden <a href=\"http:\/\/code.ideasagiles.com\/google-docs-simple-parser\">descargar gdsp desde mi p\u00e1gina en BitBucket<\/a>. Comentarios e ideas son siempre bienvenidas!","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":21,"created_at":"Thu, 20 Sep 2012 12:21:36 +0000","created_by":1,"updated_at":"Thu, 20 Sep 2012 12:21:36 +0000","updated_by":1,"published_at":"Thu, 20 Sep 2012 12:21:36 +0000","published_by":1},{"id":2754,"title":"La Historia de Javascript","slug":"la-historia-de-javascript","markdown":"\nArmamos una Linea de Tiempo con la historia de JavaScript porque nos pareci\u00f3 muy interesante. Si ves que algo no esta bien, falta o sobra, coment\u00e1 abajo y lo debatimos, nos gustar\u00eda tunear esta linea de tiempo entre todos. [iframe src=\"http:\/\/embed.verite.co\/timeline\/?source=0ApMyrv9J73EudE1kN3RDeTNaVU9ocWRfR1BtUjV6UGc&font=Bevan-PotanoSans&maptype=toner&lang=es&hash_bookmark=true&start_zoom_adjust=3&height=650\" width=\"100%\" height=\"650\" frameborder=\"0\"][\/iframe] La armamos con [TimeLineJS](http:\/\/timeline.verite.co\/) y un archivo [Excel en Google Docs](https:\/\/docs.google.com\/a\/fernetjs.com\/spreadsheet\/ccc?key=0ApMyrv9J73EudE1kN3RDeTNaVU9ocWRfR1BtUjV6UGc#gid=0), por lo que es bastante personalizable. Desde el link pod\u00e9s descargarlo, hacerle modificaciones y mandarlo de vuelta para que lo actualicemos. Fuentes de Info: Principalmente de Wikipedia y [The Past, Preset, and Future of Javascript](http:\/\/www.amazon.com\/Past-Present-Future-JavaScript-ebook\/dp\/B008MYLN3Y\/ref=sr_1_1?s=digital-text&ie=UTF8&qid=1347920921&sr=1-1&keywords=The+Past%2C+Present%2C+and+Future+of+JavaScript) (libro que recomiendo si se manejan con el Ingl\u00e9s)\n\n\n","html":"Armamos una Linea de Tiempo con la historia de JavaScript porque nos pareci\u00f3 muy interesante. \r\nSi ves que algo no esta bien, falta o sobra, coment\u00e1 abajo y lo debatimos, nos gustar\u00eda tunear esta linea de tiempo entre todos.\r\n\r\n[iframe src=\"http:\/\/embed.verite.co\/timeline\/?source=0ApMyrv9J73EudE1kN3RDeTNaVU9ocWRfR1BtUjV6UGc&font=Bevan-PotanoSans&maptype=toner&lang=es&hash_bookmark=true&start_zoom_adjust=3&height=650\" width=\"100%\" height=\"650\" frameborder=\"0\"][\/iframe]\r\n\r\nLa armamos con <a href=\"http:\/\/timeline.verite.co\/\">TimeLineJS<\/a> y un archivo <a href=\"https:\/\/docs.google.com\/a\/fernetjs.com\/spreadsheet\/ccc?key=0ApMyrv9J73EudE1kN3RDeTNaVU9ocWRfR1BtUjV6UGc#gid=0\">Excel en Google Docs<\/a>, por lo que es bastante personalizable. Desde el link pod\u00e9s descargarlo, hacerle modificaciones y mandarlo de vuelta para que lo actualicemos.\r\n\r\nFuentes de Info: \r\nPrincipalmente de Wikipedia y <a href=\"http:\/\/www.amazon.com\/Past-Present-Future-JavaScript-ebook\/dp\/B008MYLN3Y\/ref=sr_1_1?s=digital-text&ie=UTF8&qid=1347920921&sr=1-1&keywords=The+Past%2C+Present%2C+and+Future+of+JavaScript\">The Past, Preset, and Future of Javascript<\/a> (libro que recomiendo si se manejan con el Ingl\u00e9s)","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 26 Sep 2012 22:09:19 +0000","created_by":1,"updated_at":"Wed, 26 Sep 2012 22:09:19 +0000","updated_by":1,"published_at":"Wed, 26 Sep 2012 22:09:19 +0000","published_by":1},{"id":2870,"title":"Validando el Navegador desde NodeJS","slug":"validando-el-navegador-desde-nodejs","markdown":"\nSupongamos que tenemos un sitio web extremadamente coqueto con lo \u00faltimo en tecnolog\u00eda HTML5, CSS3 y toda la locura. Pero entra un usuario con Internet Explorer 6 y le explota en la cara, se rompe todo, la mayor\u00eda de la magia que nos llevo mucho trabajo hacer ni siquiera la visualiza. Bueno, si, IE6?, podr\u00eda decir IE8 o hasta Mozilla 4, etc. El punto es, si usamos lo nuevo no estamos soportando los navegadores anteriores, y que hacemos?, tenemos varias opciones:\n\n- degradamos el sitio para que funcione de la mejor forma posible con navegadores viejitos\n- le mostramos un mensaje: \"Actualizate esa cosa con la que navegas\"\n- le avisamos que no va a funcionar bien\n- todas las anteriores\n- etc...\n\n En todos los casos, primero tenemos que enterarnos de que est\u00e1 navegando con algo que no soportamos del todo. Una forma es inspeccionar en el Encabezado (header) HTTP, la propiedad *User-Agent*. En esa propiedad de la petici\u00f3n enviada por el navegador vamos a ver todo el detalle de *qui\u00e9n es*. Por ejemplo, un posible encabezado para Internet Explorer 9: [bash highlight=\"4\"] GET \/ HTTP\/1.1 Accept: text\/html Accept-Language: es-AR User-Agent: Mozilla\/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident\/5.0) Accept-Encoding: gzip, deflate Proxy-Connection: Keep-Alive Host: example.com [\/bash] > Mozilla\/5.0 ?, si, por [razones hist\u00f3ricas](http:\/\/fernetjs.com\/la-historia-de-javascript\/ \"La Historia de Javascript\") Internet Explorer se identifica como un navegador Mozilla, que loco no?\n\n Bueno, ah\u00ed tenemos mucha data, hasta el Sistema Operativo y tiene un patr\u00f3n, una forma exacta de parseo, que es cada cosa, etc. pero no vamos a reinventar la rueda ... ### Leyendo el UserAgent con NodeJS\n\n Tenemos varios paquetes NPM para leer el UserAgent, en este caso les voy a mostrar [useragent de 3rd-Eden](https:\/\/github.com\/3rd-Eden\/useragent), eleg\u00ed este porque me pareci\u00f3 el mas simple de usar. Supongamos que tenemos un servidor en NodeJS con Express y bajo un pedido de una p\u00e1gina queremos validar el navegador: [js] \/\/ hacemos referencia al paquete var useragent = require('useragent'); \/\/le avisamos que vamos usar algunas caracter\u00edsticas m\u00e1s require('useragent\/features'); \/\/configuraciones de Express para crear el servidor \/\/Nuestra ruta inicial del sitio app.get('\/', function(req, res) { \/\/agarramos el valor de la propiedad desde el header del request var uAgent = req.headers['user-agent']; \/\/dejamos que la biblioteca parsee por nosotros var agent = useragent.parse(uAgent); \/\/despues simplemente hacemos las validaciones var ua = useragent.is(uAgent); if (ua.ie && agent.satisfies('<9')) { res.send(\"tu navegador es Internet Explorer con versi\u00f3n menor a 9\"); } if (ua.firefox && agent.satisfies('<12')) { res.send(\"tu navegador es Firefox con versi\u00f3n menor a 12\"); } if (ua.chrome && agent.satisfies('<20')) { res.send(\"tu navegador es Google Chrome con versi\u00f3n menor a 20\"); } \/\/ y as\u00ed sucesivamente }); [\/js] Se pueden hacer muchas cosas mas con esa biblioteca, pueden ver m\u00e1s sobre la api en [useragent de 3rd-Eden](https:\/\/github.com\/3rd-Eden\/useragent). \n","html":"Supongamos que tenemos un sitio web extremadamente coqueto con lo \u00faltimo en tecnolog\u00eda HTML5, CSS3 y toda la locura. Pero entra un usuario con Internet Explorer 6 y le explota en la cara, se rompe todo, la mayor\u00eda de la magia que nos llevo mucho trabajo hacer ni siquiera la visualiza. \r\n\r\nBueno, si, IE6?, podr\u00eda decir IE8 o hasta Mozilla 4, etc. El punto es, si usamos lo nuevo no estamos soportando los navegadores anteriores, y que hacemos?, tenemos varias opciones: \r\n\r\n<ul>\r\n<li>degradamos el sitio para que funcione de la mejor forma posible con navegadores viejitos<\/li>\r\n<li>le mostramos un mensaje: \"Actualizate esa cosa con la que navegas\"<\/li>\r\n<li>le avisamos que no va a funcionar bien<\/li>\r\n<li>todas las anteriores<\/li>\r\n<li>etc...<\/li>\r\n<\/ul>\r\n\r\nEn todos los casos, primero tenemos que enterarnos de que est\u00e1 navegando con algo que no soportamos del todo.\r\n\r\nUna forma es inspeccionar en el Encabezado (header) HTTP, la propiedad <em>User-Agent<\/em>. En esa propiedad de la petici\u00f3n enviada por el navegador vamos a ver todo el detalle de <em>qui\u00e9n es<\/em>.\r\n\r\nPor ejemplo, un posible encabezado para Internet Explorer 9:\r\n[bash highlight=\"4\"]\r\nGET \/ HTTP\/1.1\r\nAccept: text\/html\r\nAccept-Language: es-AR\r\nUser-Agent: Mozilla\/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident\/5.0)\r\nAccept-Encoding: gzip, deflate\r\nProxy-Connection: Keep-Alive\r\nHost: example.com\r\n[\/bash]\r\n\r\n<blockquote>\r\nMozilla\/5.0 ?, si, por <a href=\"http:\/\/fernetjs.com\/la-historia-de-javascript\/\" title=\"La Historia de Javascript\">razones hist\u00f3ricas<\/a> Internet Explorer se identifica como un navegador Mozilla, que loco no?\r\n<\/blockquote>\r\n\r\nBueno, ah\u00ed tenemos mucha data, hasta el Sistema Operativo y tiene un patr\u00f3n, una forma exacta de parseo, que es cada cosa, etc. pero no vamos a reinventar la rueda ...\r\n\r\n<h3>Leyendo el UserAgent con NodeJS<\/h3>\r\nTenemos varios paquetes NPM para leer el UserAgent, en este caso les voy a mostrar <a href=\"https:\/\/github.com\/3rd-Eden\/useragent\">useragent de 3rd-Eden<\/a>, eleg\u00ed este porque me pareci\u00f3 el mas simple de usar.\r\n\r\nSupongamos que tenemos un servidor en NodeJS con Express y bajo un pedido de una p\u00e1gina queremos validar el navegador:\r\n\r\n[js]\r\n\/\/ hacemos referencia al paquete\r\nvar useragent = require('useragent');\r\n\r\n\/\/le avisamos que vamos usar algunas caracter\u00edsticas m\u00e1s\r\nrequire('useragent\/features');\r\n\r\n\/\/configuraciones de Express para crear el servidor \r\n\r\n\/\/Nuestra ruta inicial del sitio\r\napp.get('\/', function(req, res) {\r\n  \/\/agarramos el valor de la propiedad desde el header del request\r\n  var uAgent = req.headers['user-agent'];\r\n\r\n  \/\/dejamos que la biblioteca parsee por nosotros\r\n  var agent = useragent.parse(uAgent);\r\n\r\n  \/\/despues simplemente hacemos las validaciones\r\n  var ua = useragent.is(uAgent);\r\n\r\n  if (ua.ie &amp;&amp; agent.satisfies('&lt;9')) {\r\n     res.send(&quot;tu navegador es Internet Explorer con versi\u00f3n menor a 9&quot;);\r\n  }\r\n\r\n  if (ua.firefox &amp;&amp; agent.satisfies('&lt;12')) {\r\n     res.send(&quot;tu navegador es Firefox con versi\u00f3n menor a 12&quot;);\r\n  }\r\n\r\n  if (ua.chrome &amp;&amp; agent.satisfies('&lt;20')) {\r\n     res.send(&quot;tu navegador es Google Chrome con versi\u00f3n menor a 20&quot;);\r\n  }\r\n\r\n  \/\/ y as\u00ed sucesivamente\r\n});\r\n[\/js]\r\n\r\nSe pueden hacer muchas cosas mas con esa biblioteca, pueden ver m\u00e1s sobre la api en <a href=\"https:\/\/github.com\/3rd-Eden\/useragent\">useragent de 3rd-Eden<\/a>.\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Fri, 19 Oct 2012 14:28:09 +0000","created_by":1,"updated_at":"Fri, 19 Oct 2012 14:28:09 +0000","updated_by":1,"published_at":"Fri, 19 Oct 2012 14:28:09 +0000","published_by":1},{"id":2896,"title":"Usando la API de Twitter de forma simple","slug":"usando-la-api-de-twitter-de-forma-simple","markdown":"\nPuede sonar complejo para algunos, pero engancharse de Twitter es bastante simple y si encima usamos una biblioteca para NodeJS se vuelve extremadamente simple, por eso hago este post, para los que pensaban que era un despelote puedan ver lo simple y divertido que es.\n\n#### Objetivo\n\n Supongamos que queremos ver lo que sucede en Twitter y bajo un texto en un Tweet responderle alguna locura, cualquier Tweet, alguien nos dice algo exacto que esperamos y le respondemos ... Primero deber\u00edamos conectarnos por Streaming, de esta manera estamos en \"escucha\" continua de lo que sucede y vamos leyendo lo que nos \"dicen\", una vez que nos tuitean lo que esperamos, respondemos haciendo un tuit en modo \"Respuesta\". ### Creando una aplicaci\u00f3n en Twitter Dev\n\n Antes de meterme en tema, para *engancharnos* a Twitter necesitamos crear una aplicaci\u00f3n en Twitter para que el \u00faltimo nos de unas claves secretas con el acceso. As\u00ed que, entremos a [dev.twitter.com](http:\/\/dev.twitter.com) y creemos una app yendo a SignIn, nos logeamos, vamos al mismo bot\u00f3n y hacemos click en Mis Aplicaciones. Le damos al Create an Aplication, y llenamos toda la info (callback URL lo dejamos en blanco) y click a Crear. Despu\u00e9s s\u00f3lo queda ingresar a la nueva app y generar las claves. Listo!, tenemos la app creada y sus claves, ahora nos creamos un app.js en nuestro local y vamos a la parte divertida: ### Escuchando la User Stream API\n\n Para simplificar la comunicaci\u00f3n con Twitter desde NodeJS vamos a usar la biblioteca [Tuiter creada por Dan Zajdband](https:\/\/github.com\/danzajdband\/Tuiter) (ah\u00ed van a encontrar m\u00e1s info de como usarla), pero vamos a arrancar con nuestro objetivo. Bajamos Tuiter desde NPM en nuestro proyecto: [bash] npm install tuiter [\/bash] Y abrimos el app.js para hacer la lectura del Streaming :) [js] \/\/Ac\u00e1 reemplazamos las claves que generamos para nuestra app en dev.twitter.com var keys = { \"consumer_key\" : \"blablabla\" , \"consumer_secret\" : \"blablabla\" , \"access_token_key\" : \"blablabla\" , \"access_token_secret\" : \"blablabla\" }; \/\/referenciamos al m\u00f3dulo Tuiter var tu = require('tuiter')(keys); \/\/Nos ponemos en escucha de nuestra frase tu.filter({track: 'hola twitter stream'}, function(stream){ \/\/cuando aparezca un tweet para nosotros, se dispara el callback stream.on('tweet', function(data){ \/\/Alguien nos Tuite\u00f3 \"hola twitter stream\"! console.log(data); \/\/ac\u00e1 vamos a responder el tweet responder(data); }); }); [\/js] > Tengamos en cuenta que estamos utilizando la User Stream API por lo que solo tenemos una cuenta (y una conexi\u00f3n a la vez) para hacer los seguimientos, la cuenta con la que creamos las claves. Si quisi\u00e9ramos utilizar varias cuentas deber\u00edamos usar la Site Stream API, pero no est\u00e1 abierta al p\u00fablico por lo que hay que pedir acceso a Twitter.\n\n### Respondiendo un Tweet\n\n Ahora nos queda responder ese Tweet para completar nuestro objetivo, pero para poder responder necesitamos saber que usuario nos habl\u00f3 y que Id tiene el Tweet. Hasta ahora sabemos que en *data* tenemos el Tweet, este \u00faltimo es un JSON con la informaci\u00f3n detallada del [Tweet](https:\/\/dev.twitter.com\/docs\/platform-objects\/tweets): Si vemos el detalle, en la propiedad *id_str* y *user.screen_name* vamos a tener el id del Tweet y el usuario que envi\u00f3 el Tweet respectivamente, asi que vamos a responderle implementando la funci\u00f3n *responder()* [js] function responder(tweet){ var usuario = tweet.user.screen_name, id = tweet.id_str; tu.update({ status: '@' + usuario + ' hola de vuelta!', in_reply_to_status_id_str: id }); } [\/js] De donde saqu\u00e9 el \"update\" y los parametros?, bueno Tuiter implementa todos los metodos de la API, solo nos fijamos que \"post\" o \"get\" es el de twitter y que parametros recibe, por ejemplo: [documentaci\u00f3n del update](https:\/\/dev.twitter.com\/docs\/api\/1\/post\/statuses\/update)> Para poder enviar Tweets tenes que cambiar los permisos de tu app en dev.twitter.com de ***Read-only*** a ***Read and Write***, sino te va a tirar un error de \"Prohibido\"\n\n Objetivo cumplido!, escuchamos una frase y respondemos con un tweet, y no fue nada complicado. Dejo el [Showcase](http:\/\/zajdband.com.ar\/tuiter-showcase.html) de apps que est\u00e1n utilizando la biblioteca Tuiter, donde van a encontrar tambi\u00e9n [TuiterFighter!](http:\/\/tuiterfighter.com\/?language=es) (una pelea entre palabras que arme hace unas semanas utilizando Tuiter) :) **Links \u00fatiles**- [Desarrolladores en Twitter](https:\/\/dev.twitter.com)\n- [Biblioteca Tuiter](https:\/\/github.com\/danzajdband\/Tuiter)\n- [Docs de Streaming API](https:\/\/dev.twitter.com\/docs\/streaming-apis)\n- [Docs de JSON de respuesta de Twitter](https:\/\/dev.twitter.com\/docs\/platform-objects)\n- [Docs para Twittear](https:\/\/dev.twitter.com\/docs\/api\/1.1\/post\/statuses\/update)\n\n#### He aqu\u00ed app.js completo\n\n [js] var keys = { \"consumer_key\" : \"blablabla\" , \"consumer_secret\" : \"blablabla\" , \"access_token_key\" : \"blablabla\" , \"access_token_secret\" : \"blablabla\" }; var tu = require('tuiter')(keys); tu.filter({track: 'hola twitter stream'}, function(stream){ stream.on('tweet', function(data){ responder(data); }); }); function responder(tweet){ var usuario = tweet.user.screen_name, id = tweet.id_str; tu.update({ status: '@' + usuario + ' hola de vuelta!', in_reply_to_status_id_str: id }); } [\/js]\n","html":"Puede sonar complejo para algunos, pero engancharse de Twitter es bastante simple y si encima usamos una biblioteca para NodeJS se vuelve extremadamente simple, por eso hago este post, para los que pensaban que era un despelote puedan ver lo simple y divertido que es.\r\n\r\n<h4>Objetivo<\/h4>\r\nSupongamos que queremos ver lo que sucede en Twitter y bajo un texto en un Tweet responderle alguna locura, cualquier Tweet, alguien nos dice algo exacto que esperamos y le respondemos ...\r\n\r\nPrimero deber\u00edamos conectarnos por Streaming, de esta manera estamos en \"escucha\" continua de lo que sucede y vamos leyendo lo que nos \"dicen\", una vez que nos tuitean lo que esperamos, respondemos haciendo un tuit en modo \"Respuesta\".\r\n\r\n<h3>Creando una aplicaci\u00f3n en Twitter Dev<\/h3>\r\nAntes de meterme en tema, para <em>engancharnos<\/em> a Twitter necesitamos crear una aplicaci\u00f3n en Twitter para que el \u00faltimo nos de unas claves secretas con el acceso.\r\n\r\nAs\u00ed que, entremos a <a href=\"http:\/\/dev.twitter.com\">dev.twitter.com<\/a> y creemos una app yendo a SignIn, nos logeamos, vamos al mismo bot\u00f3n y hacemos click en Mis Aplicaciones.\r\nLe damos al Create an Aplication, y llenamos toda la info (callback URL lo dejamos en blanco) y click a Crear.\r\nDespu\u00e9s s\u00f3lo queda ingresar a la nueva app y generar las claves.\r\n\r\nListo!, tenemos la app creada y sus claves, ahora nos creamos un app.js en nuestro local y vamos a la parte divertida:\r\n\r\n<h3>Escuchando la User Stream API<\/h3>\r\nPara simplificar la comunicaci\u00f3n con Twitter desde NodeJS vamos a usar la biblioteca <a href=\"https:\/\/github.com\/danzajdband\/Tuiter\">Tuiter creada por Dan Zajdband<\/a> (ah\u00ed van a encontrar m\u00e1s info de como usarla), pero vamos a arrancar con nuestro objetivo. \r\n\r\nBajamos Tuiter desde NPM en nuestro proyecto:\r\n[bash]\r\nnpm install tuiter\r\n[\/bash]\r\n\r\nY abrimos el app.js para hacer la lectura del Streaming :)\r\n[js]\r\n\/\/Ac\u00e1 reemplazamos las claves que generamos para nuestra app en dev.twitter.com\r\nvar keys = {\r\n    &quot;consumer_key&quot; : &quot;blablabla&quot;\r\n  , &quot;consumer_secret&quot; : &quot;blablabla&quot; \r\n  , &quot;access_token_key&quot; : &quot;blablabla&quot;\r\n  , &quot;access_token_secret&quot; : &quot;blablabla&quot;\r\n};\r\n\r\n\/\/referenciamos al m\u00f3dulo Tuiter\r\nvar tu = require('tuiter')(keys);\r\n\r\n\/\/Nos ponemos en escucha de nuestra frase\r\ntu.filter({track: 'hola twitter stream'}, function(stream){\r\n  \r\n  \/\/cuando aparezca un tweet para nosotros, se dispara el callback\r\n  stream.on('tweet', function(data){\r\n\r\n    \/\/Alguien nos Tuite\u00f3 &quot;hola twitter stream&quot;!\r\n    console.log(data);\r\n    \r\n    \/\/ac\u00e1 vamos a responder el tweet\r\n    responder(data);\r\n  });\r\n});\r\n[\/js]\r\n\r\n<blockquote>\r\nTengamos en cuenta que estamos utilizando la User Stream API por lo que solo tenemos una cuenta (y una conexi\u00f3n a la vez) para hacer los seguimientos, la cuenta con la que creamos las claves. Si quisi\u00e9ramos utilizar varias cuentas deber\u00edamos usar la Site Stream API, pero no est\u00e1 abierta al p\u00fablico por lo que hay que pedir acceso a Twitter.\r\n<\/blockquote>\r\n\r\n<h3>Respondiendo un Tweet<\/h3>\r\nAhora nos queda responder ese Tweet para completar nuestro objetivo, pero para poder responder necesitamos saber que usuario nos habl\u00f3 y que Id tiene el Tweet. Hasta ahora sabemos que en <em>data<\/em> tenemos el Tweet, este \u00faltimo es un JSON con la informaci\u00f3n detallada del <a href=\"https:\/\/dev.twitter.com\/docs\/platform-objects\/tweets\">Tweet<\/a>:\r\n\r\nSi vemos el detalle, en la propiedad <em>id_str<\/em> y <em>user.screen_name<\/em> vamos a tener el id del Tweet y el usuario que envi\u00f3 el Tweet respectivamente, asi que vamos a responderle implementando la funci\u00f3n <em>responder()<\/em>\r\n\r\n[js]\r\nfunction responder(tweet){\r\n  var usuario = tweet.user.screen_name,\r\n    id = tweet.id_str;\r\n\r\n  tu.update({\r\n    status: '@' + usuario + ' hola de vuelta!',\r\n    in_reply_to_status_id_str: id\r\n  });\r\n}\r\n[\/js]\r\n\r\nDe donde saqu\u00e9 el \"update\" y los parametros?, bueno Tuiter implementa todos los metodos de la API, solo nos fijamos que \"post\" o \"get\" es el de twitter y que parametros recibe, por ejemplo: <a href=\"https:\/\/dev.twitter.com\/docs\/api\/1\/post\/statuses\/update\">documentaci\u00f3n del update<\/a>\r\n\r\n<blockquote>\r\nPara poder enviar Tweets tenes que cambiar los permisos de tu app en dev.twitter.com de <em><b>Read-only<\/b><\/em> a <em><b>Read and Write<\/b><\/em>, sino te va a tirar un error de \"Prohibido\"\r\n<\/blockquote>\r\n\r\nObjetivo cumplido!, escuchamos una frase y respondemos con un tweet, y no fue nada complicado.\r\n\r\nDejo el <a href=\"http:\/\/zajdband.com.ar\/tuiter-showcase.html\">Showcase<\/a> de apps que est\u00e1n utilizando la biblioteca Tuiter, donde van a encontrar tambi\u00e9n <a href=\"http:\/\/tuiterfighter.com\/?language=es\">TuiterFighter!<\/a> (una pelea entre palabras que arme hace unas semanas utilizando Tuiter) :)\r\n\r\n<b>Links \u00fatiles<\/b>\r\n<ul>\r\n<li><a href=\"https:\/\/dev.twitter.com\">Desarrolladores en Twitter<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/danzajdband\/Tuiter\">Biblioteca Tuiter<\/a><\/li>\r\n<li><a href=\"https:\/\/dev.twitter.com\/docs\/streaming-apis\">Docs de Streaming API<\/a><\/li>\r\n<li><a href=\"https:\/\/dev.twitter.com\/docs\/platform-objects\">Docs de JSON de respuesta de Twitter<\/a><\/li>\r\n<li><a href=\"https:\/\/dev.twitter.com\/docs\/api\/1.1\/post\/statuses\/update\">Docs para Twittear<\/a><\/li>\r\n<\/ul>\r\n\r\n<h4>He aqu\u00ed app.js completo<\/h4>\r\n[js]\r\nvar keys = {\r\n    &quot;consumer_key&quot; : &quot;blablabla&quot;\r\n  , &quot;consumer_secret&quot; : &quot;blablabla&quot; \r\n  , &quot;access_token_key&quot; : &quot;blablabla&quot;\r\n  , &quot;access_token_secret&quot; : &quot;blablabla&quot;\r\n};\r\n\r\nvar tu = require('tuiter')(keys);\r\n\r\ntu.filter({track: 'hola twitter stream'}, function(stream){\r\n\r\n  stream.on('tweet', function(data){\r\n    responder(data);\r\n  });\r\n\r\n});\r\n\r\nfunction responder(tweet){\r\n  var usuario = tweet.user.screen_name,\r\n    id = tweet.id_str;\r\n\r\n  tu.update({\r\n    status: '@' + usuario + ' hola de vuelta!',\r\n    in_reply_to_status_id_str: id\r\n  });\r\n}\r\n[\/js]","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 29 Oct 2012 12:30:18 +0000","created_by":1,"updated_at":"Mon, 29 Oct 2012 12:36:07 +0000","updated_by":1,"published_at":"Mon, 29 Oct 2012 12:30:18 +0000","published_by":1},{"id":2959,"title":"Trabajar con arreglos en javascript (parte 1)","slug":"trabajar-con-arreglos-en-javascript-parte-1","markdown":"\nTrabajar con arreglos es una tarea habitual para cualquier programador, particularmente para aquellos que elegimos el lenguaje javascript. Recorrer un arreglo, encontrar un elemento, obtener ciertos elementos seg\u00fan sus caracter\u00edsticas son tareas frecuentes. Peque\u00f1os pedazos de c\u00f3digo para manejar arreglos se copian y pegan (o en el mejor de los casos se reescriben) continuamente. La pregunta es simple: Algo que nos resulta tan natural y que estamos tan acostumbrados a hacer d\u00eda a d\u00eda, \u00bflo estamos haciendo de la mejor manera? A continuaci\u00f3n se muestran los m\u00e9todos de la clase array y algunos ejemplos de como pueden mejorar nuestro c\u00f3digo notablemente. Estos m\u00e9todos tienen implementaci\u00f3n nativa en navegadores modernos, con lo cual la eficiencia es superior comparada con la eficiencia de cualquier otra librer\u00eda .js para colecciones (se puede utilizar [array.js](http:\/\/ferrod20.github.com\/array.js\/ \"array.js\") para obtener soporte completo). Todav\u00eda m\u00e1s: por su vasta funcionalidad, los m\u00e9todos de la clase array abarcan a casi todos los m\u00e9todos de colecciones no nativos, solo hay que aprender a utilizarlos.\n\n### M\u00e9todos\n\n#### Eliminar\n\n**pop**: Elimina el ultimo elemento. Devuelve el elemento eliminado. **shift**: Elimina el primer elemento. Devuelve el elemento eliminado. #### Agregar\n\n**push**: Agrega al final del arreglo uno o m\u00e1s elementos. Devuelve la nueva longitud. **unshift**: Agrega uno o m\u00e1s elementos al inicio. Devuelve la nueva longitud. **splice**: Agrega y\/o elimina elementos. #### Orden\n\n**reverse**: Da vuelta el arreglo. **sort**: Ordena los elementos. #### Uni\u00f3n\n\n**concat**: Une 2 arreglos. **join**: Une los elementos en un string. #### Posici\u00f3n\n\n**indexOf**: Devuelve el \u00edndice del primer elemento encontrado. **lastIndexOf**: Devuelve el \u00edndice del \u00faltimo elemento encontrado. #### Recorrer\n\n**forEach**: Ejecuta una funci\u00f3n para cada elemento del arreglo. **filter**: Devuelve un nuevo arreglo cuyos elementos satisfacen la funci\u00f3n pasada por par\u00e1metro. **map**: Dada una funci\u00f3n de conversi\u00f3n, devuelve un nuevo arreglo con cada elemento convertido. **some**: Dada una funci\u00f3n, devuelve verdadero si alg\u00fan elemento cumple con la misma. **every**: Dada una funci\u00f3n, devuelve verdadero si todos los elementos cumplen con la misma. ### Ejemplos\n\n [js] var arr = ['durazno', 'pera', 'manzana', 'banana', 'mandarina'] arr.pop() > \"mandarina\" \/\/el arreglo queda: [\"durazno\", \"pera\", \"manzana\", \"banana\"] arr.shift() > \"durazno\" \/\/el arreglo queda: [\"pera\", \"manzana\", \"banana\"] arr.push('naranja') > 4 \/\/el arreglo queda: [\"pera\", \"manzana\", \"banana\", \"naranja\"] arr.unshift('kiwi') > 5 \/\/el arreglo queda: [\"kiwi\", \"pera\", \"manzana\", \"banana\", \"naranja\"] arr.splice(0,1) > [\"kiwi\"] \/\/el arreglo queda: [\"pera\", \"manzana\", \"banana\", \"naranja\"] arr.splice(2,2) > [\"banana\", \"naranja\"] \/\/el arreglo queda: [\"pera\", \"manzana\"] arr.splice(2,0, \"banana\", \"naranja\") > [] \/\/el arreglo queda: [\"pera\", \"manzana\", \"banana\", \"naranja\"] arr.splice(0,1, \"kiwi\") > [\"pera\"] \/\/el arreglo queda: [\"kiwi\", \"manzana\", \"banana\", \"naranja\"] arr.reverse() > [\"naranja\", \"banana\", \"manzana\", \"kiwi\"] \/\/el arreglo queda: [\"naranja\", \"banana\", \"manzana\", \"kiwi\"] arr.sort() > [\"banana\", \"kiwi\", \"manzana\", \"naranja\"] \/\/el arreglo queda: [\"banana\", \"kiwi\", \"manzana\", \"naranja\"] arr.concat(['pera', 'pomelo']) > [\"banana\", \"kiwi\", \"manzana\", \"naranja\", \"pera\", \"pomelo\"] \/\/el arreglo queda: [\"banana\", \"kiwi\", \"manzana\", \"naranja\"] arr.join() > \"banana,kiwi,manzana,naranja\" arr.indexOf('naranja') > 3 arr.indexOf('kiwi') > 1 [\/js] En la segunda parte de este art\u00edculo se muestran ejemplos de los m\u00e9todos m\u00e1s interesantes de array: forEach, filter, map, every, some\n","html":"Trabajar con arreglos es una tarea habitual para cualquier programador, particularmente para aquellos que elegimos el lenguaje javascript. Recorrer un arreglo, encontrar un elemento, obtener ciertos elementos seg\u00fan sus caracter\u00edsticas son tareas frecuentes. Peque\u00f1os pedazos de c\u00f3digo para manejar arreglos se copian y pegan (o en el mejor de los casos se reescriben) continuamente. La pregunta es simple: Algo que nos resulta tan natural y que estamos tan acostumbrados a hacer d\u00eda a d\u00eda, \u00bflo estamos haciendo de la mejor manera?\r\n\r\nA continuaci\u00f3n se muestran los m\u00e9todos de la clase array y algunos ejemplos de como pueden mejorar nuestro c\u00f3digo notablemente. Estos m\u00e9todos tienen implementaci\u00f3n nativa en navegadores modernos, con lo cual la eficiencia es superior comparada con la eficiencia de cualquier otra librer\u00eda .js para colecciones (se puede utilizar <a title=\"array.js\" href=\"http:\/\/ferrod20.github.com\/array.js\/\" target=\"_blank\">array.js<\/a> para obtener soporte completo). Todav\u00eda m\u00e1s: por su vasta funcionalidad, los m\u00e9todos de la clase array abarcan a casi todos los m\u00e9todos de colecciones no nativos, solo hay que aprender a utilizarlos.\r\n<h3 style=\"text-align: center\">M\u00e9todos<\/h3>\r\n<h4>Eliminar<\/h4>\r\n<strong>pop<\/strong>: Elimina el ultimo elemento. Devuelve el elemento eliminado.\r\n<strong>shift<\/strong>: Elimina el primer elemento. Devuelve el elemento eliminado.\r\n<h4>Agregar<\/h4>\r\n<strong>push<\/strong>: Agrega al final del arreglo uno o m\u00e1s elementos. Devuelve la nueva longitud.\r\n<strong>unshift<\/strong>: Agrega uno o m\u00e1s elementos al inicio. Devuelve la nueva longitud.\r\n<strong>splice<\/strong>: Agrega y\/o elimina elementos.\r\n<h4>Orden<\/h4>\r\n<strong>reverse<\/strong>: Da vuelta el arreglo.\r\n<strong>sort<\/strong>: Ordena los elementos.\r\n<h4>Uni\u00f3n<\/h4>\r\n<strong>concat<\/strong>: Une 2 arreglos.\r\n<strong>join<\/strong>: Une los elementos en un string.\r\n\r\n<h4>Posici\u00f3n<\/h4>\r\n<strong>indexOf<\/strong>: Devuelve el \u00edndice del primer elemento encontrado.\r\n<strong>lastIndexOf<\/strong>: Devuelve el \u00edndice del \u00faltimo elemento encontrado.\r\n\r\n<h4>Recorrer<\/h4>\r\n<strong>forEach<\/strong>: Ejecuta una funci\u00f3n para cada elemento del arreglo.\r\n<strong>filter<\/strong>: Devuelve un nuevo arreglo cuyos elementos satisfacen la funci\u00f3n pasada por par\u00e1metro.\r\n<strong>map<\/strong>: Dada una funci\u00f3n de conversi\u00f3n, devuelve un nuevo arreglo con cada elemento convertido.\r\n<strong>some<\/strong>: Dada una funci\u00f3n, devuelve verdadero si alg\u00fan elemento cumple con la misma.\r\n<strong>every<\/strong>: Dada una funci\u00f3n, devuelve verdadero si todos los elementos cumplen con la misma.\r\n<h3 style=\"text-align: center\">Ejemplos<\/h3>\r\n[js]\r\nvar arr = ['durazno', 'pera', 'manzana', 'banana', 'mandarina']\r\n\r\narr.pop()\r\n&gt; &quot;mandarina&quot; \/\/el arreglo queda: [&quot;durazno&quot;, &quot;pera&quot;, &quot;manzana&quot;, &quot;banana&quot;]\r\n\r\narr.shift()\r\n&gt; &quot;durazno&quot; \/\/el arreglo queda: [&quot;pera&quot;, &quot;manzana&quot;, &quot;banana&quot;]\r\n\r\narr.push('naranja')\r\n&gt; 4 \/\/el arreglo queda: [&quot;pera&quot;, &quot;manzana&quot;, &quot;banana&quot;, &quot;naranja&quot;]\r\n\r\narr.unshift('kiwi')\r\n&gt; 5 \/\/el arreglo queda: [&quot;kiwi&quot;, &quot;pera&quot;, &quot;manzana&quot;, &quot;banana&quot;, &quot;naranja&quot;]\r\n\r\narr.splice(0,1)\r\n&gt; [&quot;kiwi&quot;] \/\/el arreglo queda: [&quot;pera&quot;, &quot;manzana&quot;, &quot;banana&quot;, &quot;naranja&quot;]\r\n\r\narr.splice(2,2)\r\n&gt; [&quot;banana&quot;, &quot;naranja&quot;] \/\/el arreglo queda: [&quot;pera&quot;, &quot;manzana&quot;]\r\n\r\narr.splice(2,0, &quot;banana&quot;, &quot;naranja&quot;)\r\n&gt; [] \/\/el arreglo queda: [&quot;pera&quot;, &quot;manzana&quot;, &quot;banana&quot;, &quot;naranja&quot;]\r\n\r\narr.splice(0,1, &quot;kiwi&quot;)\r\n&gt; [&quot;pera&quot;] \/\/el arreglo queda: [&quot;kiwi&quot;, &quot;manzana&quot;, &quot;banana&quot;, &quot;naranja&quot;]\r\n\r\narr.reverse()\r\n&gt; [&quot;naranja&quot;, &quot;banana&quot;, &quot;manzana&quot;, &quot;kiwi&quot;] \/\/el arreglo queda: [&quot;naranja&quot;, &quot;banana&quot;, &quot;manzana&quot;, &quot;kiwi&quot;]\r\n\r\narr.sort()\r\n&gt; [&quot;banana&quot;, &quot;kiwi&quot;, &quot;manzana&quot;, &quot;naranja&quot;] \/\/el arreglo queda: [&quot;banana&quot;, &quot;kiwi&quot;, &quot;manzana&quot;, &quot;naranja&quot;]\r\n\r\narr.concat(['pera', 'pomelo'])\r\n&gt; [&quot;banana&quot;, &quot;kiwi&quot;, &quot;manzana&quot;, &quot;naranja&quot;, &quot;pera&quot;, &quot;pomelo&quot;] \/\/el arreglo queda: [&quot;banana&quot;, &quot;kiwi&quot;, &quot;manzana&quot;, &quot;naranja&quot;]\r\n\r\narr.join()\r\n&gt; &quot;banana,kiwi,manzana,naranja&quot;\r\n\r\narr.indexOf('naranja')\r\n&gt; 3\r\n\r\narr.indexOf('kiwi')\r\n&gt; 1\r\n[\/js]\r\n\r\nEn la segunda parte de este art\u00edculo se muestran ejemplos de los m\u00e9todos m\u00e1s interesantes de array: forEach, filter, map, every, some","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":30,"created_at":"Tue, 30 Oct 2012 16:15:43 +0000","created_by":1,"updated_at":"Tue, 30 Oct 2012 16:15:43 +0000","updated_by":1,"published_at":"Tue, 30 Oct 2012 16:15:43 +0000","published_by":1},{"id":3005,"title":"WebSockets y SocketIO","slug":"websockets-y-socketio","markdown":"\nSi todav\u00eda no arrancaste a ver la magia del protocolo WS (web socket) este post intenta meterte en tema.\n\n### Qu\u00e9 es WebSocket?\n\n[![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/ws_logo-150x150.png \"ws_logo\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/ws_logo.png) WebSocket es un protocolo nuevo para la web bajo TCP, por el cual, a diferencia de la conexi\u00f3n que venimos usando bajo HTTP, este es bi-direccional, que significa esto?, hoy por hoy ven\u00eds usando una conexi\u00f3n en una sola direcci\u00f3n, ped\u00eds al servidor y esperas la respuesta (o viceversa con ServerEvents). Pero con web sockets el servidor te habla tambi\u00e9n, te puede llamar y mandar un mensaje en cualquier momento.   \n Esto es genial, ya que las posibilidades de magia en un sito web aumentan considerablemente, pero hay que tener en cuenta algunas cosas, ya que son **Web** Sockets: [![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/cables21-300x223.jpg \"cables21\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/cables21.jpg)- Se inicia con un *handshake* HTTP, por lo que si no hay HTTP no hay WebSockets\n- Tanto servidor como cliente tienen que soportarlo (para eso tenemos a HTML 5 en cliente y SocketIO en el servicor :P )\n- S\u00f3lo podemos transmitir texto\/ JSON (a diferencia del TCP convencional en el que podemos transmitir streams de bytes)\n- La conexi\u00f3n TCP va por el puerto 80 (lo cual est\u00e1 bueno en algunos casos donde tenemos firewalls)\n- As\u00ed como tenemos HTTPS (seguros), podemos tener WSS jeje, pero no todos los navegadores que soportan WS, tambi\u00e9n soportan WSS\n\n  \n### C\u00f3mo funciona?\n\n[![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/websocket-lifecycle-300x245.png \"websocket-lifecycle\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/websocket-lifecycle.png) Para iniciar una conexi\u00f3n con el protocolo WS primero el cliente le pide al servidor que quiere iniciar esta conexi\u00f3n (handshake: se pasan unos secretitos para validarse), el servidor responde un \"dale para adelante\" y a partir de ah\u00ed dejan de utilizar HTTP y pasan a WS. Aparte de darnos est\u00e1 posibilidad de una conexi\u00f3n bi-direccional, nos ahorramos el \"payload\", es decir, en estas transmiciones que hacemos por el protocolo ws ya no tenemos el HTTP header y toda la data de \"info\" para que el servidor sepa que le enviamos y nosotros que recibimos, qu\u00e9 tipo de conexi\u00f3n usamos, etc. Tengamos en cuenta que transmitimos texto y nos quedamos enganchados al servidor hasta que nosotros como clientes decidamos que no queremos estar mas comunicados. Ahora que ya sabemos de que se trata, vamos a utilizarlo. - - - - - -\n\n[![](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/socketio_logo.png \"socketio_logo\")](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/socketio_logo.png) SocketIO es una biblioteca que nos facilita incre\u00edblemente el uso de web sockets en NodeJS. As\u00ed que arranquemos a configurar: Instalamos el paquete NPM de SocketIO y ya que estamos instalamos el de ExpressJS para nuestro servidor Web: [bash] npm install socket.io npm install express [\/bash] Creamos un server.js donde vamos a levantar nuestro servidor Express con soporte para WebSocket [js title=\"server.js\" highlight=\"6,18,27,31,35\"] \/\/referenciamos a expressJS var app = require('express')() \/\/ creamos un web server , server = require('http').createServer(app) \/\/ y le agregamos le agregamos socketIO , io = require('socket.io').listen(server); \/\/ ponemos en escucha nuestro server Express con WebSocket server.listen(80); \/\/ agregamos una ruta inicial para retornar un index.html app.get('\/', function (req, res) { res.sendfile(__dirname + '\/index.html'); }); \/\/ nos suscribimos al evento de socketIO cuando \/\/ un cliente se conecta por WebSockets io.sockets.on('connection', function (socket) { \/\/ este callback va a ser llamado cuando tenemos \/\/ un nuevo cliente y en el argumento 'socket' \/\/ vamos a tener nuestro 'enganche' a ese cliente \/\/ apenas se conecta, le mandamos un mensaje \/\/ de bienvenida haciendo un 'emit' con un nombre \/\/ para el mensaje y un json con los datos socket.emit('bienvenida', { digo: 'Hola cliente WS!' }); \/\/ nos suscribimos a un mensaje que nos puede \/\/ enviar el cliente. socket.on('quiero un random', function (cada_cuanto) { setInterval(function(){ var rnd = Math.floor((Math.random()*1000)+1); socket.emit('toma un random', { numero: rnd }) }, cada_cuanto); }); }); [\/js] Ahora creamos un index.html que es el que retorna el servidor con la conexi\u00f3n a WebSocket [js title=\"index.html\" highlight=\"6,10,14,20,25\" htmlscript=\"true\"]    <!-- Este script no existe!, y est\u00e1 bien que as\u00ed sea, ya que lo genera SocketIO autom\u00e1ticamente al recibir el pedido del archivo --> <script src=\"\/socket.io\/socket.io.js\" type=\"text\/javascript\"><\/script> <script type=\"text\/javascript\"> \/\/ Nos conectamos al WebSocket var socket = io.connect('http:\/\/localhost'); \/\/ Nos suscribimos al mensaje de bienvenida \/\/ que creamos en el servidor socket.on('bienvenida', function (bienvenida) { document.write(bienvenida.digo); \/\/ Una vez que nos saluda el servidor \/\/ Le enviamos un mensaje pidiendo un random \/\/ cada 5 segundos (5000 milisegundos) socket.emit('quiero un random', 5000); }); \/\/ Por otro lado nos suscribimos al mensaje del \/\/ del servidor para el n\u00famero random que nos va a enviar socket.on('toma un random', function (data) { console.log(data.numero); }); <\/script>   <!-- ac\u00e1 toda la magia en HTML --> <body\/>  [\/js] Lo que nos queda es correr el servidor web [bash] node server.js [\/bash] Abrimos un navegador y llamamos a http:\/\/localhost y listo! (abr\u00ed la consola para ver las llamadas del servidor con los randoms :) ). > Al principio expliqu\u00e9 que tanto el cliente como el servidor deben soportar web sockets, tenemos que tener en cuenta que es necesario HTML5 con web sockets, te dejo este [LINK](http:\/\/caniuse.com\/#feat=websockets) con el detalle de los navegadores que lo soportan. Fuera de eso ten\u00e9 en cuenta que SocketIO se encarga de que la conexi\u00f3n funcione sin importar el navegador, esto lo hace intentando con otros mecanismos de transporte (XHR Pooling, Flash Sockets, etc.). No va a ser con web sockets pero va a funcionar como si lo fuera :)\n\n  \n**Te dejo el c\u00f3digo del ejemplo - [ejemplo.zip](http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/ejemplo.zip)** Toma este c\u00f3digo como un ejemplo muy simple y b\u00e1sico de SocketIO, se pueden hacer much\u00edsimas cosas m\u00e1s, como armar rooms o agrupar clientes por ruta de URI, emitir mensajes a todos o s\u00f3lo al que le *habl\u00f3* al servidor, etc. Te recomiendo que veas mas ejemplos en el sitio de [socket.io: how to use](http:\/\/socket.io\/#how-to-use)#### Links \u00datiles\n\n- [NodeJS](http:\/\/nodejs.org\/ \"NodeJS\")\n- [SocketIO](http:\/\/socket.io\/ \"SocketIO\")\n- [ExpressJS](http:\/\/expressjs.com\/ \"ExpressJS\")\n\n\n","html":"Si todav\u00eda no arrancaste a ver la magia del protocolo WS (web socket) este post intenta meterte en tema.\r\n\r\n<h3>Qu\u00e9 es WebSocket?<\/h3>\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/ws_logo.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/ws_logo-150x150.png\" alt=\"\" title=\"ws_logo\" width=\"150\" height=\"150\" class=\"alignleft size-thumbnail wp-image-3024\" \/><\/a>\r\nWebSocket es un protocolo nuevo para la web bajo TCP, por el cual, a diferencia de la conexi\u00f3n que venimos usando bajo HTTP, este es bi-direccional, que significa esto?, hoy por hoy ven\u00eds usando una conexi\u00f3n en una sola direcci\u00f3n, ped\u00eds al servidor y esperas la respuesta (o viceversa con ServerEvents). Pero con web sockets el servidor te habla tambi\u00e9n, te puede llamar y mandar un mensaje en cualquier momento.\r\n\r\n<br\/>\r\nEsto es genial, ya que las posibilidades de magia en un sito web aumentan considerablemente, pero hay que tener en cuenta algunas cosas, ya que son <b>Web<\/b> Sockets:\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/cables21.jpg\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/cables21-300x223.jpg\" alt=\"\" title=\"cables21\" width=\"300\" height=\"223\" class=\"alignleft size-medium wp-image-3042\" style=\"margin-right: 30px; margin-top: 10px;\" \/><\/a>\r\n<ul>\r\n<li>Se inicia con un <i>handshake<\/i> HTTP, por lo que si no hay HTTP no hay WebSockets<\/li>\r\n<li>Tanto servidor como cliente tienen que soportarlo (para eso tenemos a HTML 5 en cliente y SocketIO en el servicor :P )<\/li>\r\n<li>S\u00f3lo podemos transmitir texto\/ JSON (a diferencia del TCP convencional en el que podemos transmitir streams de bytes)<\/li>\r\n<li>La conexi\u00f3n TCP va por el puerto 80 (lo cual est\u00e1 bueno en algunos casos donde tenemos firewalls)<\/li>\r\n<li>As\u00ed como tenemos HTTPS (seguros), podemos tener WSS jeje, pero no todos los navegadores que soportan WS, tambi\u00e9n soportan WSS<\/li>\r\n<\/ul>\r\n<br\/>\r\n<h3>C\u00f3mo funciona?<\/h3>\r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/websocket-lifecycle.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/websocket-lifecycle-300x245.png\" alt=\"\" title=\"websocket-lifecycle\" width=\"300\" height=\"245\" class=\"alignright size-medium wp-image-3022\" \/><\/a>\r\n\r\nPara iniciar una conexi\u00f3n con el protocolo WS primero el cliente le pide al servidor que quiere iniciar esta conexi\u00f3n (handshake: se pasan unos secretitos para validarse), el servidor responde un \"dale para adelante\" y a partir de ah\u00ed dejan de utilizar HTTP y pasan a WS.\r\nAparte de darnos est\u00e1 posibilidad de una conexi\u00f3n bi-direccional, nos ahorramos el \"payload\", es decir, en estas transmiciones que hacemos por el protocolo ws ya no tenemos el HTTP header y toda la data de \"info\" para que el servidor sepa que le enviamos y nosotros que recibimos, qu\u00e9 tipo de conexi\u00f3n usamos, etc.\r\nTengamos en cuenta que transmitimos texto y nos quedamos enganchados al servidor hasta que nosotros como clientes decidamos que no queremos estar mas comunicados.\r\n\r\nAhora que ya sabemos de que se trata, vamos a utilizarlo.\r\n<hr\/>\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/socketio_logo.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/socketio_logo.png\" alt=\"\" title=\"socketio_logo\" style=\"width: 300px; height: 100px;\" class=\"aligncenter size-thumbnail wp-image-3025\" \/><\/a>\r\n\r\nSocketIO es una biblioteca que nos facilita incre\u00edblemente el uso de web sockets en NodeJS.\r\nAs\u00ed que arranquemos a configurar:\r\n\r\nInstalamos el paquete NPM de SocketIO y ya que estamos instalamos el de ExpressJS para nuestro servidor Web:\r\n[bash]\r\nnpm install socket.io\r\nnpm install express\r\n[\/bash]\r\n\r\nCreamos un server.js donde vamos a levantar nuestro servidor Express con soporte para WebSocket\r\n[js title=\"server.js\" highlight=\"6,18,27,31,35\"]\r\n\/\/referenciamos a expressJS\r\nvar app = require('express')()\r\n  \/\/ creamos un web server\r\n  , server = require('http').createServer(app)\r\n  \/\/ y le agregamos le agregamos socketIO\r\n  , io = require('socket.io').listen(server);\r\n\r\n\/\/ ponemos en escucha nuestro server Express con WebSocket\r\nserver.listen(80);\r\n\r\n\/\/ agregamos una ruta inicial para retornar un index.html\r\napp.get('\/', function (req, res) {\r\n  res.sendfile(__dirname + '\/index.html');\r\n});\r\n\r\n\/\/ nos suscribimos al evento de socketIO cuando \r\n\/\/ un cliente se conecta por WebSockets\r\nio.sockets.on('connection', function (socket) {\r\n\r\n  \/\/ este callback va a ser llamado cuando tenemos\r\n  \/\/ un nuevo cliente y en el argumento 'socket'\r\n  \/\/ vamos a tener nuestro 'enganche' a ese cliente  \r\n\r\n  \/\/ apenas se conecta, le mandamos un mensaje\r\n  \/\/ de bienvenida haciendo un 'emit' con un nombre\r\n  \/\/ para el mensaje y un json con los datos\r\n  socket.emit('bienvenida', { digo: 'Hola cliente WS!' });\r\n\r\n  \/\/ nos suscribimos a un mensaje que nos puede \r\n  \/\/ enviar el cliente.\r\n  socket.on('quiero un random', function (cada_cuanto) {\r\n\r\n    setInterval(function(){\r\n      var rnd = Math.floor((Math.random()*1000)+1);\r\n      socket.emit('toma un random', { numero: rnd })\r\n    }, cada_cuanto);\r\n\r\n  });\r\n});\r\n[\/js]\r\n\r\nAhora creamos un index.html que es el que retorna el servidor con la conexi\u00f3n a WebSocket\r\n[js title=\"index.html\" highlight=\"6,10,14,20,25\" htmlscript=\"true\"]\r\n&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;!-- Este script no existe!, y est\u00e1 bien que as\u00ed sea, ya que lo genera \r\n         SocketIO autom\u00e1ticamente al recibir el pedido del archivo --&gt;\r\n    &lt;script src=&quot;\/socket.io\/socket.io.js&quot; type=&quot;text\/javascript&quot;&gt;&lt;\/script&gt;\r\n\r\n    &lt;script type=&quot;text\/javascript&quot;&gt;\r\n      \/\/ Nos conectamos al WebSocket\r\n      var socket = io.connect('http:\/\/localhost');\r\n\r\n      \/\/ Nos suscribimos al mensaje de bienvenida \r\n      \/\/ que creamos en el servidor\r\n      socket.on('bienvenida', function (bienvenida) {\r\n        document.write(bienvenida.digo);\r\n        \r\n        \/\/ Una vez que nos saluda el servidor\r\n        \/\/ Le enviamos un mensaje pidiendo un random \r\n        \/\/ cada 5 segundos (5000 milisegundos)\r\n        socket.emit('quiero un random', 5000);\r\n      });\r\n\r\n      \/\/ Por otro lado nos suscribimos al mensaje del\r\n      \/\/ del servidor para el n\u00famero random que nos va a enviar\r\n      socket.on('toma un random', function (data) {\r\n        console.log(data.numero);\r\n      }); \r\n    &lt;\/script&gt;\r\n  &lt;\/head&gt;\r\n  &lt;body&gt;\r\n    &lt;!-- ac\u00e1 toda la magia en HTML --&gt;\r\n  &lt;body\/&gt;\r\n&lt;\/html&gt;\r\n[\/js]\r\n\r\nLo que nos queda es correr el servidor web\r\n[bash]\r\nnode server.js\r\n[\/bash]\r\n\r\nAbrimos un navegador y llamamos a http:\/\/localhost y listo! (abr\u00ed la consola para ver las llamadas del servidor con los randoms :) ).\r\n\r\n<blockquote>\r\nAl principio expliqu\u00e9 que tanto el cliente como el servidor deben soportar web sockets, tenemos que tener en cuenta que es necesario HTML5 con web sockets, te dejo este <a href=\"http:\/\/caniuse.com\/#feat=websockets\">LINK<\/a> con el detalle de los navegadores que lo soportan. Fuera de eso ten\u00e9 en cuenta que SocketIO se encarga de que la conexi\u00f3n funcione sin importar el navegador, esto lo hace intentando con otros mecanismos de transporte (XHR Pooling, Flash Sockets, etc.). No va a ser con web sockets pero va a funcionar como si lo fuera :)\r\n<\/blockquote>\r\n<br\/>\r\n<b>Te dejo el c\u00f3digo del ejemplo - <a href='http:\/\/fernetjs.com\/wp-content\/uploads\/2012\/11\/ejemplo.zip'>ejemplo.zip<\/a><\/b>\r\n\r\nToma este c\u00f3digo como un ejemplo muy simple y b\u00e1sico de SocketIO, se pueden hacer much\u00edsimas cosas m\u00e1s, como armar rooms o agrupar clientes por ruta de URI, emitir mensajes a todos o s\u00f3lo al que le <em>habl\u00f3<\/em> al servidor, etc. \r\nTe recomiendo que veas mas ejemplos en el sitio de <a href=\"http:\/\/socket.io\/#how-to-use\">socket.io: how to use<\/a>\r\n\r\n<h4>Links \u00datiles<\/h4>\r\n<ul>\r\n<li><a href=\"http:\/\/nodejs.org\/\" title=\"NodeJS\">NodeJS<\/a><\/li>\r\n<li><a href=\"http:\/\/socket.io\/\" title=\"SocketIO\">SocketIO<\/a><\/li>\r\n<li><a href=\"http:\/\/expressjs.com\/\" title=\"ExpressJS\">ExpressJS<\/a><\/li>\r\n<\/ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 22 Nov 2012 20:18:45 +0000","created_by":1,"updated_at":"Fri, 23 Nov 2012 09:08:27 +0000","updated_by":1,"published_at":"Thu, 22 Nov 2012 20:18:45 +0000","published_by":1},{"id":1687,"title":"jQuery","slug":"temp-slug-82","markdown":"\n[iframe src=\"http:\/\/webchat.freenode.net\/?channels=fernetjs\" width=\"647\" height=\"400\"][\/iframe] [Que es jQuery?](http:\/\/fernetjs.com\/2011\/12\/que-es-jquery\/ \"Que es jQuery?\")\n\n#### Eventos y DOM\n\n1. [Manejando Eventos: .live(), .bind(), .delegate() y .on()](http:\/\/fernetjs.com\/2012\/04\/manejando-eventos-con-jquery\/ \"Manejando eventos con jQuery\")\n2. [Obteniendo y asignando Text: .val(), .text() y .html()](http:\/\/fernetjs.com\/2012\/04\/dom-obteniendo-y-asignando-texto-con-jquery\/ \"DOM: Obteniendo y asignando texto con jQuery\")\n3. [Animando: .animate() y .stop()](http:\/\/fernetjs.com\/2011\/11\/jquery-animate-y-stop\/ \"jQuery animate y stop\")\n4. [Eventos de Mouse (mouseenter, mouseover, mouseleave y mouseout)](http:\/\/fernetjs.com\/2011\/10\/mouse-enter-over-leave-out-cual-y-cuando\/ \"Mouse enter, over, leave y out\")\n\n#### Manejo de Datos y AJAX\n\n1. jquery template\n2. jquery data-link\n3. jquery globalization\n4. Deferreds: [Parte 1](http:\/\/fernetjs.com\/2012\/02\/entendiendo-deferreds-en-jquery\/ \"Entendiendo Deferreds en jQuery\") | [Parte 2](http:\/\/fernetjs.com\/2012\/02\/deferreds-en-jquery-parte-2\/ \"Deferreds en jQuery (parte 2)\")\n\n#### Performance\n\n1. [Limpiando la memoria (empty() y remove())](http:\/\/fernetjs.com\/2011\/11\/performance-el-dom-y-la-memoria\/ \"Performance: el DOM y la Memoria\")\n2. mejorando selectores, caching de wrapped set, best practices\n\n\n","html":"\r\n[iframe src=\"http:\/\/webchat.freenode.net\/?channels=fernetjs\" width=\"647\" height=\"400\"][\/iframe]\r\n\r\n\r\n<a href=\"http:\/\/fernetjs.com\/2011\/12\/que-es-jquery\/\" title=\"Que es jQuery?\">Que es jQuery?<\/a>\r\n\r\n<h4>Eventos y DOM<\/h4>\r\n<ol>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/04\/manejando-eventos-con-jquery\/\" title=\"Manejando eventos con jQuery\">Manejando Eventos: .live(), .bind(), .delegate() y .on()<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2012\/04\/dom-obteniendo-y-asignando-texto-con-jquery\/\" title=\"DOM: Obteniendo y asignando texto con jQuery\">Obteniendo y asignando Text: .val(), .text() y .html()<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/11\/jquery-animate-y-stop\/\" title=\"jQuery animate y stop\">Animando: .animate() y .stop()<\/a><\/li>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/10\/mouse-enter-over-leave-out-cual-y-cuando\/\" title=\"Mouse enter, over, leave y out\">Eventos de Mouse (mouseenter, mouseover, mouseleave y mouseout)<\/a><\/li>\r\n<\/ol>\r\n\r\n<h4>Manejo de Datos y AJAX<\/h4>\r\n<ol>\r\n<li>jquery template<\/li>\r\n<li>jquery data-link<\/li>\r\n<li>jquery globalization<\/li>\r\n<li>Deferreds: <a href=\"http:\/\/fernetjs.com\/2012\/02\/entendiendo-deferreds-en-jquery\/\" title=\"Entendiendo Deferreds en jQuery\">Parte 1<\/a> | <a href=\"http:\/\/fernetjs.com\/2012\/02\/deferreds-en-jquery-parte-2\/\" title=\"Deferreds en jQuery (parte 2)\">Parte 2<\/a><\/li>\r\n<\/ol>\r\n\r\n<h4>Performance<\/h4>\r\n<ol>\r\n<li><a href=\"http:\/\/fernetjs.com\/2011\/11\/performance-el-dom-y-la-memoria\/\" title=\"Performance: el DOM y la Memoria\">Limpiando la memoria (empty() y remove())<\/a><\/li>\r\n<li>mejorando selectores, caching de wrapped set, best practices<\/li>\r\n<\/ol>","image":null,"featured":0,"page":1,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 03 Dec 2012 19:08:31 +0000","created_by":1,"updated_at":"Mon, 03 Dec 2012 19:08:31 +0000","updated_by":1,"published_at":"","published_by":1},{"id":3264,"title":"Trabajar con arreglos en javascript (parte 2)","slug":"trabajar-con-arreglos-en-javascript-parte-2","markdown":"\nComo promet\u00ed anteriormente en [Trabajar con arreglos en javascript (parte 1)](http:\/\/fernetjs.com\/2012\/10\/trabajar-con-arreglos-en-javascript-parte-1\/ \"Trabajar con arreglos en javascript (parte 1)\"), voy a presentar en esta oportunidad 3 \u00fatiles e interesantes m\u00e9todos que posee la clase array: **some**, **every** y **reduce**. Estos ejemplos que muestro a continuaci\u00f3n (solo simplificados para que no sea tan tedioso explicarlos y entenderlos) son piezas de c\u00f3digo genuinas que sirven para comprender la utilizaci\u00f3n de los m\u00e9todos mencionados en un contexto real. Se define la clase Usuario que posee la complejidad m\u00ednima y necesaria para exhibir los ejemplos. Usuario es una clase trivial con 3 propiedades: **id**, **nombre** y **esAdmin** y el m\u00e9todo **validar** que devuelve 2 errores. Se construye el arreglo **usuarios** con 3 objetos de esa clase. [js] function Usuario(nombre, esAdmin, id){ this.nombre = nombre; this.esAdmin = esAdmin; this.id = id; this.validar = function (){ return [\"error1 \" + nombre, \"error2 \" + nombre]; }; }; var usu1 = new Usuario('Juana', false); var usu2 = new Usuario('Pedro', false); var usu3 = new Usuario('Alberta', true); var usuarios = [usu1, usu2, usu3]; [\/js]\n\nsome\n----\n\n Dada una funci\u00f3n, **some** devuelve verdadero si alg\u00fan elemento del arreglo cumple con la misma. El objetivo de este ejemplo es escribir el c\u00f3digo necesario para saber si alguno de los usuarios es administrador. #### Usando for:\n\n [js] var hayAlMenosUnAdministrador = false; for (var i; i < usuarios.length; i++) { var usuario = usuarios[i]; if (usuario.esAdmin) hayAlMenosUnAdministrador = true; } [\/js] #### Usando some:\n\n [js] var hayAlMenosUnAdministrador = usuarios.some(function(usuario){ return usuario.esAdmin; }) [\/js] #### Usando some pero m\u00e1s prolijo:\n\n [js] var esAdmin = function(usuario){ return usuario.esAdmin; }; var hayAlMenosUnAdministrador = usuarios.some(esAdmin); [\/js] every\n-----\n\n Dada una funci\u00f3n, **every** devuelve verdadero si todos los elementos del arreglo cumplen con la misma. El objetivo de este ejemplo es practicamente la misma idea anterior, solo que en este caso el objetivo es saber si todos los usuarios son administradores. [js] var sonTodosAdmin = usuarios.every(esAdmin); [\/js] reduce\n------\n\n**reduce** aplica una funci\u00f3n que toma como par\u00e1metros el valor acumulado y el elemento actual del arreglo. Esa funci\u00f3n devuelve el nuevo valor acumulado. El segundo par\u00e1metro de **reduce** recibe el valor inicial acumulado. El objetivo de este ejemplo es escribir el c\u00f3digo necesario para construir un arreglo con todos los errores de validaci\u00f3n de todos los usuarios. Recordemos que cada objeto usuario posee el m\u00e9todo **validar** que devuelve los errores de validaci\u00f3n del mismo. #### Usando for:\n\n [js] var todosLosErrores = []; for (var i = 0; i < usuarios.length; i++){ var usuario = usuarios[i]; var errores = usuario.validar(); for (var e = 0; e < errores.length; i++) todosLosErrores.push(e); } [\/js] #### Mejorado:\n\n [js] var todosLosErrores = []; for (var i = 0; i < usuarios.length; i++){ var usuario = usuarios[i]; var errores = usuario.validar(); todosLosErrores = todosLosErrores.concat(errores); } [\/js] #### Usando reduce:\n\n [js] var todosLosErrores = usuarios.reduce( function(errores, usuario){ return errores.concat(usuario.validar()); },[]); [\/js] #### Usando reduce pero m\u00e1s prolijo:\n\n [js] var agregarErrores = function(errores, usuario){ return errores.concat(usuario.validar()); } var todosLosErrores = usuarios.reduce(agregarErrores,[]); [\/js] En la tercera parte de este art\u00edculo se muestran ejemplos de los m\u00e9todos: **forEach**, **filter** y **map**.\n","html":"Como promet\u00ed anteriormente en <a href=\"http:\/\/fernetjs.com\/2012\/10\/trabajar-con-arreglos-en-javascript-parte-1\/\" title=\"Trabajar con arreglos en javascript (parte 1)\" target=\"_blank\">Trabajar con arreglos en javascript (parte 1)<\/a>, voy a presentar en esta oportunidad 3 \u00fatiles e interesantes m\u00e9todos que posee la clase array: <strong>some<\/strong>, <strong>every<\/strong> y <strong>reduce<\/strong>.\r\n\r\nEstos ejemplos que muestro a continuaci\u00f3n (solo simplificados para que no sea tan tedioso explicarlos y entenderlos) son piezas de c\u00f3digo genuinas que sirven para comprender la utilizaci\u00f3n de los m\u00e9todos mencionados en un contexto real.\r\n\r\nSe define la clase Usuario que posee la complejidad m\u00ednima y necesaria para exhibir los ejemplos.\r\n\r\nUsuario es una clase trivial con 3 propiedades: <strong>id<\/strong>, <strong>nombre<\/strong> y <strong>esAdmin<\/strong> y el m\u00e9todo <strong>validar<\/strong> que devuelve 2 errores. \r\nSe construye el arreglo <strong>usuarios<\/strong> con 3 objetos de esa clase.\r\n[js]\r\nfunction Usuario(nombre, esAdmin, id){\t\r\n\tthis.nombre = nombre;\r\n\tthis.esAdmin = esAdmin;\r\n\tthis.id = id;\r\n\t\t\r\n\tthis.validar = function (){\r\n\t\treturn [&quot;error1 &quot; + nombre, &quot;error2 &quot; + nombre];\r\n\t};\r\n};\r\n\r\nvar usu1 = new Usuario('Juana', false);\r\nvar usu2 = new Usuario('Pedro', false);\r\nvar usu3 = new Usuario('Alberta', true);\r\n\r\nvar usuarios = [usu1, usu2, usu3];\r\n[\/js]\r\n<\/br>\r\n<h2 style=\"text-align: center\">some<\/h2>\r\nDada una funci\u00f3n, <strong>some<\/strong> devuelve verdadero si alg\u00fan elemento del arreglo cumple con la misma.\r\nEl objetivo de este ejemplo es escribir el c\u00f3digo necesario para saber si alguno de los usuarios es administrador.\r\n\r\n<h4>Usando for:<\/h4>\r\n[js]\r\nvar hayAlMenosUnAdministrador = false;\r\nfor (var i; i &lt; usuarios.length; i++) {\r\n\tvar usuario = usuarios[i];\r\n\tif (usuario.esAdmin) \r\n\t\thayAlMenosUnAdministrador = true;        \r\n}\r\n[\/js]\r\n<h4>Usando some:<\/h4>\r\n[js]\r\nvar hayAlMenosUnAdministrador = usuarios.some(function(usuario){\r\n\treturn usuario.esAdmin;\r\n})\r\n[\/js]\r\n<h4>Usando some pero m\u00e1s prolijo:<\/h4>\r\n[js]\r\nvar esAdmin = function(usuario){\r\n\treturn usuario.esAdmin;\r\n};\r\n\r\nvar hayAlMenosUnAdministrador = usuarios.some(esAdmin);\r\n[\/js]\r\n<\/br>\r\n<h2 style=\"text-align: center\">every<\/h2>\r\nDada una funci\u00f3n, <strong>every<\/strong> devuelve verdadero si todos los elementos del arreglo cumplen con la misma.\r\nEl objetivo de este ejemplo es practicamente la misma idea anterior, solo que en este caso el objetivo es saber si todos los usuarios son administradores.\r\n[js]\r\nvar sonTodosAdmin = usuarios.every(esAdmin);\r\n[\/js]\r\n<\/br>\r\n<h2 style=\"text-align: center\">reduce<\/h2>\r\n<strong>reduce<\/strong> aplica una funci\u00f3n que toma como par\u00e1metros el valor acumulado y el elemento actual del arreglo. Esa funci\u00f3n devuelve el nuevo valor acumulado. El segundo par\u00e1metro de <strong>reduce<\/strong> recibe el valor inicial acumulado.\r\nEl objetivo de este ejemplo es escribir el c\u00f3digo necesario para construir un arreglo con todos los errores de validaci\u00f3n de todos los usuarios. Recordemos que cada objeto usuario posee el m\u00e9todo <strong>validar<\/strong> que devuelve los errores de validaci\u00f3n del mismo.\r\n\r\n<h4>Usando for:<\/h4>\r\n[js]\r\nvar todosLosErrores = [];\r\nfor (var i = 0; i &lt; usuarios.length; i++){\r\n\tvar usuario = usuarios[i];\r\n\tvar errores = usuario.validar();\r\n\t\r\n\tfor (var e = 0; e &amp;lt; errores.length; i++)\r\n\t\ttodosLosErrores.push(e);\r\n}\r\n[\/js]\r\n<h4>Mejorado:<\/h4>\r\n[js]\r\nvar todosLosErrores = [];\r\nfor (var i = 0; i &lt; usuarios.length; i++){\r\n\tvar usuario = usuarios[i];\r\n\tvar errores = usuario.validar();\t\r\n\ttodosLosErrores = todosLosErrores.concat(errores);\r\n}\r\n[\/js]\r\n<h4>Usando reduce:<\/h4>\r\n[js]\r\nvar todosLosErrores = usuarios.reduce( function(errores, usuario){\r\n\treturn errores.concat(usuario.validar());\r\n},[]);\r\n[\/js]\r\n<h4>Usando reduce pero m\u00e1s prolijo:<\/h4>\r\n[js]\r\nvar agregarErrores = function(errores, usuario){\r\n\treturn errores.concat(usuario.validar());\r\n}\r\nvar todosLosErrores = usuarios.reduce(agregarErrores,[]);\r\n[\/js]\r\n\r\nEn la tercera parte de este art\u00edculo se muestran ejemplos de los m\u00e9todos: <strong>forEach<\/strong>, <strong>filter<\/strong> y <strong>map<\/strong>.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":30,"created_at":"Tue, 04 Dec 2012 13:54:25 +0000","created_by":1,"updated_at":"Tue, 04 Dec 2012 13:54:25 +0000","updated_by":1,"published_at":"Tue, 04 Dec 2012 13:54:25 +0000","published_by":1},{"id":3149,"title":"Manejando Errores","slug":"manejando-errores","markdown":"\nAlgo necesario en todo lenguaje de programaci\u00f3n es el manejo de errores. Lamentablemente en JS es poco usado y en llamadas as\u00edncronas est\u00e1 mal usado la mayor\u00eda de las veces. Es por eso que armo este post para que nos enteremos de que el objeto Error existe en JS y nos sirve mucho mas de lo que sabemos y\/o creemos. Arrancamos con un ejemplo com\u00fan: [js] try { \/\/.. venimos haciendo cosas throw \"disparo un error!\"; } catch(e){ console.log(e); \/\/ \"disparo un error!\" } [\/js] Bueno, tiramos un error que es un string, pero podemos hacerlo mejor: [js] try { \/\/.. venimos haciendo cosas throw new Error(\"disparo un error!\"); } catch(e){ console.log(e.message); \/\/\"disparo un error!\" console.log(e.stack); \/\/Error: disparo un error! at http:\/\/localhost\/:3:2 at condition .... } [\/js] Ahh, ahora se v\u00e9 mucho mejor, tenemos el stack y el mensaje por separado y si hacemos un *throw e;* vamos a ver el error completito en la consola (o en el terminal en el caso de NodeJS). O sea, que ahora es un objeto, no mas cadenas voladas en el *eter*.\n\n> C\u00f3mo vimos en [otro post](http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/ \"Alcance de Variables (var scope)\"), el alcance de las variables es a nivel de funci\u00f3n, pero para el catch, nuestra variable e tiene alcance SOLO dentro del catch: [js] console.dir(e); \/\/error: e no est\u00e1 declarada catch(e){ console.dir(e); \/\/jeje } console.dir(e); \/\/error: e no est\u00e1 declarada [\/js]\n\n Manejar errores de esta manera nos trae muchas facilidades, aparte de tener el Stack y de tener realmente una Excepcion y no un string, nos abre las puertas para empezar a manejar errores enserio, ahora podemos: ### Crear nuestros Tipos de Errores:\n\n [js highlight=\"5,6\"] function MiError(mensaje) { this.name = \"MiError\"; this.message = mensaje || \"No Especificado\"; } MiError.prototype = new Error(); MiError.prototype.constructor = MiError; try { throw new MiError(\"explot\u00f3!\"); } catch (e) { console.log(e.name); \/\/ \"MiError\" console.log(e.message); \/\/ \"explot\u00f3\" console.log(e.stack); \/\/ Error: explot\u00f3! at http:\/\/localhost\/:9:2 at condition .... console.log(e instanceof MiError); \/\/true } [\/js] Simplemente extendemos la clase *Error* con nuestro nuevo tipo de error :) Al tener tipos propios de errores, es seguro que vamos a necesitar catchear cada tipo, porque para eso los creamos, ya que esto no es un feo string y ahora es una clase, podemos comprobar por instancia para que quede prolijo: [js highlight=\"4\"] try { throw new MiError(\"explot\u00f3!\"); } catch (e) { if (e instanceof MiError){ console.log('fue MiError'); } else { console.log('fue otra cosa as\u00ed que disparo un error no manejado'); throw e; } } [\/js] > Van a ver por ah\u00ed casos donde se utiliza: [js]catch(e if e instanceof MiError)[\/js] Cuidado con eso porque solo lo soporta Mozilla y no es parte del Standard ECMAScript.\n\n Aparte del *coqueto* Error (pi\u00e9nsenlo como la clase *Exception* de C# o Java, ser\u00eda el error m\u00e1s gen\u00e9rico), tambi\u00e9n tenemos otras Excepciones ya definidas que heredan de Error: - EvalError\n- RangeError\n- ReferenceError\n- SyntaxError\n- TypeError\n- URIError\n\n> Todo este manejo de errores funciona tanto en el cliente, como en el servidor con NodeJS. Lo que hay que tener en cuenta es que algunos navegadores ancianos no soportan la clase Error, pero hablamos de navegadores muy ancianos. Para el cliente tambi\u00e9n hay otros tipos de excepciones ya definidas por ejemplo **DOMExceptions** (este va a depender de los niveles de DOM y del navegador, pero va para otro post :))\n\n### Manejando errores en Callbacks\n\n Ahora bien, tenemos otro caso de manejo de errores, los famosos y amados [callbacks](http:\/\/fernetjs.com\/2011\/12\/creando-y-utilizando-callbacks\/ \"Creando y utilizando callbacks\"), como manejar\u00edamos los errores?, tenemos un tema, no deber\u00edamos hacer un throw ya que un callback puede ejecutarse en otro momento (as\u00edncrono) y disparar una excepci\u00f3n dentro de un callback en otro *tiempo* puede traer graves problemas. Lo que se utiliza, y no se bien si realmente es un standard (en NodeJS), es tener un argumento m\u00e1s (**el primero**) en cada callback, el cual va a ser el error: [js] dao.leerDatos(function(error, datos){ \/\/ en error tengo la excepcion (pero no hay try\/ catch) }); [\/js] Porque el argumento *error* en el primer lugar?, yo creo que viene por el lado del *opcional*, en JavaScript ning\u00fan argumento es obligatorio, podemos definirlos o no, y usarlos o no, no estamos obligados a seguir una *firma* de m\u00e9todos\/ funciones como en otros lenguajes. Entonces de esta manera si queremos agarrar el argumento *datos* estamos obligados a agregar el argumento *error*, por su orden :P Es por eso que en el caso de un callback que no devuelve nada, simplemente se dispara cuando algo termina, lo ideal ser\u00eda que igualmente tenga un argumento error: [js] dao.guardar(entidad, function(error){ \/\/ etc .. }); [\/js] Bueno, y como manejo si hubo error o no?, ya que no hay try\/ catch? [js highlight=\"2,4\"] dao.leerDatos(function(error, datos){ if (error) { \/\/ manejo el error. return; } console.dir(datos); }); [\/js] Simple!, compruebo si *error* es un [valor verdadero](http:\/\/fernetjs.com\/2012\/04\/valores-falsos-y-verdaderos\/ \"Valores falsos y verdaderos: || y &&\") y recuerden hacer un return, o salir de ese callback de alguna otra forma, ya que sino la funci\u00f3n continuar\u00e1 su ejecuci\u00f3n, y no me suena a que queremos que suceda. Mirando esto mismo de quien llama a ese manejo podemos ver como funciona: [js highlight=\"5,10\"] function hacerLlamada(termino) { dao.leerDatos(function(error, datos){ if (error) { termino(error); return; } \/\/ alg\u00fan calculo m\u00e1gico termino(null, datos); }); } hacerLlamada(function(err, datos){ if (err) throw err; else console.dir(datos); }); [\/js] El ejemplo no es lo m\u00e1s feliz, pero lo que te quiero mostrar es como ser\u00eda el que llama a esa funci\u00f3n con otro callback. De est\u00e1 manera nos queda el c\u00f3digo mucho mas ordenado y con los errores bien manejados, como si hubiera un try y catch (que va subiendo en su ejecuci\u00f3n a medida que es disparado y atrapado por el que lo llam\u00f3), hacemos lo mismo con callbacks y somos todos felices :). #### Links \u00fatiles y fuentes de info ;)\n\n- [String is not an Error](http:\/\/www.devthought.com\/2011\/12\/22\/a-string-is-not-an-error\/) por Guille Rauch\n- [JavaScript Errors - Throw and Try to Catch](http:\/\/www.w3schools.com\/js\/js_errors.asp) W3School\n- [Error en MDN (MOZILLA DEVELOPER NETWORK)](https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Reference\/Global_Objects\/Error)\n\n\n","html":"Algo necesario en todo lenguaje de programaci\u00f3n es el manejo de errores. Lamentablemente en JS es poco usado y en llamadas as\u00edncronas est\u00e1 mal usado la mayor\u00eda de las veces. Es por eso que armo este post para que nos enteremos de que el objeto Error existe en JS y nos sirve mucho mas de lo que sabemos y\/o creemos.\r\n\r\nArrancamos con un ejemplo com\u00fan:\r\n[js]\r\ntry {\r\n  \/\/.. venimos haciendo cosas \r\n  throw &quot;disparo un error!&quot;;\r\n}\r\ncatch(e){\r\n  console.log(e); \/\/ &quot;disparo un error!&quot;\r\n}\r\n[\/js]\r\n\r\nBueno, tiramos un error que es un string, pero podemos hacerlo mejor:\r\n[js]\r\ntry {\r\n  \/\/.. venimos haciendo cosas \r\n  throw new Error(&quot;disparo un error!&quot;);\r\n}\r\ncatch(e){\r\n  console.log(e.message); \/\/&quot;disparo un error!&quot;\r\n  console.log(e.stack); \/\/Error: disparo un error! at http:\/\/localhost\/:3:2 at condition .... \r\n}\r\n[\/js]\r\n\r\nAhh, ahora se v\u00e9 mucho mejor, tenemos el stack y el mensaje por separado y si hacemos un <em>throw e;<\/em> vamos a ver el error completito en la consola (o en el terminal en el caso de NodeJS). O sea, que ahora es un objeto, no mas cadenas voladas en el <em>eter<\/em>.\r\n\r\n<blockquote>\r\nC\u00f3mo vimos en <a href=\"http:\/\/fernetjs.com\/2011\/10\/alcance-de-variables-var-scope\/\" title=\"Alcance de Variables (var scope)\">otro post<\/a>, el alcance de las variables es a nivel de funci\u00f3n, pero para el catch, nuestra variable e tiene alcance SOLO dentro del catch:\r\n[js]\r\nconsole.dir(e); \/\/error: e no est\u00e1 declarada\r\ncatch(e){\r\n  console.dir(e); \/\/jeje   \r\n}\r\nconsole.dir(e); \/\/error: e no est\u00e1 declarada\r\n[\/js]\r\n<\/blockquote>\r\n\r\nManejar errores de esta manera nos trae muchas facilidades, aparte de tener el Stack y de tener realmente una Excepcion y no un string, nos abre las puertas para empezar a manejar errores enserio, ahora podemos:\r\n\r\n<h3>Crear nuestros Tipos de Errores:<\/h3>\r\n[js highlight=\"5,6\"]\r\nfunction MiError(mensaje) {\r\n  this.name = &quot;MiError&quot;;\r\n  this.message = mensaje || &quot;No Especificado&quot;;\r\n}\r\nMiError.prototype = new Error();\r\nMiError.prototype.constructor = MiError;\r\n \r\ntry {\r\n  throw new MiError(&quot;explot\u00f3!&quot;);\r\n} catch (e) {\r\n  console.log(e.name);     \/\/ &quot;MiError&quot;\r\n  console.log(e.message);  \/\/ &quot;explot\u00f3&quot;\r\n  console.log(e.stack);  \/\/ Error: explot\u00f3! at http:\/\/localhost\/:9:2 at condition .... \r\n  console.log(e instanceof MiError); \/\/true\r\n}\r\n[\/js]\r\n\r\nSimplemente extendemos la clase <em>Error<\/em> con nuestro nuevo tipo de error :)\r\n\r\nAl tener tipos propios de errores, es seguro que vamos a necesitar catchear cada tipo, porque para eso los creamos, ya que esto no es un feo string y ahora es una clase, podemos comprobar por instancia para que quede prolijo:\r\n[js highlight=\"4\"]\r\ntry {\r\n  throw new MiError(&quot;explot\u00f3!&quot;);\r\n} catch (e) {\r\n  if (e instanceof MiError){\r\n    console.log('fue MiError');\r\n  }\r\n  else {\r\n    console.log('fue otra cosa as\u00ed que disparo un error no manejado');\r\n    throw e;\r\n  }\r\n}\r\n[\/js]\r\n\r\n<blockquote>\r\nVan a ver por ah\u00ed casos donde se utiliza: [js]catch(e if e instanceof MiError)[\/js] Cuidado con eso porque solo lo soporta Mozilla y no es parte del Standard ECMAScript.\r\n<\/blockquote>\r\n\r\nAparte del <em>coqueto<\/em> Error (pi\u00e9nsenlo como la clase <em>Exception<\/em> de C# o Java, ser\u00eda el error m\u00e1s gen\u00e9rico), tambi\u00e9n tenemos otras Excepciones ya definidas que heredan de Error: \r\n<ul>\r\n<li>EvalError<\/li>\r\n<li>RangeError<\/li>\r\n<li>ReferenceError<\/li>\r\n<li>SyntaxError<\/li>\r\n<li>TypeError<\/li>\r\n<li>URIError<\/li>\r\n<\/ul>\r\n\r\n<blockquote>\r\nTodo este manejo de errores funciona tanto en el cliente, como en el servidor con NodeJS. Lo que hay que tener en cuenta es que algunos navegadores ancianos no soportan la clase Error, pero hablamos de navegadores muy ancianos.\r\n\r\nPara el cliente tambi\u00e9n hay otros tipos de excepciones ya definidas por ejemplo <strong>DOMExceptions<\/strong> (este va a depender de los niveles de DOM y del navegador, pero va para otro post :))\r\n<\/blockquote>\r\n\r\n<h3>Manejando errores en Callbacks<\/h3>\r\nAhora bien, tenemos otro caso de manejo de errores, los famosos y amados <a href=\"http:\/\/fernetjs.com\/2011\/12\/creando-y-utilizando-callbacks\/\" title=\"Creando y utilizando callbacks\">callbacks<\/a>, como manejar\u00edamos los errores?, tenemos un tema, no deber\u00edamos hacer un throw ya que un callback puede ejecutarse en otro momento (as\u00edncrono) y disparar una excepci\u00f3n dentro de un callback en otro <em>tiempo<\/em> puede traer graves problemas.\r\n\r\nLo que se utiliza, y no se bien si realmente es un standard (en NodeJS), es tener un argumento m\u00e1s (<strong>el primero<\/strong>) en cada callback, el cual va a ser el error:\r\n[js]\r\ndao.leerDatos(function(error, datos){\r\n   \/\/ en error tengo la excepcion (pero no hay try\/ catch)\r\n});\r\n[\/js]\r\n\r\nPorque el argumento <em>error<\/em> en el primer lugar?, yo creo que viene por el lado del <em>opcional<\/em>, en JavaScript ning\u00fan argumento es obligatorio, podemos definirlos o no, y usarlos o no, no estamos obligados a seguir una <em>firma<\/em> de m\u00e9todos\/ funciones como en otros lenguajes. Entonces de esta manera si queremos agarrar el argumento <em>datos<\/em> estamos obligados a agregar el argumento <em>error<\/em>, por su orden :P\r\n\r\nEs por eso que en el caso de un callback que no devuelve nada, simplemente se dispara cuando algo termina, lo ideal ser\u00eda que igualmente tenga un argumento error:\r\n\r\n[js]\r\ndao.guardar(entidad, function(error){\r\n  \/\/ etc ..\r\n});\r\n[\/js]\r\n\r\nBueno, y como manejo si hubo error o no?, ya que no hay try\/ catch?\r\n[js highlight=\"2,4\"]\r\ndao.leerDatos(function(error, datos){\r\n  if (error) {\r\n    \/\/ manejo el error.\r\n    return;\r\n  }\r\n  \r\n  console.dir(datos);\r\n});\r\n[\/js]\r\n\r\nSimple!, compruebo si <em>error<\/em> es un <a href=\"http:\/\/fernetjs.com\/2012\/04\/valores-falsos-y-verdaderos\/\" title=\"Valores falsos y verdaderos: || y &&\">valor verdadero<\/a> y recuerden hacer un return, o salir de ese callback de alguna otra forma, ya que sino la funci\u00f3n continuar\u00e1 su ejecuci\u00f3n, y no me suena a que queremos que suceda.\r\n\r\nMirando esto mismo de quien llama a ese manejo podemos ver como funciona:\r\n\r\n[js highlight=\"5,10\"]\r\nfunction hacerLlamada(termino) {\r\n  \r\n  dao.leerDatos(function(error, datos){\r\n    if (error) {\r\n      termino(error);\r\n      return;\r\n    }\r\n    \r\n    \/\/ alg\u00fan calculo m\u00e1gico\r\n    termino(null, datos);\r\n  });\r\n}\r\n\r\nhacerLlamada(function(err, datos){\r\n  if (err) throw err;\r\n  else console.dir(datos);\r\n});\r\n\r\n[\/js]\r\n\r\nEl ejemplo no es lo m\u00e1s feliz, pero lo que te quiero mostrar es como ser\u00eda el que llama a esa funci\u00f3n con otro callback. De est\u00e1 manera nos queda el c\u00f3digo mucho mas ordenado y con los errores bien manejados, como si hubiera un try y catch (que va subiendo en su ejecuci\u00f3n a medida que es disparado y atrapado por el que lo llam\u00f3), hacemos lo mismo con callbacks y somos todos felices :). \r\n\r\n<h4>Links \u00fatiles y fuentes de info ;)<\/h4>\r\n<ul>\r\n<li><a href=\"http:\/\/www.devthought.com\/2011\/12\/22\/a-string-is-not-an-error\/\">String is not an Error<\/a> por Guille Rauch<\/li>\r\n<li><a href=\"http:\/\/www.w3schools.com\/js\/js_errors.asp\">JavaScript Errors - Throw and Try to Catch<\/a> W3School<\/li>\r\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Reference\/Global_Objects\/Error\">Error en MDN (MOZILLA DEVELOPER NETWORK)<\/a><\/li>\r\n<\/ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 12 Dec 2012 10:26:04 +0000","created_by":1,"updated_at":"Thu, 13 Dec 2012 11:32:39 +0000","updated_by":1,"published_at":"Wed, 12 Dec 2012 10:26:04 +0000","published_by":1},{"id":3318,"title":"Almacenando en el cliente: LocalStorage, SessionStorage y Cookies","slug":"almacenando-en-el-cliente-localstorage-sessionstorage-y-cookies","markdown":"\nSeguramente ya escuchaste sobre el almacenamiento local de HTML5, la intensi\u00f3n de este post es pegarle un vistazo para que empieces a usarlo. Primero tenemos que tener en cuenta que LocalStorage es el almacenamiento que no expira, y SessionStorage es el que vive s\u00f3lo en una sesi\u00f3n. Ambos tienen los mismos m\u00e9todos:\n\n- **getItem** ( *key* )\n- **setItem** ( *key* , *value* )\n- **removeItem** ( *key* )\n\n> Van a ver por ah\u00ed un **globalStorage**: es una implementaci\u00f3n de Mozilla previa a HTML5, pero desde la versi\u00f3n de Firefox 13 dej\u00f3 de soportarse, por lo que olvidate de que existe ;)\n\n No hay mucho para explicar sobre los m\u00e9todos ya que hablan por si solos, veamos un ejemplo: [js] if (window.localStorage) { localStorage.setItem(\"nombre\", \"pepe\"); var nombre = localStorage.getItem(\"nombre\"); localStorage.removeItem(\"nombre\"); } else { throw new Error('Tu Browser no soporta LocalStorage!'); } [\/js] > Tambi\u00e9n se puede utilizar los Items como propiedades del objeto localStorage \u00f3 sessionStorage (pero <font style=\"color:red\">**no est\u00e1 recomendado**<\/font>, as\u00ed que tomalo como t\u00edtulo informativo): [js] localStorage[\"nombre\"] = \"pepe\"; var nombre = localStorage.nombre; delete localStorage[\"nombre\"]; [\/js]\n\n El soporte de navegadores es muy amplio:  +----------------+--------+-----------------+----+-------+-----------------+ | Feature | Chrome | Firefox (Gecko) | IE | Opera | Safari (WebKit) | +----------------+--------+-----------------+----+-------+-----------------+ | localStorage | 4 | 3.5 | 8 | 10.50 | 4 | | sessionStorage | 5 | 2 | 8 | 10.50 | 4 | +----------------+--------+-----------------+----+-------+-----------------+\n\n Pueden ver mas info [ac\u00e1](http:\/\/caniuse.com\/#feat=namevalue-storage)**Y cu\u00e1nto podemos almacenar?**: depende mucho del navegador, pero la cantidad oscila entre 2.5 y 5 Mb (2.5 Mb en la mayor\u00eda de los navegadores, lo cual es bastante ;) ) Pueden ver la tabla completa y probar cuanto se banca el navegador en el que est\u00e1n en [Web Storage Test](http:\/\/dev-test.nemikor.com\/web-storage\/support-test\/)**Podemos guardar JSON?**, Si, pero yo te recomendaria que sea serializado, (en String) y lo que hagas **antes de enviarlo**. Por que esto? 1. Por los *\"fallbacks\/ polyfills\"*, si queremos agregarle un soporte a cookies por si no tiene disponible el web storage, puede que tengamos problemas si no estamos manejando strings.\n2. Lo serializa de todas formas, pero la diferencia es que no es autom\u00e1tico, por lo que podemos tener comportamientos extra\u00f1os:\n\n [js] localStorage.setItem(\"locura\", true); var locura = localStorage.getItem(\"locura\"); console.log(locura); \/\/ true console.log(typeof locura); \/\/ 'string' [\/js] Ahora, con JSON?, supongamos que tenemos: [js] var persona = { nombre: \"pepe\", edad: 20, locura: true }; [\/js] **Guardamos directo el JSON al localStorage:** [js title=\"Problem?\"] localStorage.setItem(\"persona\", persona); var personaGuardada = localStorage.getItem(\"persona\"); console.log(typeof persona); \/\/object console.log(typeof personaGuardada); \/\/string console.log(personaGuardada.locura); \/\/undefined! var personaGuardada = JSON.parse(personaGuardada); \/\/Uncaught SyntaxError [\/js] **Como habr\u00eda que hacerlo:** [js highlight=\"1,9\"] var personaAGuardar = JSON.stringify(persona); localStorage.setItem(\"persona\", personaAGuardar); var personaGuardada = localStorage.getItem(\"persona\"); console.log(typeof persona); \/\/object console.log(typeof personaGuardada); \/\/string var personaGuardada = JSON.parse(personaGuardada); console.log(personaGuardada.locura); \/\/true [\/js] - - - - - -\n\n Por \u00faltimo te dejo un fallback a Cookies, ya que no siempre tenemos soporte para usarlo, est\u00e1 es una implementacion de Mozilla bastante coqueta (no se si funciona en IE 7, por ejemplo), la idea es que en nuestra aplicaci\u00f3n usamos directamente window.localStorage y siempre va a existir, si el browser no lo soporta va a ir a cookies autom\u00e1ticamente. **Fuente**: [MDN - DOM Storage](https:\/\/developer.mozilla.org\/en-US\/docs\/DOM\/Storage) [js] if (!window.localStorage) { Object.defineProperty(window, \"localStorage\", new (function () { var aKeys = [], oStorage = {}; Object.defineProperty(oStorage, \"getItem\", { value: function (sKey) { return sKey ? this[sKey] : null; }, writable: false, configurable: false, enumerable: false }); Object.defineProperty(oStorage, \"key\", { value: function (nKeyId) { return aKeys[nKeyId]; }, writable: false, configurable: false, enumerable: false }); Object.defineProperty(oStorage, \"setItem\", { value: function (sKey, sValue) { if(!sKey) { return; } document.cookie = escape(sKey) + \"=\" + escape(sValue) + \"; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=\/\"; }, writable: false, configurable: false, enumerable: false }); Object.defineProperty(oStorage, \"length\", { get: function () { return aKeys.length; }, configurable: false, enumerable: false }); Object.defineProperty(oStorage, \"removeItem\", { value: function (sKey) { if(!sKey) { return; } document.cookie = escape(sKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=\/\"; }, writable: false, configurable: false, enumerable: false }); this.get = function () { var iThisIndx; for (var sKey in oStorage) { iThisIndx = aKeys.indexOf(sKey); if (iThisIndx === -1) { oStorage.setItem(sKey, oStorage[sKey]); } else { aKeys.splice(iThisIndx, 1); } delete oStorage[sKey]; } for (aKeys; aKeys.length > 0; aKeys.splice(0, 1)) { oStorage.removeItem(aKeys[0]); } for (var aCouple, iKey, nIdx = 0, aCouples = document.cookie.split(\/\\s*;\\s*\/); nIdx < aCouples.length; nIdx++) { aCouple = aCouples[nIdx].split(\/\\s*=\\s*\/); if (aCouple.length > 1) { oStorage[iKey = unescape(aCouple[0])] = unescape(aCouple[1]); aKeys.push(iKey); } } return oStorage; }; this.configurable = false; this.enumerable = true; })()); } [\/js]\n","html":"Seguramente ya escuchaste sobre el almacenamiento local de HTML5, la intensi\u00f3n de este post es pegarle un vistazo para que empieces a usarlo.\r\n\r\nPrimero tenemos que tener en cuenta que LocalStorage es el almacenamiento que no expira, y SessionStorage es el que vive s\u00f3lo en una sesi\u00f3n.\r\nAmbos tienen los mismos m\u00e9todos:\r\n\r\n<ul>\r\n<li><strong>getItem<\/strong> ( <em>key<\/em> )<\/li>\r\n<li><strong>setItem<\/strong> ( <em>key<\/em> , <em>value<\/em> )<\/li>\r\n<li><strong>removeItem<\/strong> ( <em>key<\/em> )<\/li>\r\n<\/ul>\r\n\r\n<blockquote>\r\nVan a ver por ah\u00ed un <strong>globalStorage<\/strong>: es una implementaci\u00f3n de Mozilla previa a HTML5, pero desde la versi\u00f3n de Firefox 13 dej\u00f3 de soportarse, por lo que olvidate de que existe ;)\r\n<\/blockquote>\r\n\r\nNo hay mucho para explicar sobre los m\u00e9todos ya que hablan por si solos, veamos un ejemplo:\r\n\r\n[js]\r\nif (window.localStorage) {\r\n\r\n  localStorage.setItem(&quot;nombre&quot;, &quot;pepe&quot;);\r\n\r\n  var nombre = localStorage.getItem(&quot;nombre&quot;);\r\n  \r\n  localStorage.removeItem(&quot;nombre&quot;);\r\n}\r\nelse {\r\n  throw new Error('Tu Browser no soporta LocalStorage!');\r\n}\r\n[\/js]\r\n\r\n<blockquote>\r\nTambi\u00e9n se puede utilizar los Items como propiedades del objeto localStorage \u00f3 sessionStorage (pero <font style=\"color:red\"><strong>no est\u00e1 recomendado<\/strong><\/font>, as\u00ed que tomalo como t\u00edtulo informativo):\r\n[js]\r\nlocalStorage[&quot;nombre&quot;] = &quot;pepe&quot;;\r\nvar nombre = localStorage.nombre;\r\ndelete localStorage[&quot;nombre&quot;];\r\n[\/js]\r\n<\/blockquote>\r\n\r\nEl soporte de navegadores es muy amplio:\r\n<pre>\r\n+----------------+--------+-----------------+----+-------+-----------------+\r\n|    Feature     | Chrome | Firefox (Gecko) | IE | Opera | Safari (WebKit) |\r\n+----------------+--------+-----------------+----+-------+-----------------+\r\n| localStorage   |      4 | 3.5             |  8 | 10.50 |               4 |\r\n| sessionStorage |      5 | 2               |  8 | 10.50 |               4 |\r\n+----------------+--------+-----------------+----+-------+-----------------+\r\n<\/pre>\r\nPueden ver mas info <a href=\"http:\/\/caniuse.com\/#feat=namevalue-storage\">ac\u00e1<\/a>\r\n\r\n<strong>Y cu\u00e1nto podemos almacenar?<\/strong>: depende mucho del navegador, pero la cantidad oscila entre 2.5 y 5 Mb (2.5 Mb en la mayor\u00eda de los navegadores, lo cual es bastante ;) )\r\nPueden ver la tabla completa y probar cuanto se banca el navegador en el que est\u00e1n en <a href=\"http:\/\/dev-test.nemikor.com\/web-storage\/support-test\/\">Web Storage Test<\/a>\r\n\r\n<strong>Podemos guardar JSON?<\/strong>, Si, pero yo te recomendaria que sea serializado, (en String) y lo que hagas <strong>antes de enviarlo<\/strong>.\r\nPor que esto?\r\n<ol>\r\n<li>Por los <em>\"fallbacks\/ polyfills\"<\/em>, si queremos agregarle un soporte a cookies por si no tiene disponible el web storage, puede que tengamos problemas si no estamos manejando strings.<\/li>\r\n<li>Lo serializa de todas formas, pero la diferencia es que no es autom\u00e1tico, por lo que podemos tener comportamientos extra\u00f1os:<\/li>\r\n<\/ol>\r\n\r\n[js]\r\n  localStorage.setItem(&quot;locura&quot;, true);\r\n  var locura = localStorage.getItem(&quot;locura&quot;);\r\n  console.log(locura); \/\/ true\r\n  console.log(typeof locura); \/\/ 'string'\r\n[\/js]\r\n\r\nAhora, con JSON?, supongamos que tenemos:\r\n\r\n[js]\r\nvar persona = {\r\n    nombre: &quot;pepe&quot;,\r\n    edad: 20,\r\n    locura: true\r\n};\r\n[\/js]\r\n\r\n<strong>Guardamos directo el JSON al localStorage:<\/strong>\r\n[js title=\"Problem?\"]\r\nlocalStorage.setItem(&quot;persona&quot;, persona);\r\nvar personaGuardada = localStorage.getItem(&quot;persona&quot;);\r\n\r\nconsole.log(typeof persona); \/\/object\r\nconsole.log(typeof personaGuardada); \/\/string\r\n\r\nconsole.log(personaGuardada.locura); \/\/undefined!\r\nvar personaGuardada = JSON.parse(personaGuardada); \/\/Uncaught SyntaxError\r\n[\/js]\r\n\r\n<strong>Como habr\u00eda que hacerlo:<\/strong>\r\n[js highlight=\"1,9\"]\r\nvar personaAGuardar = JSON.stringify(persona);\r\n\r\nlocalStorage.setItem(&quot;persona&quot;, personaAGuardar);\r\nvar personaGuardada = localStorage.getItem(&quot;persona&quot;);\r\n\r\nconsole.log(typeof persona); \/\/object\r\nconsole.log(typeof personaGuardada); \/\/string\r\n\r\nvar personaGuardada = JSON.parse(personaGuardada); \r\nconsole.log(personaGuardada.locura); \/\/true\r\n[\/js]\r\n\r\n<hr\/>\r\n\r\nPor \u00faltimo te dejo un fallback a Cookies, ya que no siempre tenemos soporte para usarlo, est\u00e1 es una implementacion de Mozilla bastante coqueta (no se si funciona en IE 7, por ejemplo), la idea es que en nuestra aplicaci\u00f3n usamos directamente window.localStorage y siempre va a existir, si el browser no lo soporta va a ir a cookies autom\u00e1ticamente.\r\n<strong>Fuente<\/strong>: <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/DOM\/Storage\">MDN - DOM Storage<\/a>\r\n[js]\r\nif (!window.localStorage) {\r\n  Object.defineProperty(window, &quot;localStorage&quot;, new (function () {\r\n    var aKeys = [], oStorage = {};\r\n    Object.defineProperty(oStorage, &quot;getItem&quot;, {\r\n      value: function (sKey) { return sKey ? this[sKey] : null; },\r\n      writable: false,\r\n      configurable: false,\r\n      enumerable: false\r\n    });\r\n    Object.defineProperty(oStorage, &quot;key&quot;, {\r\n      value: function (nKeyId) { return aKeys[nKeyId]; },\r\n      writable: false,\r\n      configurable: false,\r\n      enumerable: false\r\n    });\r\n    Object.defineProperty(oStorage, &quot;setItem&quot;, {\r\n      value: function (sKey, sValue) {\r\n        if(!sKey) { return; }\r\n        document.cookie = escape(sKey) + &quot;=&quot; + escape(sValue) + &quot;; expires=Tue, 19 Jan 2038 03:14:07 GMT; path=\/&quot;;\r\n      },\r\n      writable: false,\r\n      configurable: false,\r\n      enumerable: false\r\n    });\r\n    Object.defineProperty(oStorage, &quot;length&quot;, {\r\n      get: function () { return aKeys.length; },\r\n      configurable: false,\r\n      enumerable: false\r\n    });\r\n    Object.defineProperty(oStorage, &quot;removeItem&quot;, {\r\n      value: function (sKey) {\r\n        if(!sKey) { return; }\r\n        document.cookie = escape(sKey) + &quot;=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=\/&quot;;\r\n      },\r\n      writable: false,\r\n      configurable: false,\r\n      enumerable: false\r\n    });\r\n    this.get = function () {\r\n      var iThisIndx;\r\n      for (var sKey in oStorage) {\r\n        iThisIndx = aKeys.indexOf(sKey);\r\n        if (iThisIndx === -1) { oStorage.setItem(sKey, oStorage[sKey]); }\r\n        else { aKeys.splice(iThisIndx, 1); }\r\n        delete oStorage[sKey];\r\n      }\r\n      for (aKeys; aKeys.length &gt; 0; aKeys.splice(0, 1)) { oStorage.removeItem(aKeys[0]); }\r\n      for (var aCouple, iKey, nIdx = 0, aCouples = document.cookie.split(\/\\s*;\\s*\/); nIdx &lt; aCouples.length; nIdx++) {\r\n        aCouple = aCouples[nIdx].split(\/\\s*=\\s*\/);\r\n        if (aCouple.length &gt; 1) {\r\n          oStorage[iKey = unescape(aCouple[0])] = unescape(aCouple[1]);\r\n          aKeys.push(iKey);\r\n        }\r\n      }\r\n      return oStorage;\r\n    };\r\n    this.configurable = false;\r\n    this.enumerable = true;\r\n  })());\r\n}\r\n[\/js]","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 20 Dec 2012 10:15:50 +0000","created_by":1,"updated_at":"Thu, 20 Dec 2012 10:15:50 +0000","updated_by":1,"published_at":"Thu, 20 Dec 2012 10:15:50 +0000","published_by":1},{"id":3500,"title":"Modificando el contexto: call, apply y bind","slug":"modificando-el-contexto-call-apply-y-bind","markdown":"\nBuenas!, hace muy poquito conoc\u00ed el bind() y me dieron ganas de armar un post mostrando la diferencia entre los 3. Antes de arrancar, te recomiendo que leas el post [Patrones de Invocaci\u00f3n de Funciones](http:\/\/fernetjs.com\/2012\/01\/patrones-de-invocacion-de-funciones-this\/ \"Patrones de Invocaci\u00f3n de Funciones: this\") que habla sobre el bindeo del contexto en el famoso *this*, as\u00ed puedo concentrarme en mostrarte la diferencia entre estos m\u00e9todos. Bueno, ahora que sabes esto del *this* y como se bindea su contexto, algo que es extremadamente \u00fatil a la hora de tener el control sobre las funciones o m\u00e9todos que hacemos y utilizamos. Como viste en el post mas arriba en el caso del *apply* lo que estamos haciendo es meterle un nuevo contexto a una funci\u00f3n, por ejemplo: [js] var obj = { delta: 2, test: function(num1, num2){ return (num1 + num2) * this.delta; } }; var resultado = obj.test(2,2); console.log(resultado); \/\/ (2 + 2) * 2 = 8 [\/js] En este caso, simplemente tenemos un objeto con una propiedad y una funci\u00f3n, al llamarla con 2 n\u00fameros, los sumamos y le aplicamos el delta de su contexto (en el cual est\u00e1 corriendo la funci\u00f3n), que para este caso es el objeto en si mismo. Pero que pasa si ahora queremos cambiarle ese contexto, un nuevo delta, definido por nosotros pero sin modificar el objeto...\n\n### apply()\n\n [js] var cambio = { delta: 5 }; var resultado = obj.test.apply(cambio, [2,2]); console.log(resultado); \/\/ (2 + 2) * 5 = 20 [\/js] Le aplicamos un nuevo contexto en el cual corre la funci\u00f3n, por lo que ahora el *this* de *obj* va a contenter nuestro objeto *cambio*, por ende, el delta valdr\u00e1 5 al ejecutarse. Y que es el array que sigue a la llamada?, esos son los argumentos que recibe la funci\u00f3n: [js] [funcion].apply([contexto], [par\u00e1metros como array]); [\/js] ### call()\n\n Otra forma de llamar a una funci\u00f3n aplicandole un contexto es con *call*, siguiendo con el ejemplo del apply: [js] var cambio = { delta: 5 }; var resultado = obj.test.call(cambio, 2, 2); console.log(resultado); \/\/ (2 + 2) * 5 = 20 [\/js] La \u00fanica diferencia es la forma de pasar los argumentos, ya que en vez de que sea un array, simplemente toma el primero como el contexto y los siguientes son los argumentos en el orden que los esperamos. [js] [funcion].call([contexto], [param1], [param2], [paramN]); [\/js] ### bind()\n\n En este caso hay una vuelta de tuerca mas, que nos puede ser bastante \u00fatil. El *bind()* no llama a la funci\u00f3n con un nuevo contexto, sino que nos devuelve una referencia a la funci\u00f3n con ese nuevo contexto: [js] var cambio = { delta: 5 }; var funcionConCambio = obj.test.bind(cambio); var resultado = functionConCambio(2, 2); console.log(resultado); \/\/ (2 + 2) * 5 = 20 [\/js] Muy loco!, esto aplicado a callbacks puede ser muy interesante. Usas el *self*, *me* o *that*? Supongamos tenemos una llamada ajax y definimos un callback para cuando termina, un ejemplo com\u00fan ser\u00eda: [js] \/\/ m\u00e1s c\u00f3digo donde utilizamos el this var that = this; function callback(datos){ that.magia(datos); } ajax(callback); [\/js] Ahora con bind nos quedar\u00eda asi: [js] function callback(datos){ this.magia(datos); } ajax(callback.bind(this)); [\/js] Mucho m\u00e1s limpio! > Algo a tener en cuenta es que el metodo bind() aparece en el ECMAScript 5ta Edici\u00f3n, por lo que puede que los navegadores ancianitos no lo soporten.\n\n\n","html":"Buenas!, hace muy poquito conoc\u00ed el bind() y me dieron ganas de armar un post mostrando la diferencia entre los 3.\r\n\r\nAntes de arrancar, te recomiendo que leas el post <a href=\"http:\/\/fernetjs.com\/2012\/01\/patrones-de-invocacion-de-funciones-this\/\" title=\"Patrones de Invocaci\u00f3n de Funciones: this\">Patrones de Invocaci\u00f3n de Funciones<\/a> que habla sobre el bindeo del contexto en el famoso <em>this<\/em>, as\u00ed puedo concentrarme en mostrarte la diferencia entre estos m\u00e9todos.\r\n\r\nBueno, ahora que sabes esto del <em>this<\/em> y como se bindea su contexto, algo que es extremadamente \u00fatil a la hora de tener el control sobre las funciones o m\u00e9todos que hacemos y utilizamos.\r\n\r\nComo viste en el post mas arriba en el caso del <em>apply<\/em> lo que estamos haciendo es meterle un nuevo contexto a una funci\u00f3n, por ejemplo:\r\n\r\n[js]\r\nvar obj = {\r\n  delta: 2,\r\n  test: function(num1, num2){\r\n     return (num1 + num2) * this.delta;\r\n  }\r\n};\r\n\r\nvar resultado = obj.test(2,2);\r\nconsole.log(resultado); \/\/ (2 + 2) * 2 = 8\r\n[\/js]\r\n\r\nEn este caso, simplemente tenemos un objeto con una propiedad y una funci\u00f3n, al llamarla con 2 n\u00fameros, los sumamos y le aplicamos el delta de su contexto (en el cual est\u00e1 corriendo la funci\u00f3n), que para este caso es el objeto en si mismo.\r\n\r\nPero que pasa si ahora queremos cambiarle ese contexto, un nuevo delta, definido por nosotros pero sin modificar el objeto...\r\n\r\n<h3>apply()<\/h3>\r\n\r\n[js]\r\nvar cambio = {\r\n  delta: 5\r\n};\r\n\r\nvar resultado = obj.test.apply(cambio, [2,2]);\r\nconsole.log(resultado); \/\/ (2 + 2) * 5 = 20\r\n[\/js]\r\n\r\nLe aplicamos un nuevo contexto en el cual corre la funci\u00f3n, por lo que ahora el <em>this<\/em> de <em>obj<\/em> va a contenter nuestro objeto <em>cambio<\/em>, por ende, el delta valdr\u00e1 5 al ejecutarse.\r\nY que es el array que sigue a la llamada?, esos son los argumentos que recibe la funci\u00f3n:\r\n\r\n[js]\r\n  [funcion].apply([contexto], [par\u00e1metros como array]);\r\n[\/js]\r\n\r\n<h3>call()<\/h3>\r\nOtra forma de llamar a una funci\u00f3n aplicandole un contexto es con <em>call<\/em>, siguiendo con el ejemplo del apply:\r\n\r\n[js]\r\nvar cambio = {\r\n  delta: 5\r\n};\r\n\r\nvar resultado = obj.test.call(cambio, 2, 2);\r\nconsole.log(resultado); \/\/ (2 + 2) * 5 = 20\r\n[\/js]\r\n\r\nLa \u00fanica diferencia es la forma de pasar los argumentos, ya que en vez de que sea un array, simplemente toma el primero como el contexto y los siguientes son los argumentos en el orden que los esperamos.\r\n\r\n[js]\r\n  [funcion].call([contexto], [param1], [param2], [paramN]);\r\n[\/js]\r\n\r\n<h3>bind()<\/h3>\r\nEn este caso hay una vuelta de tuerca mas, que nos puede ser bastante \u00fatil.\r\nEl <em>bind()<\/em> no llama a la funci\u00f3n con un nuevo contexto, sino que nos devuelve una referencia a la funci\u00f3n con ese nuevo contexto:\r\n\r\n[js]\r\nvar cambio = {\r\n  delta: 5\r\n};\r\n\r\nvar funcionConCambio = obj.test.bind(cambio);\r\nvar resultado = functionConCambio(2, 2);\r\nconsole.log(resultado); \/\/ (2 + 2) * 5 = 20\r\n[\/js]\r\n\r\nMuy loco!, esto aplicado a callbacks puede ser muy interesante.\r\nUsas el <em>self<\/em>, <em>me<\/em> o <em>that<\/em>?\r\n\r\nSupongamos tenemos una llamada ajax y definimos un callback para cuando termina, un ejemplo com\u00fan ser\u00eda:\r\n\r\n[js]\r\n\/\/ m\u00e1s c\u00f3digo donde utilizamos el this\r\nvar that = this;\r\nfunction callback(datos){\r\n  that.magia(datos);\r\n}\r\n\r\najax(callback);\r\n[\/js]\r\n\r\nAhora con bind nos quedar\u00eda asi:\r\n\r\n[js]\r\nfunction callback(datos){\r\n  this.magia(datos);\r\n}\r\n\r\najax(callback.bind(this));\r\n[\/js]\r\n\r\nMucho m\u00e1s limpio!\r\n\r\n<blockquote>\r\nAlgo a tener en cuenta es que el metodo bind() aparece en el ECMAScript 5ta Edici\u00f3n, por lo que puede que los navegadores ancianitos no lo soporten.\r\n<\/blockquote>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Fri, 25 Jan 2013 17:36:53 +0000","created_by":1,"updated_at":"Fri, 25 Jan 2013 17:36:53 +0000","updated_by":1,"published_at":"Fri, 25 Jan 2013 17:36:53 +0000","published_by":1},{"id":3518,"title":"Mongoose + Nodejs + Modelos! Parte 2","slug":"temp-slug-87","markdown":"","html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":55,"created_at":"Wed, 13 Feb 2013 01:28:10 +0000","created_by":1,"updated_at":"Wed, 13 Feb 2013 01:28:10 +0000","updated_by":1,"published_at":"","published_by":1},{"id":3516,"title":"Mongoose + Nodejs + Modelos! Parte 1","slug":"mongoose-nodejs-modelos-parte-1","markdown":"\nLa verdad es genial las NoSQL, pero siempre existe el problema. Como se modelar toda la informaci\u00f3n, tanto en NoSQL como en SQL. Como todos buenos arquitectos de la informaci\u00f3n, pero en este caso vamos a utilizar el FarmeWork [MongooseJs](http:\/\/mongoosejs.com \"MongooseJs\") que corre bastante bien en NodeJs. Todo comenz\u00f3 con los `callbacks`, en el `mongodb-native` de NodeJS. La verdad es bastante estresante generar much\u00edsimos `callbacks`, y no se pueden generar relaciones entre una y otra colecci\u00f3n. Ese realmente fue el problema que me enfrente. Y buscando encontr\u00e9 [MongooseJs](http:\/\/mongoosejs.com \"MongooseJs\"), que construye modelos de informaci\u00f3n, para que todo sea mas asequible, y mas f\u00e1cil de encontrar. Vamos a echarle un vistazo! [js] var mongoose = require('mongoose'); var db = mongoose.createConnection( 'mongodb:\/\/localhost:27017\/prueba' ); [\/js] Hasta hora no es nada raro! Solo llamamos el modulo y le construimos una conexi\u00f3n a la base de datos. Ahora bien lo interesante! La construcci\u00f3n de la base de datos [js] var postSchema = mongoose.Schema({ titulo: { type : String, trim : true, index : true }, post : string, slug : string, autor : { type : Schema.Types.ObjectId, ref : 'autores' } }); var userSchema = mongoose.Schema({ name : { type : String, trim : true }, nick : { type : String, trim : true, index : true }, email: { type : String, trim : true }, }); [\/js] Listo! voy a dar un ejemplo de blog! Como vemos, construimos Schema (Esquemas). Estos esquemas, es tan dados en Json (Bastante cercano a MongoDB por que utilizan BSON que es el mismo JSON pero en Binario ). Cada propiedad debe tener una definici\u00f3n, al igual se pueden colocar m\u00faltiples validaciones de esa propiedad. Y todas los valores van a ser validados, si existe alg\u00fan error nos mostrara. Es decir\u00a0a los `titulo` no le puedo poner un `false,` \u00fanicamente un `String`. [js] var Post = db.model('posts', postSchema); var User = db.model('users', userSchema); [\/js] Y en lazaremos con la base de datos. El primer par\u00e1metro es el nombre de la Colecci\u00f3n, y el segundo par\u00e1metro es el esquema. Ya con esto podemos subir informaci\u00f3n a la base de datos. Claro en el momento de subida va hacer validada. [js] var PrimerUsuario = new User({ name : 'Pepito Perez', nick : 'pepito', email: 'pepito@pepito.com' }); PrimerUsuario.save(function(err, doc){ if(err) console.log(err); var PrimerPost = new Post({ titulo: 'Este es mi primer Post!', post : 'Publicando mi primer post!! que felicidad!!', autor : doc._id, }); PrimerPost.slug = slug( PrimerPost.titulo ); PrimerPost.save( function(err, doc){ console.log(err); console.log(doc); }) }); [\/js] Como podemos ver, lo primero que llamamos es a la creaci\u00f3n de un nuevo usuario, le montamos en las propiedades que queremos, al igual que un `prototype`. Y claro esta la funci\u00f3n llamada `save`, que nos va a retornar el Error y el Documento. Generando un nuevo post, hacemos lo mismo es decir le pasamos los par\u00e1metros que queremos. Yo utilizo `Slug` para tener urls familiares, al igual es un `Object`. Y guardamos! Y veremos algo as\u00ed en consola. [js] { _id : 50903550a04313310c000001, titulo : 'Este es mi primer Post!', post : 'Publicando mi primer post!! que felicidad!!', slug : 'este-es-mi-primer-post', autor : 2d2ac97cf59cee65f7a38e596c, } [\/js] Claro yo se que los `id` no son los mismos, que salen en tu consola. Pero seamos un poco desconfiados, vamos a revisar la base de datos! [js] $ mongo mongo> show dbs prueba 0.203125GB test 0.203125GB mongo> use prueba mongo> show collections posts users mongo> db.users.find() { \"_id\" : ObjectId(\"2d2ac97cf59cee65f7a38e596c\"), \"name\" : \"Pepito Perez\", \"nick\" : \"pepito\", \"email\" : \"pepito@pepito.com\" } mongo> db.posts.find() { _id : ObjectId(\"50903550a04313310c000001\"), \"titulo\" : \"Este es mi primer Post!\", \"post\" : \"Publicando mi primer post!! que felicidad!!\", \"slug\" : \"este-es-mi-primer-post\", \"autor\" : ObjectId(\"2d2ac97cf59cee65f7a38e596c\" } [\/js] Genial!! Esta toda la informaci\u00f3n que subimos a la base de datos. Vamos a buscar a nuestro usuario! [js] User.findOne().where('nick', 'pepito').exec(function(err, doc){ console.log(err); console.log(doc); }); [\/js] [js] null { _id : 2d2ac97cf59cee65f7a38e596c, name : \"Pepito Perez\", nick : \"pepito\", email : \"pepito@pepito.com\", } [\/js] Tomamos el modelo, y le mandamos un `findOne`, `find` o `findById`, le podremos pasar [querys de Mongodb](http:\/\/docs.mongodb.org\/manual\/reference\/operators\/ \"Querys de MongoDB\"). Pero todos estos par\u00e1metros en una funci\u00f3n como aqu\u00ed, y nos facilitan el trabajo. Nunca olvidemos hacerle `exec`. Si al igual podemos buscar los `Post`, pero tambi\u00e9n podemos saber de que usuario es! Miremos como se hace [js] Post.find().populate('autor').exec(function(err, doc){ console.log(err); console.log(doc); }); [\/js] Bueno en este caso, buscamos todos los Post. Le montamos la funci\u00f3n `populate`, lo que hace, es buscar seg\u00fan el `id`, en otra colecci\u00f3n y lo anida en la propiedad `autor`. Miremos que nos muestra la consola! [js] null [ { _id : 50903550a04313310c000001, titulo : 'Este es mi primer Post!', post : 'Publicando mi primer post!! que felicidad!!', slug : 'este-es-mi-primer-post', autor : { _id : 2d2ac97cf59cee65f7a38e596c, name : \"Pepito Perez\", nick : \"pepito\", email : \"pepito@pepito.com\", } } ] [\/js] Como nos damos cuenta, es un `Array` o mejor una lista de `Object`, y dentro de cada `Object` existe el `Object` Usuario. As\u00ed se vuelve mucho mas f\u00e1cil tanto la b\u00fasqueda como la subida de informaci\u00f3n. Claro teniendo esto podemos modificar el `nick` de nuestro usuario y con un `.save`, se sube a la base de datos. Bueno esta es la primera parte de esta serie de posts. En el pr\u00f3ximo les mostrare como guardar elementos anidados, hacer querys avanzados y validaciones.\n\n\n","html":"La verdad es genial las NoSQL, pero siempre existe el problema. Como se modelar toda la informaci\u00f3n, tanto en NoSQL como en SQL. Como todos buenos arquitectos de la informaci\u00f3n, pero en este caso vamos a utilizar el FarmeWork <a href=\"http:\/\/mongoosejs.com\" title=\"MongooseJs\">MongooseJs<\/a> que corre bastante bien en NodeJs.\r\n\r\nTodo comenz\u00f3 con los <code>callbacks<\/code>, en el <code>mongodb-native<\/code> de NodeJS. La verdad es bastante estresante generar much\u00edsimos <code>callbacks<\/code>, y no se pueden generar relaciones entre una y otra colecci\u00f3n. Ese realmente fue el problema que me enfrente. Y buscando encontr\u00e9 <a href=\"http:\/\/mongoosejs.com\" title=\"MongooseJs\">MongooseJs<\/a>, que construye modelos de informaci\u00f3n, para que todo sea mas asequible, y mas f\u00e1cil de encontrar. Vamos a echarle un vistazo!\r\n\r\n[js]\r\nvar mongoose = require('mongoose');\r\nvar db = mongoose.createConnection( 'mongodb:\/\/localhost:27017\/prueba' );\r\n[\/js]\r\n\r\nHasta hora no es nada raro! Solo llamamos el modulo y le construimos una conexi\u00f3n a la base de datos. Ahora bien lo interesante! La construcci\u00f3n de la base de datos\r\n\r\n[js]\r\nvar postSchema = mongoose.Schema({\r\n    titulo: { type : String, trim : true, index : true },\r\n    post : string,\r\n    slug : string,\r\n    autor : { type : Schema.Types.ObjectId, ref : 'autores' }  });\r\nvar userSchema = mongoose.Schema({\r\n    name : { type : String, trim : true },\r\n    nick : { type : String, trim : true, index : true },\r\n    email: { type : String, trim : true },\r\n});\r\n[\/js]\r\n\r\nListo! voy a dar un ejemplo de blog! Como vemos, construimos Schema (Esquemas). Estos esquemas, es tan dados en Json (Bastante cercano a MongoDB por que utilizan BSON que es el mismo JSON pero en Binario ). Cada propiedad debe tener una definici\u00f3n, al igual se pueden colocar m\u00faltiples validaciones de esa propiedad. Y todas los valores van a ser validados, si existe alg\u00fan error nos mostrara. Es decir\u00a0a los <code>titulo<\/code> no le puedo poner un <code>false,<\/code> \u00fanicamente un <code>String<\/code>.\r\n\r\n[js]\r\nvar Post = db.model('posts', postSchema);\r\nvar User = db.model('users', userSchema);\r\n[\/js]\r\n\r\nY en lazaremos con la base de datos. El primer par\u00e1metro es el nombre de la Colecci\u00f3n, y el segundo par\u00e1metro es el esquema. Ya con esto podemos subir informaci\u00f3n a la base de datos. Claro en el momento de subida va hacer validada.\r\n\r\n[js]\r\nvar PrimerUsuario =  new User({\r\n    name : 'Pepito Perez',\r\n    nick : 'pepito',\r\n    email: 'pepito@pepito.com'\r\n});\r\nPrimerUsuario.save(function(err, doc){\r\n   if(err)\r\n      console.log(err);\r\n   var PrimerPost = new Post({\r\n       titulo: 'Este es mi primer Post!',\r\n       post  : 'Publicando mi primer post!! que felicidad!!',\r\n       autor : doc._id,\r\n   });\r\n   PrimerPost.slug = slug( PrimerPost.titulo );\r\n   PrimerPost.save( function(err, doc){\r\n     console.log(err);\r\n     console.log(doc);\r\n   })\r\n});\r\n[\/js]\r\n\r\nComo podemos ver, lo primero que llamamos es a la creaci\u00f3n de un nuevo usuario, le montamos en las propiedades que queremos, al igual que un <code>prototype<\/code>. Y claro esta la funci\u00f3n llamada <code>save<\/code>, que nos va a retornar el Error y el Documento. Generando un nuevo post, hacemos lo mismo es decir le pasamos los par\u00e1metros que queremos. Yo utilizo <code>Slug<\/code> para tener urls familiares, al igual es un <code>Object<\/code>. Y guardamos! Y veremos algo as\u00ed en consola.\r\n\r\n[js]\r\n{\r\n    _id : 50903550a04313310c000001,\r\n    titulo : 'Este es mi primer Post!',\r\n    post : 'Publicando mi primer post!! que felicidad!!',\r\n    slug : 'este-es-mi-primer-post',\r\n    autor : 2d2ac97cf59cee65f7a38e596c,\r\n}\r\n[\/js]\r\n\r\nClaro yo se que los <code>id<\/code> no son los mismos, que salen en tu consola. Pero seamos un poco desconfiados, vamos a revisar la base de datos!\r\n\r\n[js]\r\n$ mongo\r\nmongo&gt; show dbs\r\nprueba 0.203125GB\r\ntest 0.203125GB\r\nmongo&gt; use prueba\r\nmongo&gt; show collections\r\nposts\r\nusers\r\nmongo&gt; db.users.find()\r\n{ &quot;_id&quot; : ObjectId(&quot;2d2ac97cf59cee65f7a38e596c&quot;), &quot;name&quot; : &quot;Pepito Perez&quot;, &quot;nick&quot; : &quot;pepito&quot;, &quot;email&quot; : &quot;pepito@pepito.com&quot; }\r\nmongo&gt; db.posts.find()\r\n{ _id : ObjectId(&quot;50903550a04313310c000001&quot;), &quot;titulo&quot; : &quot;Este es mi primer Post!&quot;, &quot;post&quot; : &quot;Publicando mi primer post!! que felicidad!!&quot;, &quot;slug&quot; : &quot;este-es-mi-primer-post&quot;, &quot;autor&quot; : ObjectId(&quot;2d2ac97cf59cee65f7a38e596c&quot; }\r\n[\/js]\r\nGenial!! Esta toda la informaci\u00f3n que subimos a la base de datos. Vamos a buscar a nuestro usuario!\r\n\r\n[js]\r\nUser.findOne().where('nick', 'pepito').exec(function(err, doc){\r\n   console.log(err);\r\n   console.log(doc);\r\n});\r\n[\/js]\r\n\r\n[js]\r\nnull\r\n{\r\n    _id : 2d2ac97cf59cee65f7a38e596c,\r\n    name : &quot;Pepito Perez&quot;,\r\n    nick : &quot;pepito&quot;,\r\n    email : &quot;pepito@pepito.com&quot;,\r\n}\r\n[\/js]\r\nTomamos el modelo, y le mandamos un <code>findOne<\/code>, <code>find<\/code> o <code>findById<\/code>, le podremos pasar <a title=\"Querys de MongoDB\" href=\"http:\/\/docs.mongodb.org\/manual\/reference\/operators\/\">querys de Mongodb<\/a>. Pero todos estos par\u00e1metros en una funci\u00f3n como aqu\u00ed, y nos facilitan el trabajo. Nunca olvidemos hacerle <code>exec<\/code>. Si al igual podemos buscar los <code>Post<\/code>, pero tambi\u00e9n podemos saber de que usuario es! Miremos como se hace\r\n\r\n[js]\r\nPost.find().populate('autor').exec(function(err, doc){\r\n   console.log(err);\r\n   console.log(doc);\r\n});\r\n[\/js]\r\n\r\nBueno en este caso, buscamos todos los Post. Le montamos la funci\u00f3n <code>populate<\/code>, lo que hace, es buscar seg\u00fan el <code>id<\/code>, en otra colecci\u00f3n y lo anida en la propiedad <code>autor<\/code>. Miremos que nos muestra la consola!\r\n[js]\r\nnull\r\n[ {\r\n    _id : 50903550a04313310c000001,\r\n    titulo : 'Este es mi primer Post!',\r\n    post : 'Publicando mi primer post!! que felicidad!!',\r\n    slug : 'este-es-mi-primer-post',\r\n    autor : {\r\n        _id : 2d2ac97cf59cee65f7a38e596c,\r\n        name : &quot;Pepito Perez&quot;,\r\n        nick : &quot;pepito&quot;,\r\n        email : &quot;pepito@pepito.com&quot;,\r\n    }\r\n} ]\r\n[\/js]\r\nComo nos damos cuenta, es un <code>Array<\/code> o mejor una lista de <code>Object<\/code>, y dentro de cada <code>Object<\/code> existe el <code>Object<\/code> Usuario. As\u00ed se vuelve mucho mas f\u00e1cil tanto la b\u00fasqueda como la subida de informaci\u00f3n. Claro teniendo esto podemos modificar el <code>nick<\/code> de nuestro usuario y con un <code>.save<\/code>, se sube a la base de datos.\r\n\r\nBueno esta es la primera parte de esta serie de posts. En el pr\u00f3ximo les mostrare como guardar elementos anidados, hacer querys avanzados y validaciones.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":55,"created_at":"Wed, 13 Feb 2013 10:35:05 +0000","created_by":1,"updated_at":"Wed, 13 Feb 2013 10:35:05 +0000","updated_by":1,"published_at":"Wed, 13 Feb 2013 10:35:05 +0000","published_by":1},{"id":2853,"title":"Perros sueltos en el NPM","slug":"temp-slug-89","markdown":"\nSubimos 2 bibliotecas al NPM para facilitar la inspecci\u00f3n y recolecci\u00f3n de informaci\u00f3n de sitios web.\n\n### Beagle JS\n\n El objetivo de Beagle es obtener la informaci\u00f3n mas relevante de un sitio web, utilizando los meta-tags. Por ejemplo: [bash] npm install beagle [\/bash] [js] var beagle = require('beagle'); beagle.scrape(\"http:\/\/fernetjs.com\", function(err, bone){ if (err) throw new Error(err); \/\/algo explot\u00f3! \/\/ Nos va a retornar un hueso donde vamos a tener toda la info. console.dir(bone); \/\/ Titulo del sitio console.log(bone.title); \/\/ Descripcion del sitio console.log(bone.preview); \/\/ Array con URLs a Imagenes encontradas en el sitio console.log(bone.images); }); [\/js] La idea es que leyendo los Open Graph de facebook, los metadatos, o el DOM devuelva la informaci\u00f3n mas relevante del sitio web. ### Bulldog JS\n\n El objetivo de Bulldog es mandar algunos perros a internet y que nos avisen cuando algo dentro del contenido cambi\u00f3. Por ejemplo: [bash] npm install bulldog [\/bash] [js] var bulldog = require('bulldog'); \/\/Vamos a hacer que nos avise cuando hay un nuevo post, revisando una vez por d\u00eda bulldog.watch('http:\/\/fernetjs.com', (60000 * 60 * 24), function(err, dog){ if (err) throw new Error(err); \/\/algo explot\u00f3 \/\/Nos devuelve un perro, con eventos. console.dir(dog); \/\/Cuando mire el sitio web dispara el evento 'olfatear' o 'mirar' (look) dog.on('sniff', function(data){ console.log('Mir\u00e9 el sitio y el resultado fue:\\n'); console.log(data); }); \/\/Cuando hay un cambio en alg\u00fan lugar del sitio desde la \u00faltima vez que 'olfateo' \/\/dispara el evento 'change' o 'bark' con el estado anterior y el nuevo dog.on('bark', function(res){ console.log('Antes era:\\n'); console.log(res.before); console.log('Ahora es:\\n'); console.log(res.now); }); \/\/Tambi\u00e9n podemos observar cambios en alg\u00fan elemento del sitio \/\/Por ejemplo, el hilo principal de posts de fernetjs dog.on('bark', 'div.primaryContent div.home-post', function(res){ console.log('El primer post era:\\n'); console.log(res.before[0]); console.log('Ahora el primer post es:\\n'); console.log(res.now[0]); }); \/\/Cuando sucede un error, nos podemos suscribir al evento 'poop' o 'error' \/\/Puede que este evento se dispare cuando un selector no se encuentra mas. dog.on('poop', function(err){ console.log('Error!\\n'); console.dir(err); \/\/podemos bajarnos de los eventos dog.off('bark', 'div.primaryContent div.home-post'); }); }); [\/js] La idea es b\u00e1sicamente esa, poder enterarnos de que algo en el contenido de un sitio cambi\u00f3. Les dejo el c\u00f3digo fuente para los que quieran modificar, arreglar bugs o simplemente chusmear - [Bulldog](https:\/\/github.com\/fernetjs\/bulldogjs)\n- [Beagle](https:\/\/github.com\/fernetjs\/beaglejs)\n- [FernetJS en NPM](https:\/\/npmjs.org\/~fernetjs)\n\n\n","html":"Subimos 2 bibliotecas al NPM para facilitar la inspecci\u00f3n y recolecci\u00f3n de informaci\u00f3n de sitios web.\r\n\r\n<h3>Beagle JS<\/h3>\r\nEl objetivo de Beagle es obtener la informaci\u00f3n mas relevante de un sitio web, utilizando los meta-tags. \r\n\r\nPor ejemplo:\r\n[bash]\r\nnpm install beagle\r\n[\/bash]\r\n\r\n[js]\r\nvar beagle = require('beagle');\r\n\r\nbeagle.scrape(&quot;http:\/\/fernetjs.com&quot;, function(err, bone){\r\n  if (err) throw new Error(err); \/\/algo explot\u00f3!\r\n\r\n  \/\/ Nos va a retornar un hueso donde vamos a tener toda la info.\r\n  console.dir(bone);\r\n\r\n  \/\/ Titulo del sitio\r\n  console.log(bone.title);\r\n  \/\/ Descripcion del sitio\r\n  console.log(bone.preview);\r\n  \/\/ Array con URLs a Imagenes encontradas en el sitio\r\n  console.log(bone.images);\r\n});\r\n[\/js]\r\n\r\nLa idea es que leyendo los Open Graph de facebook, los metadatos, o el DOM devuelva la informaci\u00f3n mas relevante del sitio web.\r\n\r\n<h3>Bulldog JS<\/h3>\r\nEl objetivo de Bulldog es mandar algunos perros a internet y que nos avisen cuando algo dentro del contenido cambi\u00f3. \r\n\r\nPor ejemplo:\r\n[bash]\r\nnpm install bulldog\r\n[\/bash]\r\n\r\n[js]\r\nvar bulldog = require('bulldog');\r\n\r\n\/\/Vamos a hacer que nos avise cuando hay un nuevo post, revisando una vez por d\u00eda\r\nbulldog.watch('http:\/\/fernetjs.com', (60000 * 60 * 24), function(err, dog){\r\n  if (err) throw new Error(err); \/\/algo explot\u00f3\r\n\r\n  \/\/Nos devuelve un perro, con eventos.\r\n  console.dir(dog);\r\n\r\n  \/\/Cuando mire el sitio web dispara el evento 'olfatear' o 'mirar' (look)\r\n  dog.on('sniff', function(data){\r\n    console.log('Mir\u00e9 el sitio y el resultado fue:\\n');\r\n    console.log(data);\r\n  });\r\n\r\n  \/\/Cuando hay un cambio en alg\u00fan lugar del sitio desde la \u00faltima vez que 'olfateo'\r\n  \/\/dispara el evento 'change' o 'bark' con el estado anterior y el nuevo\r\n  dog.on('bark', function(res){\r\n    console.log('Antes era:\\n');\r\n    console.log(res.before);\r\n\r\n    console.log('Ahora es:\\n');\r\n    console.log(res.now);\r\n  });\r\n\r\n  \/\/Tambi\u00e9n podemos observar cambios en alg\u00fan elemento del sitio\r\n  \/\/Por ejemplo, el hilo principal de posts de fernetjs\r\n  dog.on('bark', 'div.primaryContent div.home-post', function(res){\r\n    console.log('El primer post era:\\n');\r\n    console.log(res.before[0]);\r\n\r\n    console.log('Ahora el primer post es:\\n');\r\n    console.log(res.now[0]);\r\n  });\r\n\r\n  \/\/Cuando sucede un error, nos podemos suscribir al evento 'poop' o 'error'\r\n  \/\/Puede que este evento se dispare cuando un selector no se encuentra mas.\r\n  dog.on('poop', function(err){\r\n    console.log('Error!\\n');\r\n    console.dir(err);\r\n    \r\n    \/\/podemos bajarnos de los eventos\r\n    dog.off('bark', 'div.primaryContent div.home-post');\r\n  });\r\n});\r\n[\/js]\r\n\r\nLa idea es b\u00e1sicamente esa, poder enterarnos de que algo en el contenido de un sitio cambi\u00f3.\r\n\r\nLes dejo el c\u00f3digo fuente para los que quieran modificar, arreglar bugs o simplemente chusmear\r\n<ul>\r\n<li><a href=\"https:\/\/github.com\/fernetjs\/bulldogjs\">Bulldog<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/fernetjs\/beaglejs\">Beagle<\/a><\/li>\r\n<li><a href=\"https:\/\/npmjs.org\/~fernetjs\">FernetJS en NPM<\/a><\/li>\r\n<\/ul>\r\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Tue, 05 Mar 2013 16:36:24 +0000","created_by":1,"updated_at":"Tue, 05 Mar 2013 16:36:24 +0000","updated_by":1,"published_at":"","published_by":1},{"id":3493,"title":"Curry","slug":"curry","markdown":"\n### Intro\n\n Para contarles que es Curry me voy a basar en el libro \u00a0 \"[JavaScript Patterns - Stoyan Stefanov](http:\/\/www.amazon.es\/JavaScript-Patterns-Stoyan-Stefanov\/dp\/3897215985\/ref=sr_1_2?s=foreign-books&ie=UTF8&qid=1362573485&sr=1-2)\". ( Lo pueden comprar en su librer\u00eda de confianza ;) ) En [este link](http:\/\/en.wikipedia.org\/wiki\/Currying) tienen una def un poco m\u00e1s gen\u00e9rica, desatada del mundo JS. *\"Curry es una t\u00e9cnica de transformaci\u00f3n de funciones que permite obtener a partir de una funci\u00f3n A otra B que es la versi\u00f3n **parcialmente aplicada de A**.\"* Despu\u00e9s de la\u00a0teor\u00eda\u00a0vienen un par de formas de hacerlo con JavaScript. ### Que es una aplicaci\u00f3n y una aplicaci\u00f3n parcial?\n\n Podemos tomar con fines pr\u00e1cticos hablando en un contexto menos matem\u00e1tico y mas JS que una aplicaci\u00f3n es como una llamada a funci\u00f3n y que aplicar parcialmente una funci\u00f3n es llamarla con no todos los argumentos esperados sino con algunos de los primeros. Como de esta forma no podemos obtener el resultado final que obtendr\u00edamos de pasarle todos los par\u00e1metros, lo que se obtiene es una funci\u00f3n que se puede llamar con los par\u00e1metros restantes y devolver el resultado como si hubiese sido llamada con todos los par\u00e1metros. ### Implementaciones\n\n#### Curry manual:\n\n [js] function sumar( x, y ) { if ( typeof y === 'undefined' ) { \/\/detecci\u00f3n de aplicaci\u00f3n parcial return function ( y ) { \/\/la transformaci\u00f3n ( curring ) return x + y; }; } else { return x + y;\/\/aplicaci\u00f3n completa } } var sumaParcial = sumar( 4 );\/\/ Obtener suma parcialmente aplicada, memoriza x var result = sumaParcial( 5 ); \/\/ uso de la versi\u00f3n parcialmente aplicada, el 5 se usa para y que al sumarle la x memorizada ( 4 ) dar\u00e1 como resultado 9. \/\/Tambi\u00e9n lo podemos usar as\u00ed: var result2 = sumar( 4 ) ( 5 ); [\/js] En esta implementaci\u00f3n del curry, la aplicaci\u00f3n parcial est\u00e1 en la misma funci\u00f3n sumar, si vamos a usar mucho esta t\u00e9cnica, se puede hacer una forma m\u00e1s\u00a0vers\u00e1til\u00a0que pueda aplicar curry a cualquier funci\u00f3n que querramos en el libro aparece el ejemplo, la funci\u00f3n schonfinkelize de 7 lineas que le pone curry a lo que se le cruce: #### Curry pro\n\n [js] function schonfinkelize(fn) { var slice = Array.prototype.slice, stored_args = slice.call(arguments, 1); return function () { var new_args = slice.call(arguments), args = stored_args.concat(new_args); return fn.apply(null, args); }; } \/\/Ejemplo de uso: \/\/ Funci\u00f3n a modificar: function echo( x ) { return x; } \/\/ Funci\u00f3n modificada var elephantFunction = schonfinkelize( echo, 'algo para recordar' );\/\/La Transformaci\u00f3n ( curring ) \/\/ Aplicaci\u00f3n, en un objeto mock, o un objeto que necesita tener un m\u00e9todo que devuelva siempre el mismo valor con fines de polimorfimo var mock = { getMessage: elephantFunction } [\/js] > Mas info sobre apply en [Patrones de Invocaci\u00f3n de Funciones: this](http:\/\/fernetjs.com\/2012\/01\/patrones-de-invocacion-de-funciones-this\/ \"Patrones de Invocaci\u00f3n de Funciones: this\") y en [Modificando el contexto: call, apply y bind](http:\/\/fernetjs.com\/2013\/01\/modificando-el-contexto-call-apply-y-bind\/ \"Modificando el contexto: call, apply y bind\")\n\n#### Implementaci\u00f3n de Underscore.js\n\n[Underscore](http:\/\/underscorejs.org) viene con** la funci\u00f3n partial** que permite hacer las partial applications, el ejemplo anterior, hecho con esta funcionalidad de underscore ser\u00eda : [js] var mock = { getMessage: _.partial( echo, 'algo para recordar' ) \/\/La transformaci\u00f3n ( curring ) } [\/js] ### Ejemplos de Uso:\n\n Imag\u00ednense que tenemos una funci\u00f3n densidad de tres variables de entrada ( x, y , z ) que nos devuelve la concentraci\u00f3n de algo ( un compuesto por ejemplo ) en un cuerpo dado. Densidad podr\u00eda tener informaci\u00f3n de una tomograf\u00eda computada o de un examen de resonancia magn\u00e9tica nuclear, x podr\u00eda representar la dimensi\u00f3n longitudinal de pies a cabeza, y con _.partial( densidad, 3 ), podr\u00edamos obtener un corte ( una\u00a0imagen\u00a0) de esa informaci\u00f3n a 3\u00a0cent\u00edmetros\u00a0de la planta de los pies. Ok, que pasa si se nos fu\u00e9 la mano con el fernet y queremos cortes que no sean perpendiculares a ninguno de los ejes xyz? Rta, tendr\u00edamos que aplicar un poco (bastante) de matem\u00e1tica, como para obtener una funci\u00f3n similar partial, pero que se llame por ejemplo slice que reciba como entrada un vector con un punto por donde debe pasar el corte y otro perpendicular al plano de corte, ejemplo: \u00a0corte = _.slice( [3, 0, 0], [0, 0, 1], densidad ) \/\/ el corte pasa por x = 3 y el vector normal es el que tiene solo componente z. \u00a0 La funci\u00f3n devuelta tendr\u00eda dos variables de entrada, que ser\u00edan coordenadas x y y en el plano de corte ( que no necesariamente son las mismas que las originales). Bueno, espero que les haya gustado.\n","html":"<h3>Intro<\/h3>\r\nPara contarles que es Curry me voy a basar en el libro \u00a0 \"<a href=\"http:\/\/www.amazon.es\/JavaScript-Patterns-Stoyan-Stefanov\/dp\/3897215985\/ref=sr_1_2?s=foreign-books&ie=UTF8&qid=1362573485&sr=1-2\">JavaScript Patterns - Stoyan Stefanov<\/a>\". ( Lo pueden comprar en su librer\u00eda de confianza ;) )\r\n\r\nEn <a href=\"http:\/\/en.wikipedia.org\/wiki\/Currying\">este link<\/a> tienen una def un poco m\u00e1s gen\u00e9rica, desatada del mundo JS.\r\n\r\n<em>\"Curry es una t\u00e9cnica de transformaci\u00f3n de funciones que permite obtener a partir de una funci\u00f3n A otra B que es la versi\u00f3n <strong>parcialmente aplicada de A<\/strong>.\"<\/em> Despu\u00e9s de la\u00a0teor\u00eda\u00a0vienen un par de formas de hacerlo con JavaScript.\r\n\r\n<h3>Que es una aplicaci\u00f3n y una aplicaci\u00f3n parcial?<\/h3>\r\nPodemos tomar con fines pr\u00e1cticos hablando en un contexto menos matem\u00e1tico y mas JS que una aplicaci\u00f3n es como una llamada a funci\u00f3n y que aplicar parcialmente una funci\u00f3n es llamarla con no todos los argumentos esperados sino con algunos de los primeros. Como de esta forma no podemos obtener el resultado final que obtendr\u00edamos de pasarle todos los par\u00e1metros, lo que se obtiene es una funci\u00f3n que se puede llamar con los par\u00e1metros restantes y devolver el resultado como si hubiese sido llamada con todos los par\u00e1metros.\r\n<h3>Implementaciones<\/h3>\r\n<h4>Curry manual:<\/h4>\r\n[js]\r\nfunction sumar( x, y ) {\r\n    if ( typeof y === 'undefined' ) { \/\/detecci\u00f3n de aplicaci\u00f3n parcial\r\n        return function ( y ) { \/\/la transformaci\u00f3n ( curring )\r\n            return x + y;\r\n        };\r\n    } else {\r\n        return x + y;\/\/aplicaci\u00f3n completa\r\n    }\r\n}\r\n\r\nvar sumaParcial = sumar( 4 );\/\/ Obtener suma parcialmente aplicada, memoriza x\r\n\r\nvar result = sumaParcial( 5 ); \/\/ uso de la versi\u00f3n parcialmente aplicada, el 5 se usa para y que al sumarle la x memorizada ( 4 ) dar\u00e1 como resultado 9. \r\n\r\n\/\/Tambi\u00e9n lo podemos usar as\u00ed:\r\nvar result2 = sumar( 4 ) ( 5 );\r\n[\/js]\r\n\r\nEn esta implementaci\u00f3n del curry, la aplicaci\u00f3n parcial est\u00e1 en la misma funci\u00f3n sumar, si vamos a usar mucho esta t\u00e9cnica, se puede hacer una forma m\u00e1s\u00a0vers\u00e1til\u00a0que pueda aplicar curry a cualquier funci\u00f3n que querramos en el libro aparece el ejemplo, la funci\u00f3n schonfinkelize de 7 lineas que le pone curry a lo que se le cruce:\r\n\r\n<h4>Curry pro<\/h4>\r\n[js]\r\nfunction schonfinkelize(fn) {\r\n   var slice = Array.prototype.slice,\r\n     stored_args = slice.call(arguments, 1);\r\n   return function () {\r\n      var new_args = slice.call(arguments),\r\n         args = stored_args.concat(new_args);\r\n      return fn.apply(null, args);\r\n   };\r\n}\r\n\r\n\/\/Ejemplo de uso:\r\n\/\/ Funci\u00f3n a modificar:\r\nfunction echo( x ) {\r\n  return x;\r\n}\r\n\r\n\/\/ Funci\u00f3n modificada\r\nvar elephantFunction = schonfinkelize( echo, 'algo para recordar' );\/\/La Transformaci\u00f3n ( curring )\r\n\r\n\/\/ Aplicaci\u00f3n, en un objeto mock, o un objeto que necesita tener un m\u00e9todo que devuelva siempre el mismo valor con fines de polimorfimo\r\nvar mock = {\r\n   getMessage: elephantFunction\r\n}\r\n[\/js]\r\n\r\n<blockquote>\r\nMas info sobre apply en <a href=\"http:\/\/fernetjs.com\/2012\/01\/patrones-de-invocacion-de-funciones-this\/\" title=\"Patrones de Invocaci\u00f3n de Funciones: this\">Patrones de Invocaci\u00f3n de Funciones: this<\/a> y en <a href=\"http:\/\/fernetjs.com\/2013\/01\/modificando-el-contexto-call-apply-y-bind\/\" title=\"Modificando el contexto: call, apply y bind\">Modificando el contexto: call, apply y bind<\/a>\r\n<\/blockquote>\r\n\r\n<h4>Implementaci\u00f3n de Underscore.js<\/h4>\r\n<a href=\"http:\/\/underscorejs.org\" target=\"_blank\">Underscore<\/a> viene con<strong> la funci\u00f3n partial<\/strong> que permite hacer las partial applications, el ejemplo anterior, hecho con esta funcionalidad de underscore ser\u00eda :\r\n[js]\r\nvar mock = {\r\n   getMessage: _.partial( echo, 'algo para recordar' ) \/\/La transformaci\u00f3n ( curring )\r\n}\r\n[\/js]\r\n<h3>Ejemplos de Uso:<\/h3>\r\nImag\u00ednense que tenemos una funci\u00f3n densidad de tres variables de entrada ( x, y , z ) que nos devuelve la concentraci\u00f3n de algo ( un compuesto por ejemplo ) en un cuerpo dado. Densidad podr\u00eda tener informaci\u00f3n de una tomograf\u00eda computada o de un examen de resonancia magn\u00e9tica nuclear, x podr\u00eda representar la dimensi\u00f3n longitudinal de pies a cabeza, y con _.partial( densidad, 3 ), podr\u00edamos obtener un corte ( una\u00a0imagen\u00a0) de esa informaci\u00f3n a 3\u00a0cent\u00edmetros\u00a0de la planta de los pies.\r\n\r\nOk, que pasa si se nos fu\u00e9 la mano con el fernet y queremos cortes que no sean perpendiculares a ninguno de los ejes xyz? Rta, tendr\u00edamos que aplicar un poco (bastante) de matem\u00e1tica, como para obtener una funci\u00f3n similar partial, pero que se llame por ejemplo slice que reciba como entrada un vector con un punto por donde debe pasar el corte y otro perpendicular al plano de corte, ejemplo: \u00a0corte = _.slice( [3, 0, 0], [0, 0, 1], densidad ) \/\/ el corte pasa por x = 3 y el vector normal es el que tiene solo componente z. \u00a0 La funci\u00f3n devuelta tendr\u00eda dos variables de entrada, que ser\u00edan coordenadas x y y en el plano de corte ( que no necesariamente son las mismas que las originales).\r\n\r\nBueno, espero que les haya gustado.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":41,"created_at":"Wed, 06 Mar 2013 09:49:06 +0000","created_by":1,"updated_at":"Wed, 06 Mar 2013 09:49:06 +0000","updated_by":1,"published_at":"Wed, 06 Mar 2013 09:49:06 +0000","published_by":1},{"id":3578,"title":"Detr\u00e1s de escena: wrapper objects","slug":"detras-de-escena-wrapper-objects","markdown":"\nMuchas cosas de las que voy a compartir ahora, las aprend\u00ed hace relativamente poco y me permitieron entender algunos de los WTF que se ven en javascript. Creo que el t\u00edpico `'string' vs. new String('string')` es uno de los conceptos que uno d\u00e1 por sentado y nunca se cuestiona lo suficiente. Cuando le\u00ed [este art\u00edculo](https:\/\/hacks.mozilla.org\/2012\/12\/performance-with-javascript-string-objects\/ \"Performance with javascript strings (ingl\u00e9s)\") que habla sobre la performance en objectos String, aparte de pensar \"que bueno debe ser tener tiempo para hacer experimentos como esos\", me top\u00e9 con la teor\u00eda detr\u00e1s de los 'wrapper objects'. De ah\u00ed, llegu\u00e9 a [este link](http:\/\/kiro.me\/blog\/wrapper_objects.html \"wrapper objects en kiro.me (ingl\u00e9s)\") que me parece absolutamente recomendable (al igual que el resto del blog). Casi todo lo que escriba de ac\u00e1 en adelante, tal vez sea parafrasear o hablar un poco m\u00e1s de lo mismo que en esos enlaces.\n\n> En JavaScript, los strings, los numeros, los booleanos, no son objetos; son tipos primitivos. Por consiguiente, no tienen propiedades. Es decir, 'un string' no tiene ni indexOf, toUpperCase, ni length... Nada.\n\n### \u00bfEntonces?\n\n Despu\u00e9s de leer eso, vale la pena abrir la consola de javascript, \u00bf Por qu\u00e9 puedo hacer `'fernet'.concat('js')` ??? La respuesta es sencilla: por detr\u00e1s, lo que ocurre es que el string 'fernet' es autom\u00e1ticamente convertido a un objeto String, es decir a `new String('fernet')`, y ese objeto es el que tiene todas las propiedades y m\u00e9todos que conocemos; por eso es posible aplicarle el `concat`. El m\u00e9todo concat devuelve un string primitivo, aunque la misma conversi\u00f3n autom\u00e1tica ocurrir\u00eda si quisieramos utilizar alguna de sus propiedades. [js] typeof 'fernet' \/\/ \"string\" typeof 'fernet'.concat('js') \/\/ \"string\" 'fernet'.concat('js').toUpperCase() \/\/ \"FERNETJS\" [\/js] Vuelvo a insistir con lo mismo para aquellos que no acostumbren a hacerlo: experimentar con la consola js de las herramientas de desarrollo de su navegador favorito es una de las mejores maneras de aprender, descubrir nuevos conceptos, y reconfirmar las cosas que ya sabemos. [js] var a = 'ejemplo', b = new String('ejemplo'); typeof a \/\/\"string\" typeof b \/\/\"object\" a == b \/\/true a === b \/\/false a + b \/\/\"ejemploejemplo\" \/\/ puedo consultar propiedades para ambos a.length \/\/7 (gracias a la conversi\u00f3n impl\u00edcita a su wrapper obj) b.length \/\/7 [\/js] Por si sigue sonando extra\u00f1o, esto ser\u00eda lo que hace el int\u00e9rprete de javascript \"detr\u00e1s de escena\" cuando hacemos 'FERNETJS'.toLowerCase(): [js] var stringOriginal = 'FERNETJS'; var str = new String(stringOriginal); \/\/str ser\u00eda el wrapper object str.toLowerCase(); \/\/ 'fernetjs' [\/js] El int\u00e9rprete no s\u00f3lo usa este \"wrapper object\" detr\u00e1s de escena cuando queremos obtener una propiedad, sino que tambi\u00e9n cuando la queremos setear; pero esto puede ser contraproducente: [js] var str = 'mmm'; str.unaPropiedadInventada = 100; str.unaPropiedadInventada \/\/ undefined var str2 = new String('jeje'); str2.unaPropiedadInventada = 100; str2.unaPropiedadInventada \/\/100 [\/js] ### Sobre la conversi\u00f3n [tipos primitivos][wrappers]\n\n Nosotros podemos trabajar con tipos primitivos o con objetos, y podemos expl\u00edcitamente hacer conversiones en ambas direcciones. [js] \/\/ con new Number envolvemos al primitivo 1 en un objeto number var n = new Number(1); typeof n \/\/\"object\" \/\/ llamando a Number (sin new) convierte el obj a su primitivo typeof Number(n) \/\/\"number\" [\/js] De todas maneras, no es recomendable y rara vez o nunca, vamos a escribir en nuestro c\u00f3digo `var x = new Number(17)`. La principal raz\u00f3n, es que no nos va a ser de gran utilidad, ya que sea cual sea el valor del objeto, siempre va a ser \"verdadero\" en el resultado de una evaluaci\u00f3n: [js] var tengoPlata = new Boolean(false); if (tengoPlata) console.log('comprar unos fernecitos'); else console.log('esperar'); [\/js] En el caso anterior, por ejemplo, quer\u00eda decir que no ten\u00eda plata. De todas maneras, se ejecuta \"comprar unos fernecitos\", dej\u00e1ndome en bancarrota. Esto ocurre porque tengoPlata es un objeto, en contraste con el `false` que hubiera sido m\u00e1s natural usar. Por otra parte, desde objeto hacia tipo primitivo muchas veces se hacen conversiones autom\u00e1ticas, (del mismo modo que 1 podr\u00eda ser convertido a '1'), m\u00e1s que nada a la hora de operar. Por ejemplo: [js] var x = new Number(199), y = 1; x + y \/\/ 200 [\/js] Estas conversiones se basan en lo que devuelve el valueOf() del objeto. Es decir, siempre que se trate de convertir un objeto a un primitivo, el resultado de la conversi\u00f3n va a ser lo que devuelve el valueOf. Este m\u00e9todo est\u00e1 en todos los objetos, y si no es sobreescrito, va a devolver el mismo objeto ([docs de valueOf](https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Reference\/Global_Objects\/Object\/valueOf \"valueOf en MDN\")). Lo m\u00e1s loco de este art\u00edculo es lo que sigue. Sabiendo esto, uno podr\u00eda emular un objeto, que al momento de operar ser\u00eda convertido a su correspondiente valor primitivo. [js] var a = { valueOf: function(){ return 199; } }; console.log(a + 1); \/\/200 var b = { valueOf: function(){ return navigator.plugins.length; } }; console.log(b - 1); \/\/???? jeje [\/js] ### \u00bfDe qu\u00e9 me sirve saber esto?\u00bfYa puedo hacer juegos multiplayer en 4-D con js?\n\n La verdad que al fin y al cabo todo esto no tiene mucho sentido pr\u00e1ctico, uno podr\u00eda vivir sin saberlo, pero ayuda a conocer un poco m\u00e1s el lenguaje y entender por qu\u00e9 las cosas funcionan de la manera que lo hacen. S\u00ed es importante tener presente los problemas que puede traer manualmente instanciar estos objetos String, Number, etc.. NOTAS: * A lo largo de todo el art\u00edculo se utiliz\u00f3 el termino 'wrapper object'. Esto se debe a que no encontr\u00e9 una traducci\u00f3n acorde, 'objeto envolvedor', 'objeto envoltorio' simplemente no sonaban correctos. Sugerencias? * Cuando se habla de String, Number, Boolean en los ejemplos, la mayor\u00eda de las veces se podr\u00edan haber aplicado indistintamente. \n","html":"Muchas cosas de las que voy a compartir ahora, las aprend\u00ed hace relativamente poco y me permitieron entender algunos de los WTF que se ven en javascript. Creo que el t\u00edpico <code>'string' vs. new String('string')<\/code> es uno de los conceptos que uno d\u00e1 por sentado y nunca se cuestiona lo suficiente.\r\n \r\nCuando le\u00ed <a href=\"https:\/\/hacks.mozilla.org\/2012\/12\/performance-with-javascript-string-objects\/\" title=\"Performance with javascript strings (ingl\u00e9s)\" target=\"_blank\">este art\u00edculo<\/a> que habla sobre la performance en objectos String, aparte de pensar \"que bueno debe ser tener tiempo para hacer experimentos como esos\", me top\u00e9 con la teor\u00eda detr\u00e1s de los 'wrapper objects'. De ah\u00ed, llegu\u00e9 a <a href=\"http:\/\/kiro.me\/blog\/wrapper_objects.html\" title=\"wrapper objects en kiro.me (ingl\u00e9s)\" target=\"_blank\">este link<\/a> que me parece absolutamente recomendable (al igual que el resto del blog). Casi todo lo que escriba de ac\u00e1 en adelante, tal vez sea parafrasear o hablar un poco m\u00e1s de lo mismo que en esos enlaces.\r\n\r\n<blockquote>En JavaScript, los strings, los numeros, los booleanos, no son objetos; son tipos primitivos. Por consiguiente, no tienen propiedades. Es decir, 'un string' no tiene ni indexOf, toUpperCase, ni length... Nada.\r\n<\/blockquote>\r\n\r\n<h3>\u00bfEntonces?<\/h3>\r\n\r\nDespu\u00e9s de leer eso, vale la pena abrir la consola de javascript, \u00bf Por qu\u00e9 puedo hacer <code>'fernet'.concat('js')<\/code> ???\r\n\r\nLa respuesta es sencilla: por detr\u00e1s, lo que ocurre es que el string 'fernet' es autom\u00e1ticamente convertido a un objeto String, es decir a <code>new String('fernet')<\/code>, y ese objeto es el que tiene todas las propiedades y m\u00e9todos que conocemos; por eso es posible aplicarle el <code>concat<\/code>. \r\nEl m\u00e9todo concat devuelve un string primitivo, aunque la misma conversi\u00f3n autom\u00e1tica ocurrir\u00eda si quisieramos utilizar alguna de sus propiedades.\r\n\r\n[js]\r\ntypeof 'fernet' \/\/ &quot;string&quot;\r\ntypeof 'fernet'.concat('js') \/\/ &quot;string&quot;\r\n'fernet'.concat('js').toUpperCase() \/\/ &quot;FERNETJS&quot;\r\n[\/js]\r\n\r\nVuelvo a insistir con lo mismo para aquellos que no acostumbren a hacerlo: experimentar con la consola js de las herramientas de desarrollo de su navegador favorito es una de las mejores maneras de aprender, descubrir nuevos conceptos, y reconfirmar las cosas que ya sabemos. \r\n\r\n[js]\r\nvar a = 'ejemplo',\r\n    b = new String('ejemplo');\r\n\r\ntypeof a \/\/&quot;string&quot;\r\ntypeof b \/\/&quot;object&quot;\r\na == b \/\/true\r\na === b \/\/false\r\na + b \/\/&quot;ejemploejemplo&quot;\r\n\r\n\/\/ puedo consultar propiedades para ambos\r\na.length \/\/7 (gracias a la conversi\u00f3n impl\u00edcita a su wrapper obj) \r\nb.length \/\/7\r\n[\/js]\r\n\r\nPor si sigue sonando extra\u00f1o, esto ser\u00eda lo que hace el int\u00e9rprete de javascript \"detr\u00e1s de escena\" cuando hacemos 'FERNETJS'.toLowerCase():\r\n[js]\r\nvar stringOriginal = 'FERNETJS';\r\nvar str = new String(stringOriginal); \/\/str ser\u00eda el wrapper object \r\nstr.toLowerCase(); \/\/ 'fernetjs'\r\n[\/js]\r\n\r\nEl int\u00e9rprete no s\u00f3lo usa este \"wrapper object\" detr\u00e1s de escena cuando queremos obtener una propiedad, sino que tambi\u00e9n cuando la queremos setear; pero esto puede ser contraproducente:\r\n\r\n[js]\r\nvar str = 'mmm';\r\nstr.unaPropiedadInventada = 100;\r\nstr.unaPropiedadInventada \/\/ undefined\r\nvar str2 = new String('jeje');\r\nstr2.unaPropiedadInventada = 100;\r\nstr2.unaPropiedadInventada \/\/100\r\n[\/js]\r\n\r\n<h3>Sobre la conversi\u00f3n [tipos primitivos]<->[wrappers]<\/code><\/h3>\r\n\r\nNosotros podemos trabajar con tipos primitivos o con objetos, y podemos expl\u00edcitamente hacer conversiones en ambas direcciones.\r\n\r\n[js]\r\n\/\/ con new Number envolvemos al primitivo 1 en un objeto number\r\nvar n = new Number(1);\r\ntypeof n \/\/&quot;object&quot;\r\n\/\/ llamando a Number (sin new) convierte el obj a su primitivo\r\ntypeof Number(n) \/\/&quot;number&quot;\r\n[\/js]\r\n\r\nDe todas maneras, no es recomendable y rara vez o nunca, vamos a escribir en nuestro c\u00f3digo <code>var x = new Number(17)<\/code>. La principal raz\u00f3n, es que no nos va a ser de gran utilidad, ya que sea cual sea el valor del objeto, siempre va a ser \"verdadero\" en el resultado de una evaluaci\u00f3n:\r\n\r\n[js]\r\nvar tengoPlata = new Boolean(false);\r\nif (tengoPlata)\r\n    console.log('comprar unos fernecitos');\r\nelse \r\n    console.log('esperar');\r\n[\/js]\r\n\r\nEn el caso anterior, por ejemplo, quer\u00eda decir que no ten\u00eda plata. De todas maneras, se ejecuta \"comprar unos fernecitos\", dej\u00e1ndome en bancarrota. Esto ocurre porque tengoPlata es un objeto, en contraste con el <code>false<\/code> que hubiera sido m\u00e1s natural usar.\r\n\r\nPor otra parte, desde objeto hacia tipo primitivo muchas veces se hacen conversiones autom\u00e1ticas, (del mismo modo que 1 podr\u00eda ser convertido a '1'), m\u00e1s que nada a la hora de operar. \r\nPor ejemplo:\r\n[js]\r\nvar x = new Number(199),\r\n    y = 1;\r\nx + y \/\/ 200\r\n[\/js]\r\n\r\nEstas conversiones se basan en lo que devuelve el valueOf() del objeto. Es decir, siempre que se trate de convertir un objeto a un primitivo, el resultado de la conversi\u00f3n va a ser lo que devuelve el valueOf. Este m\u00e9todo est\u00e1 en todos los objetos, y si no es sobreescrito, va a devolver el mismo objeto (<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Reference\/Global_Objects\/Object\/valueOf\" title=\"valueOf en MDN\" target=\"_blank\">docs de valueOf<\/a>). \r\nLo m\u00e1s loco de este art\u00edculo es lo que sigue. Sabiendo esto, uno podr\u00eda emular un objeto, que al momento de operar ser\u00eda convertido a su correspondiente valor primitivo.\r\n[js]\r\nvar a = {\r\n  valueOf: function(){ return 199; }\r\n};\r\nconsole.log(a + 1); \/\/200\r\n\r\nvar b = { \r\n    valueOf: function(){ return navigator.plugins.length; } \r\n};\r\nconsole.log(b - 1); \/\/???? jeje\r\n[\/js]\r\n\r\n<h3>\u00bfDe qu\u00e9 me sirve saber esto?\u00bfYa puedo hacer juegos multiplayer en 4-D con js?<\/h3>\r\nLa verdad que al fin y al cabo todo esto no tiene mucho sentido pr\u00e1ctico, uno podr\u00eda vivir sin saberlo, pero ayuda a conocer un poco m\u00e1s el lenguaje y entender por qu\u00e9 las cosas funcionan de la manera que lo hacen. \r\nS\u00ed es importante tener presente los problemas que puede traer manualmente instanciar estos objetos String, Number, etc.. \r\n\r\nNOTAS: * A lo largo de todo el art\u00edculo se utiliz\u00f3 el termino 'wrapper object'. Esto se debe a que no encontr\u00e9 una traducci\u00f3n acorde, 'objeto envolvedor', 'objeto envoltorio' simplemente no sonaban correctos. Sugerencias?\r\n* Cuando se habla de String, Number, Boolean en los ejemplos, la mayor\u00eda de las veces se podr\u00edan haber aplicado indistintamente. ","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Fri, 08 Mar 2013 11:02:58 +0000","created_by":1,"updated_at":"Fri, 08 Mar 2013 11:02:58 +0000","updated_by":1,"published_at":"Fri, 08 Mar 2013 11:02:58 +0000","published_by":1},{"id":3531,"title":"AMD vs CJS","slug":"amd-vs-cjs","markdown":"\nUff, bueno, este tema da para debatir un largo rato, pero mi intento es mostrar mi investigaci\u00f3n y una opci\u00f3n que adopt\u00e9 para mis proyectos hoy por hoy. Se acuerdan cuando hablaba de organizar el c\u00f3digo de JS, que ya no es scripting y creaci\u00f3n de funciones colgadas por todos lados, que a medida que la web crece y hacemos aplicaciones, en vez de una paginita web con botones ya creamos aplicaciones web. Un inicio por el camino correcto al orden es desacoplar creando m\u00f3dulos y hablaba de como hacerlo en el post [Patrones: Module y Namespace](http:\/\/fernetjs.com\/2012\/05\/patrones-module-y-namespace\/ \"Patrones: Module y Namespace\"). Bueno, avanzando sobre ese tema, existen definiciones y estandares para crear y utilizar m\u00f3dulos, de eso se trata este post. Vamos a ver de que se trata cada uno de estos *enfoques* para solucionar el problema.\n\n### AMD: Asynchronous Module Definition\n\n La *Definici\u00f3n As\u00edncrona de M\u00f3dulos* fue creada para definir m\u00f3dulos donde este mismo y sus dependencias puedan ser cargadas asincr\u00f3nicamente. Un ejemplo de esto es el conocido RequireJS (en este post muestro una intro: [RequireJS: M\u00f3dulos y Dependencias](http:\/\/fernetjs.com\/2012\/02\/requirejs-modulos-y-dependencias\/ \"RequireJS: M\u00f3dulos y Dependencias\")). Se puede decir que fue pensado especialmente para el Navegador donde es importante tener este tipo de asincronismo. Tambi\u00e9n existen herramientas de optimizaci\u00f3n para el navegador donde es importante cargar lo necesario e indispensable mejorando la experiencia con nuestro sitio. Demasiado texto, tiremos un poco de c\u00f3digo para no dormirnos. :) [js] \/\/ define( [nombre] , [dependencias] , [definici\u00f3n]); define('miModulo', ['otroModulo'], function(otroModulo){ \/\/ listo, ac\u00e1 defino el m\u00f3dulo \"miModulo\", \/\/ porque la dependencia a otroModulo ya fue cargada y la tengo disponible. return { acceso: function(){ } }; }); [\/js] De esta manera puedo definir cada m\u00f3dulo de mi aplicaci\u00f3n con sus dependencias a otros m\u00f3dulos y me aseguro que todo existe antes de utilizarlos. ### CJS: Common JS\n\n Ahora cambia un poco la idea, en CJS no tenemos \"definici\u00f3n de m\u00f3dulos\", es decir, no escribimos un \"define\", sino que se asume que sus dependencias ya est\u00e1n cargadas al momento de requerirlas. Para este caso podemos decir que fue pensado para el Server (por ej. NodeJS), donde realizamos un *require([m\u00f3dulo])* y lo tenemos, sin asincronismo: [js] \/\/no hay ning\u00fan define() var otroModulo = require('.\/otroModulo'); \/\/ ac\u00e1 va el c\u00f3digo de nuestro m\u00f3dulo module.exports.acceso = function() {}; [\/js] Si bien, estamos de alguna manera definiendo sus dependencias con require(), la diferencia principal es que no lo hacemos antes de ejecutarse, es decir, podemos tener funciones y realizar esos require() desde cualquier parte del m\u00f3dulo, pero eso si, siempre se asume que ya est\u00e1 cargado. ### AMD + CJS\n\n Pero que pasa si intentamos utilizar el ejemplo anterior de CommonJS en el navegador?, definitivamente no va a funcionar. As\u00ed como tampoco utilzar un *define* en NodeJS. Entonces cual es mejor?, cuando?, donde?. Bueno, a mi parecer no hay uno mejor que el otro, ya explique para que fueron creados, ambos tienen sus pros y contras. Mi problema, personal, es que me gusta AMD por su asincronismo, pero tambi\u00e9n me gusta CJS por el hecho de no definir dependencias y de poder utilizar mis m\u00f3dulos en NodeJS tambi\u00e9n (mientras no utilice DOM jeje), as\u00ed que opt\u00e9 por utilizar ambos para el navegador. Como?, bueno ah\u00ed esta lo divertido, simplemente envolviendo cada m\u00f3dulo CJS en uno de AMD, pero en tiempo de \"compilaci\u00f3n\" (*) (sino ser\u00eda medio extra\u00f1o), es decir, usando [GruntJS](http:\/\/gruntjs.com\/) con la ayuda de [WebMake](https:\/\/github.com\/medikoo\/modules-webmake). > (*) con \"compilaci\u00f3n\" me refiero a la tarea en GruntJS, realmente no se esta \"compilando\" el javascript jaja.\n\n En un futuro post voy a mostrar un poco mas de GruntJS, pero por el momento les dejo un proyecto base en Github sobre esto de AMD + CJS + GruntJS + WebMake (tambi\u00e9n tiene un poco de Backbone y Backbone Marionette :) ) [https:\/\/github.com\/pjnovas\/base-client-project](https:\/\/github.com\/pjnovas\/base-client-project) (les debo el Readme en Espa\u00f1ol) - - - - - -\n\n#### Cu\u00e1l te gustas m\u00e1s? AMD o CJS?\n\n- - - - - -\n\n\n","html":"Uff, bueno, este tema da para debatir un largo rato, pero mi intento es mostrar mi investigaci\u00f3n y una opci\u00f3n que adopt\u00e9 para mis proyectos hoy por hoy.\r\n\r\nSe acuerdan cuando hablaba de organizar el c\u00f3digo de JS, que ya no es scripting y creaci\u00f3n de funciones colgadas por todos lados, que a medida que la web crece y hacemos aplicaciones, en vez de una paginita web con botones ya creamos aplicaciones web. Un inicio por el camino correcto al orden es desacoplar creando m\u00f3dulos y hablaba de como hacerlo en el post <a href=\"http:\/\/fernetjs.com\/2012\/05\/patrones-module-y-namespace\/\" title=\"Patrones: Module y Namespace\">Patrones: Module y Namespace<\/a>.\r\n\r\nBueno, avanzando sobre ese tema, existen definiciones y estandares para crear y utilizar m\u00f3dulos, de eso se trata este post. Vamos a ver de que se trata cada uno de estos <em>enfoques<\/em> para solucionar el problema.\r\n\r\n<h3>AMD: Asynchronous Module Definition<\/h3>\r\nLa <em>Definici\u00f3n As\u00edncrona de M\u00f3dulos<\/em> fue creada para definir m\u00f3dulos donde este mismo y sus dependencias puedan ser cargadas asincr\u00f3nicamente. Un ejemplo de esto es el conocido RequireJS (en este post muestro una intro: <a href=\"http:\/\/fernetjs.com\/2012\/02\/requirejs-modulos-y-dependencias\/\" title=\"RequireJS: M\u00f3dulos y Dependencias\">RequireJS: M\u00f3dulos y Dependencias<\/a>). \r\nSe puede decir que fue pensado especialmente para el Navegador donde es importante tener este tipo de asincronismo. Tambi\u00e9n existen herramientas de optimizaci\u00f3n para el navegador donde es importante cargar lo necesario e indispensable mejorando la experiencia con nuestro sitio.\r\n\r\nDemasiado texto, tiremos un poco de c\u00f3digo para no dormirnos. :)\r\n\r\n[js]\r\n\r\n\/\/ define( [nombre] , [dependencias] , [definici\u00f3n]);\r\n\r\ndefine('miModulo', ['otroModulo'], function(otroModulo){\r\n  \/\/ listo, ac\u00e1 defino el m\u00f3dulo &quot;miModulo&quot;, \r\n  \/\/ porque la dependencia a otroModulo ya fue cargada y la tengo disponible.\r\n\r\n  return {\r\n    acceso: function(){ }\r\n  };\r\n});\r\n[\/js]\r\n\r\nDe esta manera puedo definir cada m\u00f3dulo de mi aplicaci\u00f3n con sus dependencias a otros m\u00f3dulos y me aseguro que todo existe antes de utilizarlos.\r\n\r\n<h3>CJS: Common JS<\/h3>\r\nAhora cambia un poco la idea, en CJS no tenemos \"definici\u00f3n de m\u00f3dulos\", es decir, no escribimos un \"define\", sino que se asume que sus dependencias ya est\u00e1n cargadas al momento de requerirlas. \r\nPara este caso podemos decir que fue pensado para el Server (por ej. NodeJS), donde realizamos un <em>require([m\u00f3dulo])<\/em> y lo tenemos, sin asincronismo:\r\n\r\n[js]\r\n\r\n\/\/no hay ning\u00fan define()\r\n\r\nvar otroModulo = require('.\/otroModulo');\r\n\r\n\/\/ ac\u00e1 va el c\u00f3digo de nuestro m\u00f3dulo\r\n\r\nmodule.exports.acceso = function() {};\r\n\r\n[\/js]\r\n\r\nSi bien, estamos de alguna manera definiendo sus dependencias con require(), la diferencia principal es que no lo hacemos antes de ejecutarse, es decir, podemos tener funciones y realizar esos require() desde cualquier parte del m\u00f3dulo, pero eso si, siempre se asume que ya est\u00e1 cargado.\r\n\r\n<h3>AMD + CJS<\/h3>\r\nPero que pasa si intentamos utilizar el ejemplo anterior de CommonJS en el navegador?, definitivamente no va a funcionar.\r\nAs\u00ed como tampoco utilzar un <em>define<\/em> en NodeJS. \r\nEntonces cual es mejor?, cuando?, donde?. Bueno, a mi parecer no hay uno mejor que el otro, ya explique para que fueron creados, ambos tienen sus pros y contras.\r\n\r\nMi problema, personal, es que me gusta AMD por su asincronismo, pero tambi\u00e9n me gusta CJS por el hecho de no definir dependencias y de poder utilizar mis m\u00f3dulos en NodeJS tambi\u00e9n (mientras no utilice DOM jeje), as\u00ed que opt\u00e9 por utilizar ambos para el navegador.\r\nComo?, bueno ah\u00ed esta lo divertido, simplemente envolviendo cada m\u00f3dulo CJS en uno de AMD, pero en tiempo de \"compilaci\u00f3n\" (*) (sino ser\u00eda medio extra\u00f1o), es decir, usando <a href=\"http:\/\/gruntjs.com\/\">GruntJS<\/a> con la ayuda de <a href=\"https:\/\/github.com\/medikoo\/modules-webmake\">WebMake<\/a>.\r\n\r\n<blockquote>\r\n(*) con \"compilaci\u00f3n\" me refiero a la tarea en GruntJS, realmente no se esta \"compilando\" el javascript jaja.\r\n<\/blockquote>\r\n\r\nEn un futuro post voy a mostrar un poco mas de GruntJS, pero por el momento les dejo un proyecto base en Github sobre esto de AMD + CJS + GruntJS + WebMake (tambi\u00e9n tiene un poco de Backbone y Backbone Marionette :) )\r\n\r\n<a href=\"https:\/\/github.com\/pjnovas\/base-client-project\">https:\/\/github.com\/pjnovas\/base-client-project<\/a> (les debo el Readme en Espa\u00f1ol)\r\n\r\n<hr\/>\r\n<h4>Cu\u00e1l te gustas m\u00e1s? AMD o CJS?<\/h4>\r\n<hr\/>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Tue, 19 Mar 2013 09:34:07 +0000","created_by":1,"updated_at":"Tue, 19 Mar 2013 09:42:51 +0000","updated_by":1,"published_at":"Tue, 19 Mar 2013 09:34:07 +0000","published_by":1},{"id":3623,"title":"NodeJS a la nube con NGINX en un VPS","slug":"nodejs-a-la-nube-con-nginx-en-un-vps","markdown":"\nAnteriormente expliqu\u00e9 como poner productiva una app en NodeJS utilizando PaaS en [NodeJS con Nodejitsu y Nodester](http:\/\/fernetjs.com\/2012\/07\/nodejs-en-la-nube-con-nodejitsu-y-nodester\/ \"NodeJS en la nube con Nodejitsu y Nodester\"), pero hace poco me puse a investigar para ir mas all\u00e1, as\u00ed que me compr\u00e9 un VPS (Servidor Virtual Privado) e incursion\u00e9 en el desaf\u00edo. Comprar un VPS, instalar una distribuci\u00f3n de linux y configurar Node es bastante sencillo, luego bajar nuestro proyecto y ponerlo en funcionamiento tampoco tiene muchas vueltas, es lo mismo que en local en nuestras maquinas (todo por terminal\/ consola). Pero la idea de un VPS es que no vamos a tener un solo proceso node, tenemos un servidor para nosotros, vamos a meter muchos procesos, varias bases de datos, la idea es que vamos m\u00e1s all\u00e1 de una app en nodejs.\n\n### El puerto 80\n\n Nos levantamos un servidor node en el puerto 80, y ahora?, no podemos usar el mismo puerto para otro servidor, pero queremos que la IP de nuestro VPS sirva ambos servidores. Por ejemplo tener ejemplo.com y ejemplo2.com en el mismo servidor pero en 2 procesos distintos, es decir, cada proceso con un puerto diferente, pero para el usuario es el 80. ### Virtual Hosts\n\n B\u00e1sicamente un virtual host nos va a permitir realizar un [reverse proxy](http:\/\/es.wikipedia.org\/wiki\/Proxy#Reverse_Proxy_.2F_Proxy_inverso), es decir, cada request que nos ingresa al servidor por el puerto 80, manejamos que proceso de node sirve fij\u00e1ndonos el dominio por le que ingres\u00f3. Bueno, hay algunas opciones para hacer esto en forma visual (que dependen de la distribuci\u00f3n linux que hayamos elegido). Para mi caso voy a ir con CentOS 6, para complicarla bien, ni siquiera podemos usar [Kloxo](http:\/\/lxcenter.org\/software\/kloxo) (en la ver. 6 de CentOS), tambi\u00e9n tenemos otras opciones como puede ser [WebMin](http:\/\/www.webmin.com\/), pero investigando un poco m\u00e1s me encontr\u00e9 con un punto interesante: si tenemos un VPS, donde lo importante (y limitante al bolsillo) es la transferencia mensual (entre otras cosas), no nos conviene utilizar estas herramientas web que simplemente al configurar vamos a estar consumiendo los recursos. No digo que es un limitante, pero es un punto importante aunque tambi\u00e9n es mas divertido meter mano lo m\u00e1ximo que se pueda. As\u00ed que descartemos estas herramientas. ### Apache vs NGINX\n\n Los que hayan usado Apache (por ejemplo para PHP) conocer\u00e1n que es bastante simple configurar Virtual Hosts, pero yo tenia NodeJS, no PHP, y casualmente con Apache no vamos a estar utilizando el potencial de NodeJS as\u00ed que segu\u00ed investigando y me encontr\u00e9 con NGINX, el cual es orientado a eventos, por lo que ser\u00eda ideal para nuestro caso donde tenemos varios procesos NodeJS. ### Instalando NGINX\n\n La instalaci\u00f3n va a depender de la Distribuci\u00f3n de Linux \/ el SO que elijamos, para el caso de CentOS va por yum [bash] wget http:\/\/nginx.org\/packages\/centos\/6\/noarch\/RPMS\/nginx-release-centos-6-0.el6.ngx.noarch.rpm rpm -ivh nginx-release-centos-6-0.el6.ngx.noarch.rpm yum install nginx [\/bash] ### Configurando NGINX\n\n> Como cont\u00e9 al inicio del post, es la primera vez que me meto en todo esto, as\u00ed que la configuraci\u00f3n que les voy a mostrar es lo b\u00e1sico para poner en funcionamiento nuestros servidores NodeJS, no mas que eso.\n\n[nginx](http:\/\/wiki.nginx.org\/Main) (se pronuncia enyinex, como Engine X en ingl\u00e9s :P), a diferencia de Apache, actual como un ReverseProxy antes que un HTTP Server. Y su configuraci\u00f3n es parecida a un JSON con una suerte de herencia jer\u00e1rquica, es decir, las configuraciones de abajo reemplazan a las de arriba ([dependiendo el caso](http:\/\/blog.martinfjordvald.com\/2012\/08\/understanding-the-nginx-configuration-inheritance-model\/)) Sin meterme mucho en la configuraci\u00f3n, ya que desconozco ampliamente (pueden ver mas [ac\u00e1](http:\/\/blog.martinfjordvald.com\/2010\/07\/nginx-primer\/)), tenemos 3 componentes importantes: http > server > location : donde *server* ser\u00edan el equivalente al VirtualHost en Apache y *location* las rutas a los recursos (URIs). Entonces, para nuestro caso particular donde queremos 2 procesos nodejs utilizando dominios distintos y que ambos sean accesibles desde la misma IP (de nuestro VPS) bajo el puerto 80, deber\u00edamos crear un http, con 2 *server* y sus respectivas *location* (URI ra\u00edz) apuntando a nuestros procesos. As\u00ed que primero, configuramos nuestros procesos de Node para que corran, por ejemplo, uno en el puerto 3000 y el otro en el 3050 y despu\u00e9s armemos el config: Abrimos el archivo de configuraci\u00f3n para Linux: [bash] vim \/etc\/nginx\/nginx.conf [\/bash] [bash highlight=\"4,5,12,18,19,26\"] # ac\u00e1 otras configuraciones http { server { listen 80; server_name ejemplo1.com www.ejemplo1.com *.ejemplo1.com; location \/ { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_pass http:\/\/127.0.0.1:3000\/; proxy_redirect off; } } server { listen 80; server_name ejemplo2.com www.ejemplo2.com *.ejemplo2.com; location \/ { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_pass http:\/\/127.0.0.1:3050\/; proxy_redirect off; } } } [\/bash] Guardamos el config y arrancamos nginx [bash] sudo service nginx start [\/bash] Pueden ver un ejemplo de una configuraci\u00f3n [ac\u00e1](http:\/\/wiki.nginx.org\/NginxFullExample) Y listo!, ahora entramos a http:\/\/ejemplo1.com y nos levanta el servidor que tenemos en el puerto 3000 y si entramos a http:\/\/ejemplo2.com el del puerto 3050. ### Mas info.\n\n#### NGINX (Ingl\u00e9s)\n\n- [Wiki](http:\/\/wiki.nginx.org\/Main)\n- [Intro](http:\/\/blog.martinfjordvald.com\/2010\/07\/nginx-primer\/)\n- [Entendiendo el Modelo de Herencia](http:\/\/blog.martinfjordvald.com\/2012\/08\/understanding-the-nginx-configuration-inheritance-model\/)\n- [Diferencias con Apache](http:\/\/blog.martinfjordvald.com\/2011\/02\/nginx-primer-2-from-apache-to-nginx\/)\n- [Por qu\u00e9 deber\u00edas usarlo?](http:\/\/wiki.nginx.org\/WhyUseIt)\n\n\n","html":"Anteriormente expliqu\u00e9 como poner productiva una app en NodeJS utilizando PaaS en <a href=\"http:\/\/fernetjs.com\/2012\/07\/nodejs-en-la-nube-con-nodejitsu-y-nodester\/\" title=\"NodeJS en la nube con Nodejitsu y Nodester\">NodeJS con Nodejitsu y Nodester<\/a>, pero hace poco me puse a investigar para ir mas all\u00e1, as\u00ed que me compr\u00e9 un VPS (Servidor Virtual Privado) e incursion\u00e9 en el desaf\u00edo.\r\n\r\nComprar un VPS, instalar una distribuci\u00f3n de linux y configurar Node es bastante sencillo, luego bajar nuestro proyecto y ponerlo en funcionamiento tampoco tiene muchas vueltas, es lo mismo que en local en nuestras maquinas (todo por terminal\/ consola). Pero la idea de un VPS es que no vamos a tener un solo proceso node, tenemos un servidor para nosotros, vamos a meter muchos procesos, varias bases de datos, la idea es que vamos m\u00e1s all\u00e1 de una app en nodejs.\r\n\r\n<h3>El puerto 80<\/h3>\r\n\r\nNos levantamos un servidor node en el puerto 80, y ahora?, no podemos usar el mismo puerto para otro servidor, pero queremos que la IP de nuestro VPS sirva ambos servidores.\r\nPor ejemplo tener ejemplo.com y ejemplo2.com en el mismo servidor pero en 2 procesos distintos, es decir, cada proceso con un puerto diferente, pero para el usuario es el 80.\r\n\r\n<h3>Virtual Hosts<\/h3>\r\nB\u00e1sicamente un virtual host nos va a permitir realizar un <a href=\"http:\/\/es.wikipedia.org\/wiki\/Proxy#Reverse_Proxy_.2F_Proxy_inverso\">reverse proxy<\/a>, es decir, cada request que nos ingresa al servidor por el puerto 80, manejamos que proceso de node sirve fij\u00e1ndonos el dominio por le que ingres\u00f3.\r\n\r\nBueno, hay algunas opciones para hacer esto en forma visual (que dependen de la distribuci\u00f3n linux que hayamos elegido). \r\nPara mi caso voy a ir con CentOS 6, para complicarla bien, ni siquiera podemos usar <a href=\"http:\/\/lxcenter.org\/software\/kloxo\">Kloxo<\/a> (en la ver. 6 de CentOS), tambi\u00e9n tenemos otras opciones como puede ser <a href=\"http:\/\/www.webmin.com\/\">WebMin<\/a>, pero investigando un poco m\u00e1s me encontr\u00e9 con un punto interesante: si tenemos un VPS, donde lo importante (y limitante al bolsillo) es la transferencia mensual (entre otras cosas), no nos conviene utilizar estas herramientas web que simplemente al configurar vamos a estar consumiendo los recursos. No digo que es un limitante, pero es un punto importante aunque tambi\u00e9n es mas divertido meter mano lo m\u00e1ximo que se pueda. As\u00ed que descartemos estas herramientas.\r\n\r\n<h3>Apache vs NGINX<\/h3>\r\n\r\nLos que hayan usado Apache (por ejemplo para PHP) conocer\u00e1n que es bastante simple configurar Virtual Hosts, pero yo tenia NodeJS, no PHP, y casualmente con Apache no vamos a estar utilizando el potencial de NodeJS as\u00ed que segu\u00ed investigando y me encontr\u00e9 con NGINX, el cual es orientado a eventos, por lo que ser\u00eda ideal para nuestro caso donde tenemos varios procesos NodeJS.\r\n\r\n<h3>Instalando NGINX<\/h3>\r\n\r\nLa instalaci\u00f3n va a depender de la Distribuci\u00f3n de Linux \/ el SO que elijamos, para el caso de CentOS va por yum\r\n\r\n[bash]\r\nwget http:\/\/nginx.org\/packages\/centos\/6\/noarch\/RPMS\/nginx-release-centos-6-0.el6.ngx.noarch.rpm\r\nrpm -ivh nginx-release-centos-6-0.el6.ngx.noarch.rpm\r\nyum install nginx\r\n[\/bash]\r\n\r\n<h3>Configurando NGINX<\/h3>\r\n\r\n<blockquote>\r\nComo cont\u00e9 al inicio del post, es la primera vez que me meto en todo esto, as\u00ed que la configuraci\u00f3n que les voy a mostrar es lo b\u00e1sico para poner en funcionamiento nuestros servidores NodeJS, no mas que eso.\r\n<\/blockquote>\r\n\r\n<a href=\"http:\/\/wiki.nginx.org\/Main\">nginx<\/a> (se pronuncia enyinex, como Engine X en ingl\u00e9s :P), a diferencia de Apache, actual como un ReverseProxy antes que un HTTP Server. Y su configuraci\u00f3n es parecida a un JSON con una suerte de herencia jer\u00e1rquica, es decir, las configuraciones de abajo reemplazan a las de arriba (<a href=\"http:\/\/blog.martinfjordvald.com\/2012\/08\/understanding-the-nginx-configuration-inheritance-model\/\">dependiendo el caso<\/a>)\r\n\r\nSin meterme mucho en la configuraci\u00f3n, ya que desconozco ampliamente (pueden ver mas <a href=\"http:\/\/blog.martinfjordvald.com\/2010\/07\/nginx-primer\/\">ac\u00e1<\/a>), tenemos 3 componentes importantes:\r\n\r\nhttp > server > location : donde <em>server<\/em> ser\u00edan el equivalente al VirtualHost en Apache y <em>location<\/em> las rutas a los recursos (URIs).\r\n\r\nEntonces, para nuestro caso particular donde queremos 2 procesos nodejs utilizando dominios distintos y que ambos sean accesibles desde la misma IP (de nuestro VPS) bajo el puerto 80, deber\u00edamos crear un http, con 2 <em>server<\/em> y sus respectivas <em>location<\/em> (URI ra\u00edz) apuntando a nuestros procesos.\r\n\r\nAs\u00ed que primero, configuramos nuestros procesos de Node para que corran, por ejemplo, uno en el puerto 3000 y el otro en el 3050 y despu\u00e9s armemos el config:\r\n\r\nAbrimos el archivo de configuraci\u00f3n para Linux:\r\n[bash]\r\nvim \/etc\/nginx\/nginx.conf\r\n[\/bash]\r\n\r\n[bash highlight=\"4,5,12,18,19,26\"]\r\n# ac\u00e1 otras configuraciones\r\nhttp {\r\n  server {\r\n    listen   80;\r\n    server_name ejemplo1.com www.ejemplo1.com *.ejemplo1.com;\r\n\r\n    location \/ {\r\n         proxy_set_header X-Real-IP $remote_addr;\r\n         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n         proxy_set_header Host $http_host;\r\n         proxy_set_header X-NginX-Proxy true;\r\n         proxy_pass http:\/\/127.0.0.1:3000\/;\r\n         proxy_redirect off;\r\n    }\r\n  }\r\n\r\n  server {\r\n    listen   80;\r\n    server_name ejemplo2.com www.ejemplo2.com *.ejemplo2.com;\r\n\r\n    location \/ {\r\n         proxy_set_header X-Real-IP $remote_addr;\r\n         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n         proxy_set_header Host $http_host;\r\n         proxy_set_header X-NginX-Proxy true;\r\n         proxy_pass http:\/\/127.0.0.1:3050\/;\r\n         proxy_redirect off;\r\n    }\r\n  }\r\n}\r\n[\/bash] \r\n\r\nGuardamos el config y arrancamos nginx\r\n\r\n[bash]\r\nsudo service nginx start\r\n[\/bash]\r\n\r\nPueden ver un ejemplo de una configuraci\u00f3n <a href=\"http:\/\/wiki.nginx.org\/NginxFullExample\">ac\u00e1<\/a>\r\n\r\nY listo!, ahora entramos a http:\/\/ejemplo1.com y nos levanta el servidor que tenemos en el puerto 3000 y si entramos a http:\/\/ejemplo2.com el del puerto 3050.\r\n\r\n<h3>Mas info.<\/h3>\r\n<h4>NGINX (Ingl\u00e9s)<\/h4>\r\n<ul>\r\n<li><a href=\"http:\/\/wiki.nginx.org\/Main\">Wiki<\/a><\/li>\r\n<li><a href=\"http:\/\/blog.martinfjordvald.com\/2010\/07\/nginx-primer\/\">Intro<\/a><\/li>\r\n<li><a href=\"http:\/\/blog.martinfjordvald.com\/2012\/08\/understanding-the-nginx-configuration-inheritance-model\/\">Entendiendo el Modelo de Herencia<\/a><\/li>\r\n<li><a href=\"http:\/\/blog.martinfjordvald.com\/2011\/02\/nginx-primer-2-from-apache-to-nginx\/\">Diferencias con Apache<\/a><\/li>\r\n<li><a href=\"http:\/\/wiki.nginx.org\/WhyUseIt\">Por qu\u00e9 deber\u00edas usarlo?<\/a><\/li>\r\n<\/ul>\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Mon, 25 Mar 2013 12:24:37 +0000","created_by":1,"updated_at":"Mon, 25 Mar 2013 12:57:53 +0000","updated_by":1,"published_at":"Mon, 25 Mar 2013 12:24:37 +0000","published_by":1},{"id":3662,"title":"Aprendiendo Bootstrap en 5 d\u00edas","slug":"aprendiendo-bootstrap-en-5-dias","markdown":"\nHola comunidad ! Somos un equipo de desarrollo que estos d\u00edas tuvo el desaf\u00edo de aprender bootstrap en 5 d\u00edas. Qu\u00e9 result\u00f3? Ac\u00e1 va nuestra experiencia: **El primer d\u00eda**\n\n1. Entendimos que nuestro cliente nos ped\u00eda que las pantallas web empiecen a ser responsive y hoy no lo son. As\u00ed que el desaf\u00edo fue tomar la maqueta del cliente (maqueta.png) y hacer la pantalla desde cero y responsive!\n2. Aprendimos que responsive significa que la p\u00e1gina se adapta al ancho del dispositivo (monitor, ipad, iphone, etc).\n3. Y que [Bootstrap](http:\/\/twitter.github.io\/bootstrap\/)\u00a0es un framework que con HTML y CSS, facilita la definici\u00f3n de un layout de p\u00e1ginas web, y adem\u00e1s, te da la posibilidad de que tus p\u00e1ginas sean responsive.\n4. Empezamos a armar la estructura de la p\u00e1gina con el concepto que, por defecto, Bootstrap usa 12 columnas imaginarias en un ancho de\u00a0940 pixeles.\n5. Usamos [Collorzilla](http:\/\/www.colorzilla.com\/) para obtener los colores de la maqueta y\u00a0MeasureIt para obtener las medidas.\n6. Conseguimos un html con un mont\u00f3n de div porque la maqueta tiene unas cuantas divisiones!\n\n**El segundo d\u00eda**1. La p\u00e1gina que tenemos ya es responsive.\n2. Discutimos un poco acerca de las nomenclaturas para los nombres de las clases de estilo y acordamos que tengan el prefijo del proyecto cuando son clases propias (p.e. pnt-home).\n3. Nos organizamos para trabajar en 2 parejas de trabajo.\n4. Una pareja decidi\u00f3 avanzar de a bloques y otra decidi\u00f3 armar primero la p\u00e1gina y luego estilarla.\n5. Bootstrap no nos ayud\u00f3 en el dise\u00f1o y si nos facilit\u00f3 para que sea responsive.\n6. Fundamental que cada bloque que usamos para el layout de la p\u00e1gina tiene que\u00a0tener row y\/o span, y los estilos se aplican al contenido, no antes!\n\n**El tercer d\u00eda**1. Bootstrap significa autosuficiente, nada, para saber de d\u00f3nde el nombre.\n2. Empezamos a paralelizar el laburo de dise\u00f1o.\n3. Y a usar componentes propios de Bootstrap como\u00a0dropdown, tabs, pills.\n4. Vemos que Bootstrap va bien para p\u00e1ginas con pocas secciones y con muchas subdivisiones se complican los m\u00e1rgenes predefinidos de la p\u00e1gina.\n\n**El cuarto d\u00eda**1. Bootstrap nos ayuda a utilizar los elementos HTML para lo que fueron creados.\n2. Se nos complica imitar formatos de la maqueta inicial.\n\n**El quinto d\u00eda**1. Incorporamos [Font Awesome](http:\/\/fortawesome.github.io\/Font-Awesome\/) para que los \u00edconos y letras sean escalables y de calidad, altamente recomendable!\n2. Usamos\u00a0responsive navbar para que la p\u00e1gina convierta una fila de t\u00edtulos en opciones de men\u00fa cuando achicas la pantalla.\n3. Terminamos el desaf\u00edo haciendo una demo de lo logrado.\n\n Una forma simp\u00e1tica de aprender en equipo.\n","html":"Hola comunidad !\r\n\r\nSomos un equipo de desarrollo que estos d\u00edas tuvo el desaf\u00edo de aprender bootstrap en 5 d\u00edas. Qu\u00e9 result\u00f3? Ac\u00e1 va nuestra experiencia:\r\n\r\n<b>El primer d\u00eda<\/b>\r\n<ol>\r\n\t<li>Entendimos que nuestro cliente nos ped\u00eda que las pantallas web empiecen a ser responsive y hoy no lo son. As\u00ed que el desaf\u00edo fue tomar la maqueta del cliente (maqueta.png) y hacer la pantalla desde cero y responsive!<\/li>\r\n\t<li>Aprendimos que responsive significa que la p\u00e1gina se adapta al ancho del dispositivo (monitor, ipad, iphone, etc).<\/li>\r\n\t<li>Y que <a href=\"http:\/\/twitter.github.io\/bootstrap\/\">Bootstrap<\/a>\u00a0es un framework que con HTML y CSS, facilita la definici\u00f3n de un layout de p\u00e1ginas web, y adem\u00e1s, te da la posibilidad de que tus p\u00e1ginas sean responsive.<\/li>\r\n\t<li>Empezamos a armar la estructura de la p\u00e1gina con el concepto que, por defecto, Bootstrap usa 12 columnas imaginarias en un ancho de\u00a0940 pixeles.<\/li>\r\n\t<li>Usamos <a href=\"http:\/\/www.colorzilla.com\/\">Collorzilla<\/a> para obtener los colores de la maqueta y\u00a0MeasureIt para obtener las medidas.<\/li>\r\n\t<li>Conseguimos un html con un mont\u00f3n de div porque la maqueta tiene unas cuantas divisiones!<\/li>\r\n<\/ol>\r\n<b>El segundo d\u00eda<\/b>\r\n<ol>\r\n\t<li>La p\u00e1gina que tenemos ya es responsive.<\/li>\r\n\t<li>Discutimos un poco acerca de las nomenclaturas para los nombres de las clases de estilo y acordamos que tengan el prefijo del proyecto cuando son clases propias (p.e. pnt-home).<\/li>\r\n\t<li>Nos organizamos para trabajar en 2 parejas de trabajo.<\/li>\r\n\t<li>Una pareja decidi\u00f3 avanzar de a bloques y otra decidi\u00f3 armar primero la p\u00e1gina y luego estilarla.<\/li>\r\n\t<li>Bootstrap no nos ayud\u00f3 en el dise\u00f1o y si nos facilit\u00f3 para que sea responsive.<\/li>\r\n\t<li>Fundamental que cada bloque que usamos para el layout de la p\u00e1gina tiene que\u00a0tener row y\/o span, y los estilos se aplican al contenido, no antes!<\/li>\r\n<\/ol>\r\n<b>El tercer d\u00eda<\/b>\r\n<ol>\r\n\t<li>Bootstrap significa autosuficiente, nada, para saber de d\u00f3nde el nombre.<\/li>\r\n\t<li>Empezamos a paralelizar el laburo de dise\u00f1o.<\/li>\r\n\t<li>Y a usar componentes propios de Bootstrap como\u00a0dropdown, tabs, pills.<\/li>\r\n\t<li>Vemos que Bootstrap va bien para p\u00e1ginas con pocas secciones y con muchas subdivisiones se complican los m\u00e1rgenes predefinidos de la p\u00e1gina.<\/li>\r\n<\/ol>\r\n<b>El cuarto d\u00eda<\/b>\r\n<ol>\r\n\t<li>Bootstrap nos ayuda a utilizar los elementos HTML para lo que fueron creados.<\/li>\r\n\t<li>Se nos complica imitar formatos de la maqueta inicial.<\/li>\r\n<\/ol>\r\n<b>El quinto d\u00eda<\/b>\r\n<ol>\r\n\t<li>Incorporamos <a href=\"http:\/\/fortawesome.github.io\/Font-Awesome\/\">Font Awesome<\/a> para que los \u00edconos y letras sean escalables y de calidad, altamente recomendable!<\/li>\r\n\t<li>Usamos\u00a0responsive navbar para que la p\u00e1gina convierta una fila de t\u00edtulos en opciones de men\u00fa cuando achicas la pantalla.<\/li>\r\n\t<li>Terminamos el desaf\u00edo haciendo una demo de lo logrado.<\/li>\r\n<\/ol>\r\nUna forma simp\u00e1tica de aprender en equipo.","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":86,"created_at":"Tue, 23 Apr 2013 14:19:08 +0000","created_by":1,"updated_at":"Tue, 23 Apr 2013 14:19:08 +0000","updated_by":1,"published_at":"Tue, 23 Apr 2013 14:19:08 +0000","published_by":1},{"id":2456,"title":"mocha y should.js en el server","slug":"temp-slug-95","markdown":"\nYa hace un tiempo [hab\u00eda hablado de mocha](http:\/\/fernetjs.com\/2012\/03\/testeando-con-mocha-y-expect-js\/ \"Testeando con mocha y expect.js\") y como utilizarlo en el browser, junto con las assertions de expectjs. Hoy, vamos a ampliar un poco el panorama y ver como laburar los tests con node. Primero y principal, nos aseguramos de tener node instalado, as\u00ed como tambien NPM. Instalamos mocha por medio de NPM [bash] npm install -g mocha [\/bash] El watcher Es muy pr\u00e1ctico y de gran utilidad correr mocha con el par\u00e1metro -w, especialmente en nuestro flujo de desarrollo haciendo Test Driven Development. Esto es, cada vez que un archivo correspondiente a tests, o implementaciones sea guardado, en la consola se van a volver a correr autom\u00e1ticamente las pruebas correspondientes. En mi caso particular, me resulta muy c\u00f3modo laburar con dos monitores; en uno edito c\u00f3digo, y en otro tengo la consola con mocha corriendo. Simplemente, uno corre mocha, escribe un test, lo guarda, y autom\u00e1ticamente lo va a ver fallar en la consola. Se satisface la prueba en el c\u00f3digo, mocha muestra todo verde, se refactoriza si es conveniente, y volvemos a empezar con el ciclo. \/\/ gif animado ac\u00e1.\n\n\n","html":"Ya hace un tiempo <a title=\"Testeando con mocha y expect.js\" href=\"http:\/\/fernetjs.com\/2012\/03\/testeando-con-mocha-y-expect-js\/\" target=\"_blank\">hab\u00eda hablado de mocha<\/a> y como utilizarlo en el browser, junto con las assertions de expectjs. Hoy, vamos a ampliar un poco el panorama y ver como laburar los tests con node.\r\n\r\nPrimero y principal, nos aseguramos de tener node instalado, as\u00ed como tambien NPM. Instalamos mocha por medio de NPM\r\n\r\n[bash]\r\nnpm install -g mocha\r\n[\/bash]\r\n\r\nEl watcher\r\n\r\nEs muy pr\u00e1ctico y de gran utilidad correr mocha con el par\u00e1metro -w, especialmente en nuestro flujo de desarrollo haciendo Test Driven Development. Esto es, cada vez que un archivo correspondiente a tests, o implementaciones sea guardado, en la consola se van a volver a correr autom\u00e1ticamente las pruebas correspondientes.\r\nEn mi caso particular, me resulta muy c\u00f3modo laburar con dos monitores; en uno edito c\u00f3digo, y en otro tengo la consola con mocha corriendo.\r\nSimplemente, uno corre mocha, escribe un test, lo guarda, y autom\u00e1ticamente lo va a ver fallar en la consola. Se satisface la prueba en el c\u00f3digo, mocha muestra todo verde, se refactoriza si es conveniente, y volvemos a empezar con el ciclo.\r\n\r\n\/\/ gif animado ac\u00e1.","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Fri, 24 May 2013 10:09:14 +0000","created_by":1,"updated_at":"Fri, 24 May 2013 10:09:14 +0000","updated_by":1,"published_at":"","published_by":1},{"id":3671,"title":"Animando sprites con HTML5: Canvas","slug":"animando-sprites-con-html5-canvas","markdown":"\nSiguiendo con la serie de posts de juegos en canvas, voy a continuar los posts anteriores (si no los viste: [Dibujando en CANVAS](http:\/\/fernetjs.com\/2011\/11\/dibujando-en-canvas-html5\/ \"Dibujando en CANVAS \u2013 HTML5\"), [Animando en CANVAS](http:\/\/fernetjs.com\/2011\/12\/animando-en-canvas-html5\/ \"Animando en CANVAS \u2013 HTML5\"), [Construyendo un Game Loop](http:\/\/fernetjs.com\/2012\/09\/construyendo-un-game-loop\/ \"Construyendo un Game Loop\")). Vamos a armar una animaci\u00f3n utilizando Sprites. Que es un Sprite?, simplemente una imagen con distintos estados de un objeto en el cual mostrar de a uno y en orden se ve el objeto animado. Es decir, vamos \"cortando\" la imagen con cada objeto y al mostrar y ocultar en un muy corto tiempo se genera una animaci\u00f3n. Para el caso de este ejemplo me descargu\u00e9 un Sprite del ActionDoom desde [ac\u00e1](http:\/\/spriters-resource.com\/pc_computer\/actiondoom\/sheet\/30570), que luego organic\u00e9 un poco para que me sea mas simple manejarlo desde el javascript, quedando en lo siguiente: [![sprites](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites-300x250.png)](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites.png)\n\n#### Seccionando el sprite\n\n Para poder usarlo desde javascript, tenemos que pensar en una grilla virtual, lo que podemos traducir a una matriz de posiciones, mientras que cada celda tenga el mismo ancho y alto: [![sprites_grid](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites_grid1-300x250.png)](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites_grid1.png) Ahora que tenemos nuestra grilla imaginaria, vamos a definir que celdas corresponden a cada estado, en este caso la separe que colores para que sea visible, siendo: <div style=\"width:20px; height:20px; background:#a1a615; float: left; margin: 0 20px 0 0\"><\/div> Libre <div style=\"width:20px; height:20px; background:#a10000; float: left; margin: 0 20px 0 0\"><\/div> Acci\u00f3n <div style=\"width:20px; height:20px; background:#2a9811; float: left; margin: 0 20px 0 0\"><\/div> Recarga [![sprites_grid_colors](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites_grid_colors1-300x251.png)](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites_grid_colors1.png) Todo listo, ahora armemos la matriz de referencia y animaciones en el c\u00f3digo: [js] \/\/ defino los tipos de armas que voy a tener var armas = ['cuchillo', 'pistola', 'escopeta', 'grosa']; \/\/ defino para cada arma donde est\u00e1n sus estados en la matriz var sprites = { dimension: { ancho: 200, alto: 200 }, cuchillo: { libre: [0,0], accion: [[1,0],[2,0],[1,0]] }, pistola: { libre: [0,2], accion: [[0,2],[1,2],[2,2],[3,2],[4,2],[5,2]], recarga: [[0,1],[1,1],[2,1],[3,1],[4,1],[0,1]] }, escopeta: { libre: [0,3], accion: [[3,0],[4,0],[5,0]], recarga: [[1,3],[2,3],[3,3],[4,3],[5,3]] }, grosa: { libre: [0,4], accion: [[1,4],[2,4],[3,4],[4,4],[5,4]] } }; [\/js] Como se puede ver, hay celdas que se repiten y es la idea, es com\u00fan que usemos una \"celda\" varias veces en la misma animaci\u00f3n. #### Animando en el Game Loop\n\n La animaci\u00f3n se produce sola, simplemente por cada paso del game loop (actualizar y dibujar), actualizamos las coordenadas en la imagen, borramos lo que hay y dibujamos uno nuevo. Lo que hacemos primero es dejar el game loop corriendo, cuando el usuario presiona una tecla, guardamos que arma seleccion\u00f3 y su estado: [js] \/\/ Asignamos el callback al evento keypress document.addEventListener('keypress', asignarArmaYEstado); \/\/ estadoAnterior, estado y arma son variables globales \/\/ del m\u00f3dulo en el game loop. function asignarArmaYEstado(evento){ var codigo = evento.keyCode; \/\/ dependiendo del codigo asignamos el arma y el estado switch(codigo){ case 97: \/\/ Letra A estadoAnterior = estado; estado = 'accion'; break; case 114: \/\/ Letra R estado = 'recarga'; break; \/\/ N\u00fameros del 1 al 4 case 49: case 50: case 51: case 52: arma = armas[codigo-49]; break; } } [\/js] En la pr\u00f3xima corrida del actualizar en el game loop, nos fijamos cual es el arma y su estado actual, para actualizar la posici\u00f3n de la matriz: [js] \/\/ la variable pos mantiene la posici\u00f3n a dibujar \/\/ y es otra variable global del modulo en el game loop function actualizar(){ var x, y, sprite = sprites[arma][estado]; \/\/la celda en la matriz \/\/ si reci\u00e9n cambio de estado, volvemos el \u00edndice a 0 if (estado !== estadoAnterior){ animContador = 0; } \/\/ si el \u00edndice es es el \u00faltimo no hay mas para animar, \/\/ as\u00ed que volvemos el estado a \"libre\" if(animContador === sprite.length-1){ estado = 'libre'; sprite = sprites[arma][estado]; } \/\/ si no es \"libre\", hay que seguir con la animaci\u00f3n, \/\/ as\u00ed que incrementamos el \u00edndice de la animaci\u00f3n else if(estado !== 'libre') { sprite = sprite[animContador]; animContador++; } \/\/ calculamos cual es la x e y real en la imagen \/\/ partiendo de la posici\u00f3n de la \"celda\" y la dimensi\u00f3n de cada sprite x = sprite[0] * sprites.dimension.ancho; y = sprite[1] * sprites.dimension.alto; \/\/ asignamos las coordenadas para dibujar pos = { x: x, y: y, w: sprites.dimension.ancho, h: sprites.dimension.alto }; } [\/js] Por \u00faltimo al dispararse el dibujar, utilizamos el drawImage de canvas, pero con unas cuantas opciones mas para poder dibujar **s\u00f3lo** la \"celda\" del estado y arma que queremos: Para informaci\u00f3n sobre el drawImage, est\u00e1 muy bien explicado [ac\u00e1](http:\/\/www.html5canvastutorials.com\/tutorials\/html5-canvas-image-crop\/) [js] function dibujar(){ \/\/context.drawImage(<Objeto Image>, <X Sprite>, <Y Sprite>, <Ancho Sprite>, <Alto Sprite>, <X en Canvas>, <Y en Canvas>, <Ancho en Canvas>, <Alto en Canvas>); contexto.drawImage(imgSprites, pos.x, pos.y, pos.w, pos.h, 0, 0, pos.w, pos.h); } [\/js] Les dejo un Fiddle con el resultado (click adentro del fiddle para usar): [http:\/\/jsfiddle.net\/pjnovas\/4PvSm](http:\/\/jsfiddle.net\/pjnovas\/4PvSm)<iframe frameborder=\"1\" height=\"240\" src=\"http:\/\/jsfiddle.net\/pjnovas\/4PvSm\/embedded\/result,js,html,css\/\" style=\"width: 100%; height: 300px;\" width=\"320\"><\/iframe>\n","html":"Siguiendo con la serie de posts de juegos en canvas, voy a continuar los posts anteriores (si no los viste: <a href=\"http:\/\/fernetjs.com\/2011\/11\/dibujando-en-canvas-html5\/\" title=\"Dibujando en CANVAS \u2013 HTML5\">Dibujando en CANVAS<\/a>, <a href=\"http:\/\/fernetjs.com\/2011\/12\/animando-en-canvas-html5\/\" title=\"Animando en CANVAS \u2013 HTML5\">Animando en CANVAS<\/a>, <a href=\"http:\/\/fernetjs.com\/2012\/09\/construyendo-un-game-loop\/\" title=\"Construyendo un Game Loop\">Construyendo un Game Loop<\/a>).\r\n\r\nVamos a armar una animaci\u00f3n utilizando Sprites. Que es un Sprite?, simplemente una imagen con distintos estados de un objeto en el cual mostrar de a uno y en orden se ve el objeto animado. Es decir, vamos \"cortando\" la imagen con cada objeto y al mostrar y ocultar en un muy corto tiempo se genera una animaci\u00f3n.\r\n\r\nPara el caso de este ejemplo me descargu\u00e9 un Sprite del ActionDoom desde <a href=\"http:\/\/spriters-resource.com\/pc_computer\/actiondoom\/sheet\/30570\">ac\u00e1<\/a>, que luego organic\u00e9 un poco para que me sea mas simple manejarlo desde el javascript, quedando en lo siguiente:\r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites-300x250.png\" alt=\"sprites\" width=\"300\" height=\"250\" class=\"size-medium wp-image-3688\" \/><\/a>\r\n\r\n<h4>Seccionando el sprite<\/h4>\r\nPara poder usarlo desde javascript, tenemos que pensar en una grilla virtual, lo que podemos traducir a una matriz de posiciones, mientras que cada celda tenga el mismo ancho y alto:\r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites_grid1.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites_grid1-300x250.png\" alt=\"sprites_grid\" width=\"300\" height=\"250\" class=\"size-medium wp-image-3700\" \/><\/a>\r\n\r\nAhora que tenemos nuestra grilla imaginaria, vamos a definir que celdas corresponden a cada estado, en este caso la separe que colores para que sea visible, siendo:\r\n\r\n<div style=\"width:20px; height:20px; background:#a1a615; float: left; margin: 0 20px 0 0\"><\/div> Libre\r\n<div style=\"width:20px; height:20px; background:#a10000; float: left; margin: 0 20px 0 0\"><\/div> Acci\u00f3n\r\n<div style=\"width:20px; height:20px; background:#2a9811; float: left; margin: 0 20px 0 0\"><\/div> Recarga\r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites_grid_colors1.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/06\/sprites_grid_colors1-300x251.png\" alt=\"sprites_grid_colors\" width=\"300\" height=\"251\" class=\"size-medium wp-image-3709\" \/><\/a>\r\n\r\nTodo listo, ahora armemos la matriz de referencia y animaciones en el c\u00f3digo:\r\n\r\n[js]\r\n\/\/ defino los tipos de armas que voy a tener\r\nvar armas = ['cuchillo', 'pistola', 'escopeta', 'grosa'];\r\n\r\n\/\/ defino para cada arma donde est\u00e1n sus estados en la matriz\r\nvar sprites = {\r\n    dimension: {\r\n        ancho: 200,\r\n        alto: 200\r\n    },\r\n    cuchillo: {\r\n        libre: [0,0],\r\n        accion: [[1,0],[2,0],[1,0]]\r\n    },\r\n    pistola: {\r\n        libre: [0,2],\r\n        accion: [[0,2],[1,2],[2,2],[3,2],[4,2],[5,2]],\r\n        recarga: [[0,1],[1,1],[2,1],[3,1],[4,1],[0,1]]\r\n    },\r\n    escopeta: {\r\n        libre: [0,3],\r\n        accion: [[3,0],[4,0],[5,0]],\r\n        recarga: [[1,3],[2,3],[3,3],[4,3],[5,3]]\r\n    },\r\n    grosa: {\r\n        libre: [0,4],\r\n        accion: [[1,4],[2,4],[3,4],[4,4],[5,4]]\r\n    }\r\n};\r\n[\/js]\r\n\r\nComo se puede ver, hay celdas que se repiten y es la idea, es com\u00fan que usemos una \"celda\" varias veces en la misma animaci\u00f3n.\r\n\r\n<h4>Animando en el Game Loop<\/h4>\r\nLa animaci\u00f3n se produce sola, simplemente por cada paso del game loop (actualizar y dibujar), actualizamos las coordenadas en la imagen, borramos lo que hay y dibujamos uno nuevo.\r\n\r\nLo que hacemos primero es dejar el game loop corriendo, cuando el usuario presiona una tecla, guardamos que arma seleccion\u00f3 y su estado:\r\n\r\n[js]\r\n\/\/ Asignamos el callback al evento keypress\r\ndocument.addEventListener('keypress', asignarArmaYEstado);\r\n\r\n\/\/ estadoAnterior, estado y arma son variables globales \r\n\/\/ del m\u00f3dulo en el game loop.\r\n\r\nfunction asignarArmaYEstado(evento){\r\n  var codigo = evento.keyCode;\r\n  \/\/ dependiendo del codigo asignamos el arma y el estado\r\n\r\n  switch(codigo){\r\n    case 97: \/\/ Letra A\r\n        estadoAnterior = estado;\r\n        estado = 'accion';\r\n        break;\r\n    case 114: \/\/ Letra R\r\n        estado = 'recarga';\r\n        break;\r\n\r\n    \/\/ N\u00fameros del 1 al 4\r\n    case 49:\r\n    case 50:\r\n    case 51:\r\n    case 52:\r\n        arma = armas[codigo-49]; \r\n        break;\r\n  }\r\n}\r\n[\/js]\r\n\r\nEn la pr\u00f3xima corrida del actualizar en el game loop, nos fijamos cual es el arma y su estado actual, para actualizar la posici\u00f3n de la matriz:\r\n\r\n[js]\r\n\/\/ la variable pos mantiene la posici\u00f3n a dibujar\r\n\/\/ y es otra variable global del modulo en el game loop\r\n\r\nfunction actualizar(){\r\n  var x, y,\r\n    sprite = sprites[arma][estado]; \/\/la celda en la matriz\r\n\r\n  \/\/ si reci\u00e9n cambio de estado, volvemos el \u00edndice a 0\r\n  if (estado !== estadoAnterior){\r\n    animContador = 0;\r\n  }\r\n  \r\n  \/\/ si el \u00edndice es es el \u00faltimo no hay mas para animar,\r\n  \/\/ as\u00ed que volvemos el estado a &quot;libre&quot;\r\n  if(animContador === sprite.length-1){\r\n    estado = 'libre';\r\n    sprite = sprites[arma][estado];\r\n  }\r\n\r\n  \/\/ si no es &quot;libre&quot;, hay que seguir con la animaci\u00f3n,\r\n  \/\/ as\u00ed que incrementamos el \u00edndice de la animaci\u00f3n\r\n  else if(estado !== 'libre') {\r\n    sprite =  sprite[animContador];\r\n    animContador++;\r\n  }\r\n  \r\n  \/\/ calculamos cual es la x e y real en la imagen\r\n  \/\/ partiendo de la posici\u00f3n de la &quot;celda&quot; y la dimensi\u00f3n de cada sprite\r\n  x = sprite[0] * sprites.dimension.ancho;\r\n  y = sprite[1] * sprites.dimension.alto;\r\n  \r\n  \/\/ asignamos las coordenadas para dibujar\r\n  pos = {\r\n    x: x,\r\n    y: y,\r\n    w: sprites.dimension.ancho,\r\n    h: sprites.dimension.alto\r\n  };   \r\n}\r\n[\/js]\r\n\r\nPor \u00faltimo al dispararse el dibujar, utilizamos el drawImage de canvas, pero con unas cuantas opciones mas para poder dibujar <b>s\u00f3lo<\/b> la \"celda\" del estado y arma que queremos:\r\n\r\nPara informaci\u00f3n sobre el drawImage, est\u00e1 muy bien explicado <a href=\"http:\/\/www.html5canvastutorials.com\/tutorials\/html5-canvas-image-crop\/\">ac\u00e1<\/a>\r\n\r\n[js]\r\nfunction dibujar(){\r\n  \/\/context.drawImage(&lt;Objeto Image&gt;, &lt;X Sprite&gt;, &lt;Y Sprite&gt;, &lt;Ancho Sprite&gt;, &lt;Alto Sprite&gt;, &lt;X en Canvas&gt;, &lt;Y en Canvas&gt;, &lt;Ancho en Canvas&gt;, &lt;Alto en Canvas&gt;);\r\n  contexto.drawImage(imgSprites, pos.x, pos.y, pos.w, pos.h, 0, 0, pos.w, pos.h);\r\n}\r\n[\/js]\r\n\r\n\r\nLes dejo un Fiddle con el resultado (click adentro del fiddle para usar): <a href=\"http:\/\/jsfiddle.net\/pjnovas\/4PvSm\">http:\/\/jsfiddle.net\/pjnovas\/4PvSm<\/a>\r\n\r\n<iframe style=\"width: 100%; height: 300px;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/4PvSm\/embedded\/result,js,html,css\/\" frameborder=\"1\" width=\"320\" height=\"240\"><\/iframe>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Wed, 26 Jun 2013 11:30:25 +0000","created_by":1,"updated_at":"Wed, 26 Jun 2013 11:30:25 +0000","updated_by":1,"published_at":"Wed, 26 Jun 2013 11:30:25 +0000","published_by":1},{"id":3733,"title":"Una intro a GruntJS","slug":"una-intro-a-gruntjs","markdown":"\nLa verdad que lo vengo usando en pr\u00e1cticamente cualquier cosa que hago con javascript, sea solo cliente, server o ambas. As\u00ed que decid\u00ed escribir un post de esta interesante herramienta. [![gruntjs](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/07\/gruntjs1.png)](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/07\/gruntjs1.png)\n\n#### [Grunt JS](http:\/\/gruntjs.com\/)\n\n Es una aplicaci\u00f3n NodeJS, que a trav\u00e9s de un archivo de configuraci\u00f3n (el Gruntfile.js) ejecuta tareas que pueden ir desde copiar archivos, minificar js, correr tests, cobertura de c\u00f3digo, observar cambios tus scripts, etc ... hasta tareas personalizadas que te haces simplemente escribiendo javascript (node js).   \n#### Beneficios\n\n<dl><dt>Acceso a archivos<\/dt><dd>Tiene resulto el sistema de acceso a archivos, solo tenemos que ocuparnos de configurar las rutas y que hacer con los archivos cuando la tarea corre.<\/dd><dt>Automatizaci\u00f3n<\/dt><dd>Podemos dejar un set de tareas configuradas en orden de ejecuci\u00f3n y luego es simplemente correr el comando grunt.<\/dd><dt>F\u00e1cil instalaci\u00f3n<\/dt><dd>Esta en NPM, la instalaci\u00f3n es simplemente un npm install.<\/dd><dt>Plugins comunitarios<\/dt><dd>Como los plugins de jQuery, los hacemos en comunidad, pero los dejamos en NPM, por lo que solo agregando una referencia a nuestro package.json y con un npm install usamos el plugin que necesitamos. Ya tiene una gran cantidad de plugins hechos y hacer los nuestros es muy f\u00e1cil.<\/dd><dt>Multi-plataforma<\/dt><dd>Si bien esto no es un beneficio directo de Grunt, es muy com\u00fan que las cosas que podemos hacer con Grunt las hagamos en un Makefile o un BAT, por eso lo tomo como un beneficio, al correr en node y ser javascript podemos tener nuestro set de tareas funcionando en cualquier sistema operativo.<\/dd><\/dl>#### Instalaci\u00f3n\n\n Como mencion\u00e9 antes, est\u00e1 en NPM. (y necesitamos NodeJS instalado). Primero instalamos el \"cliente\" de Grunt de forma global, es el encargado de fijarse por nosotros que versi\u00f3n de grunt tiene el proyecto en el que lo estamos corriendo: [bash] npm install grunt-cli -g [\/bash] > El par\u00e1metro -g indica que lo instalamos global del usuario actual en el sistema operativo.\n\n Luego instalamos el paquete grunt (el que corre las tareas) en el proyecto de forma local: [bash] npm install grunt --save-dev [\/bash] Le agregamos --save (para que lo inserte en las dependencias del package.json) y -dev para que sea en las **dependencias de desarrollo**, ya que vamos a necesitar grunt en tiempo de dise\u00f1o o desarrollo, no en tiempo de ejecuci\u00f3n de nuestra aplicaci\u00f3n. Si miramos nuestro package.json: [js highlight=\"8\"] { \"name\": \"nombre\", \"version\": \"0.0.1\", \"dependencies\": { }, \"devDependencies\": { \"grunt\": \"~0.4.1\" } } [\/js] #### Creando el Gruntfile\n\n Ahora agregamos un archivo al root, en el mismo lugar que tenemos el package.json con el nombre **Gruntfile.js**: [js title=\"Gruntfile.js\"] module.exports = function(grunt) { \/\/ Aca vamos a armar nuestras tareas }; [\/js] Y que es este archivo?, simplemente un modulo de NodeJS, el cual va a ser llamado por grunt cuando lo ejecutemos pas\u00e1ndonos por par\u00e1metro *grunt* el acceso al paquete para agregar las tareas y configuraciones. Hagamos una prueba de nuestro Gruntfile.js registrando una tarea \"Hola Mundo\": [js title=\"Gruntfile.js\"] module.exports = function(grunt) { grunt.registerTask('default', 'Tarea Hola Mundo', function() { grunt.log.write('Hola Mundo!').ok(); }); }; [\/js] Corremos grunt: [bash] grunt [\/bash] Simple!, registramos una tarea propia que muestre un \"hola mundo\" en la consola. Sin meternos en mucho detalle de como realizar tareas personalizadas (ya que en la mayor\u00eda de los casos vamos a utilizar las creadas por la comunidad), vamos a probar una concatenaci\u00f3n de scripts y su posterior minificacion: GruntJS tiene como plugins b\u00e1sicos los **grunt-contrib-***. Son un set de las tareas mas comunes para un proyecto y cada uno tiene su repositorio en github con documentaci\u00f3n y c\u00f3digo fuente. Para este ejemplo vamos a usar [grunt-contrib-concat](https:\/\/github.com\/gruntjs\/grunt-contrib-concat \"grunt-contrib-concat\") y [grunt-contrib-uglify](https:\/\/github.com\/gruntjs\/grunt-contrib-uglify \"grunt-contrib-uglify\") Primero instalemos los paquetes npm: [bash] npm install grunt-contrib-concat --save-dev npm install grunt-contrib-uglify --save-dev [\/bash] y ahora pongamos nuestra configuracion en el Gruntfile.js: [js title=\"Gruntfile.js\"] module.exports = function(grunt) { \/\/ este m\u00e9todo que nos da Grunt es para pasarle las configuraciones a los paquetes que usemos grunt.initConfig({ concat: { all: { src: \".\/scripts\/**\/*.js\", dest: \".\/distribucion\/todos.js\" }, uglify: { all: { src: \".\/distribucion\/todos.js\", dest: '.\/distribucion\/todos.min.js' } }); \/\/ registramos las tareas (plugins) desde npm en Grunt grunt.loadNpmTasks('grunt-contrib-concat'); grunt.loadNpmTasks('grunt-contrib-uglify'); \/\/ registramos las tareas que se pueden ejecutar y el orden grunt.registerTask(\"default\", [ \"concat\", \"uglify\" ]); grunt.registerTask(\"dist\", [ \"default\" ]); }; [\/js] Y listo, ahora simplemente corremos [bash] grunt [\/bash] o [bash] grunt dist [\/bash] GruntJS tiene mucho mas en cuanto a configuraciones, plugins, etc. Pero meterse de lleno en todo lleva su tiempo y a medida que empiecen a usarlo van a ir descubriendo configuraciones nuevas, plugins y como crear tareas propias. Por ahora con esta intro pueden empezar a probar y les agrego algunos links para ampliar (son en ingl\u00e9s, pero con la base de este post, creo que siguiendo el c\u00f3digo de ejemplo pueden meterse con nuevas tareas y configuraciones). #### Links \u00fatiles\n\n1. [Grunt](http:\/\/gruntjs.com\/)\n2. [Configurando Tareas](http:\/\/gruntjs.com\/configuring-tasks)\n3. [Repositorios de los Grunt-contrib-*](https:\/\/github.com\/gruntjs\/)\n4. [La inmensa lista de plugins](http:\/\/gruntjs.com\/plugins)\n5. [Un proyecto mio con grunt y algunas de las configuraciones comunes](https:\/\/github.com\/pjnovas\/base-client-project)\n\n\n","html":"La verdad que lo vengo usando en pr\u00e1cticamente cualquier cosa que hago con javascript, sea solo cliente, server o ambas. As\u00ed que decid\u00ed escribir un post de esta interesante herramienta.\r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/07\/gruntjs1.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/07\/gruntjs1.png\" alt=\"gruntjs\" width=\"155\" height=\"157\" class=\"alignleft size-full wp-image-3778\" \/><\/a>\r\n\r\n<h4><a href=\"http:\/\/gruntjs.com\/\">Grunt JS<\/a><\/h4>\r\nEs una aplicaci\u00f3n NodeJS, que a trav\u00e9s de un archivo de configuraci\u00f3n (el Gruntfile.js) ejecuta tareas que pueden ir desde copiar archivos, minificar js, correr tests, cobertura de c\u00f3digo, observar cambios tus scripts, etc ... hasta tareas personalizadas que te haces simplemente escribiendo javascript (node js).\r\n\r\n<br\/>\r\n<h4>Beneficios<\/h4>\r\n\r\n<dl>\r\n <dt>Acceso a archivos<\/dt>\r\n <dd>Tiene resulto el sistema de acceso a archivos, solo tenemos que ocuparnos de configurar las rutas y que hacer con los archivos cuando la tarea corre.<\/dd>\r\n <dt>Automatizaci\u00f3n<\/dt>\r\n <dd>Podemos dejar un set de tareas configuradas en orden de ejecuci\u00f3n y luego es simplemente correr el comando grunt.<\/dd>\r\n <dt>F\u00e1cil instalaci\u00f3n<\/dt>\r\n <dd>Esta en NPM, la instalaci\u00f3n es simplemente un npm install.<\/dd>\r\n <dt>Plugins comunitarios<\/dt>\r\n <dd>Como los plugins de jQuery, los hacemos en comunidad, pero los dejamos en NPM, por lo que solo agregando una referencia a nuestro package.json y con un npm install usamos el plugin que necesitamos. Ya tiene una gran cantidad de plugins hechos y hacer los nuestros es muy f\u00e1cil.<\/dd>\r\n <dt>Multi-plataforma<\/dt>\r\n <dd>Si bien esto no es un beneficio directo de Grunt, es muy com\u00fan que las cosas que podemos hacer con Grunt las hagamos en un Makefile o un BAT, por eso lo tomo como un beneficio, al correr en node y ser javascript podemos tener nuestro set de tareas funcionando en cualquier sistema operativo.<\/dd>\r\n<\/dl>\r\n\r\n<h4>Instalaci\u00f3n<\/h4>\r\nComo mencion\u00e9 antes, est\u00e1 en NPM. (y necesitamos NodeJS instalado).\r\n\r\nPrimero instalamos el \"cliente\" de Grunt de forma global, es el encargado de fijarse por nosotros que versi\u00f3n de grunt tiene el proyecto en el que lo estamos corriendo:\r\n\r\n[bash]\r\nnpm install grunt-cli -g\r\n[\/bash]\r\n\r\n<blockquote>\r\nEl par\u00e1metro -g indica que lo instalamos global del usuario actual en el sistema operativo.\r\n<\/blockquote>\r\n\r\nLuego instalamos el paquete grunt (el que corre las tareas) en el proyecto de forma local:\r\n\r\n[bash]\r\nnpm install grunt --save-dev\r\n[\/bash]\r\n\r\nLe agregamos --save (para que lo inserte en las dependencias del package.json) y -dev para que sea en las <b>dependencias de desarrollo<\/b>, ya que vamos a necesitar grunt en tiempo de dise\u00f1o o desarrollo, no en tiempo de ejecuci\u00f3n de nuestra aplicaci\u00f3n.\r\n\r\nSi miramos nuestro package.json:\r\n\r\n[js highlight=\"8\"]\r\n{\r\n  &quot;name&quot;: &quot;nombre&quot;,\r\n  &quot;version&quot;: &quot;0.0.1&quot;,\r\n  &quot;dependencies&quot;: { \r\n\r\n  },\r\n  &quot;devDependencies&quot;: {\r\n    &quot;grunt&quot;: &quot;~0.4.1&quot;\r\n  }\r\n}\r\n[\/js]\r\n\r\n<h4>Creando el Gruntfile<\/h4>\r\nAhora agregamos un archivo al root, en el mismo lugar que tenemos el package.json con el nombre <b>Gruntfile.js<\/b>:\r\n\r\n[js title=\"Gruntfile.js\"]\r\nmodule.exports = function(grunt) {\r\n  \/\/ Aca vamos a armar nuestras tareas\r\n};\r\n[\/js]\r\n\r\nY que es este archivo?, simplemente un modulo de NodeJS, el cual va a ser llamado por grunt cuando lo ejecutemos pas\u00e1ndonos por par\u00e1metro <em>grunt<\/em> el acceso al paquete para agregar las tareas y configuraciones.\r\n\r\nHagamos una prueba de nuestro Gruntfile.js registrando una tarea \"Hola Mundo\":\r\n\r\n[js title=\"Gruntfile.js\"]\r\nmodule.exports = function(grunt) {\r\n\r\n  grunt.registerTask('default', 'Tarea Hola Mundo', function() {\r\n    grunt.log.write('Hola Mundo!').ok();\r\n  });\r\n\r\n};\r\n[\/js]\r\n\r\nCorremos grunt:\r\n[bash]\r\ngrunt\r\n[\/bash]\r\n\r\nSimple!, registramos una tarea propia que muestre un \"hola mundo\" en la consola.\r\n\r\nSin meternos en mucho detalle de como realizar tareas personalizadas (ya que en la mayor\u00eda de los casos vamos a utilizar las creadas por la comunidad), vamos a probar una concatenaci\u00f3n de scripts y su posterior minificacion:\r\n\r\nGruntJS tiene como plugins b\u00e1sicos los <strong>grunt-contrib-*<\/strong>. Son un set de las tareas mas comunes para un proyecto y cada uno tiene su repositorio en github con documentaci\u00f3n y c\u00f3digo fuente. Para este ejemplo vamos a usar <a href=\"https:\/\/github.com\/gruntjs\/grunt-contrib-concat\" title=\"grunt-contrib-concat\">grunt-contrib-concat<\/a> y <a href=\"https:\/\/github.com\/gruntjs\/grunt-contrib-uglify\" title=\"grunt-contrib-uglify\">grunt-contrib-uglify<\/a>\r\n\r\nPrimero instalemos los paquetes npm:\r\n\r\n[bash]\r\nnpm install grunt-contrib-concat --save-dev\r\nnpm install grunt-contrib-uglify --save-dev\r\n[\/bash]\r\n\r\ny ahora pongamos nuestra configuracion en el Gruntfile.js:\r\n\r\n[js title=\"Gruntfile.js\"]\r\nmodule.exports = function(grunt) {\r\n  \/\/ este m\u00e9todo que nos da Grunt es para pasarle las configuraciones a los paquetes que usemos\r\n  grunt.initConfig({\r\n    concat: {\r\n      all: {\r\n        src: &quot;.\/scripts\/**\/*.js&quot;,\r\n        dest: &quot;.\/distribucion\/todos.js&quot;\r\n      },\r\n    uglify: {\r\n      all: {\r\n        src: &quot;.\/distribucion\/todos.js&quot;,\r\n        dest: '.\/distribucion\/todos.min.js'\r\n      }\r\n  });\r\n\r\n  \/\/ registramos las tareas (plugins) desde npm en Grunt\r\n  grunt.loadNpmTasks('grunt-contrib-concat');\r\n  grunt.loadNpmTasks('grunt-contrib-uglify');\r\n\r\n  \/\/ registramos las tareas que se pueden ejecutar y el orden\r\n  grunt.registerTask(&quot;default&quot;, [ &quot;concat&quot;, &quot;uglify&quot; ]);\r\n  grunt.registerTask(&quot;dist&quot;, [ &quot;default&quot; ]);\r\n};\r\n[\/js]\r\n\r\nY listo, ahora simplemente corremos\r\n[bash]\r\ngrunt\r\n[\/bash]\r\n\r\no \r\n\r\n[bash]\r\ngrunt dist\r\n[\/bash]\r\n\r\nGruntJS tiene mucho mas en cuanto a configuraciones, plugins, etc. Pero meterse de lleno en todo lleva su tiempo y a medida que empiecen a usarlo van a ir descubriendo configuraciones nuevas, plugins y como crear tareas propias. Por ahora con esta intro pueden empezar a probar y les agrego algunos links para ampliar (son en ingl\u00e9s, pero con la base de este post, creo que siguiendo el c\u00f3digo de ejemplo pueden meterse con nuevas tareas y configuraciones).\r\n\r\n<h4>Links \u00fatiles<\/h4>\r\n<ol>\r\n<li><a href=\"http:\/\/gruntjs.com\/\">Grunt<\/a><\/li>\r\n<li><a href=\"http:\/\/gruntjs.com\/configuring-tasks\">Configurando Tareas<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/gruntjs\/\">Repositorios de los Grunt-contrib-*<\/a><\/li>\r\n<li><a href=\"http:\/\/gruntjs.com\/plugins\">La inmensa lista de plugins<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/pjnovas\/base-client-project\">Un proyecto mio con grunt y algunas de las configuraciones comunes<\/a><\/li>\r\n<\/ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Fri, 19 Jul 2013 13:15:05 +0000","created_by":1,"updated_at":"Mon, 13 Jan 2014 11:49:44 +0000","updated_by":1,"published_at":"Fri, 19 Jul 2013 13:15:05 +0000","published_by":1},{"id":3819,"title":"Introducci\u00f3n a Expresiones Regulares","slug":"introduccion-a-expresiones-regulares","markdown":"\nEl buen manejo de expresiones regulares es, posiblemente, uno de los recursos m\u00e1s poderosos que tenemos en muchos lenguajes de programaci\u00f3n y Javascript posee un muy buen soporte de las mismas. Sin embargo existe un gran misticismo en cuanto a su uso. En esta gu\u00eda, voy a intentar explicar el funcionamiento de las expresiones regulares mediante un simple ejemplo.\n\n<aside>**Nota:** A lo largo del articulo, *\"Expresion regular\"* y *\"regex\"* (REgular EXpresion) se refieren a la misma cosa.Javascript posee soporte *nativo* de **expresiones regulares** proveyendo un constructor para crear objetos que las representen e incluso distintos m\u00e9todos, normalmente en objetos del tipo String, para usarlas.\n\nA fin de poder probar lo que vamos a ver, primero tenemos que saber como usar expresiones regulares en JS.\n\nEn principio, en JS, las regex son un tipo de objeto m\u00e1s, que podemos declararlos de forma literal \u00f3 mediante un constructor:\n\n [js] var miRegEx1 = new RegExp(\"[a-z]\", \"i\") var miRegEx2 = \/[a-z]\/i [\/js] En terminos pr\u00e1cticos, *miRegEx1* y *miRegEx2* representan a la misma expresi\u00f3n regular. El primer argumento de *RegExp()* son las reglas que tendr\u00e1 y la segunda los *modificadores*. Para poder usarlas, debemos aplicarla a alguna funci\u00f3n o m\u00e9todo que las acepte. Javascript, trae de fabrica 2 m\u00e9todos en objetos RegExp y 2 en String.\n\n [js] var miRegEx = \/[a-z]\/i var miString = \"Hola a todos\" miRegEx.exec(miString); \/\/ Ejecuta la expresi\u00f3n regular contra el String. Devuelve un Array con la informaci\u00f3n que extrae. miRegEx.test(miString); \/\/ Prueba la expresi\u00f3n regular contra el String. Devuelve <i>true<\/i> o <i>false<\/i>. miString.match(miRegEx); \/\/ Ejecuta la expresi\u00f3n regular contra el String. Devuelve un Array con la informaci\u00f3n que extrae. miString.search(miRegEx); \/\/ Busca en el String el patr\u00f3n definido por la expresi\u00f3n regular. Devuelve la pocisi\u00f3n en el String donde la encuentra o -1 en caso de fallo. miString.replace(miRegEx, \"otro string\"); \/\/ Reemplaza las ocurrencias de la expresi\u00f3n regular en el String con el segundo parametro. miString.split(miRegEx); \/\/ Convierte un String en un array separandolo. [\/js] Si vemos una expresi\u00f3n regular, como por ejemplo:\n\n [js] \/[\\w.]+@\\w+\\.\\w{3}(\\.\\w{2})?\/ [\/js] seguramente no sepamos que significa y hasta puede que espante un poco.  \n Sin embargo, conociendo las reglas b\u00e1sicas para la creaci\u00f3n de regexs vamos a ver que en realidad esto no es tan dificil.\n\nComo armar una expresi\u00f3n regular\n--------------------------------\n\nComo ya mencione, la teor\u00eda de expresiones regulares, es agn\u00f3stica al lenguaje y\/o la tecnolog\u00eda que estemos usando.  \n Javascript (al igual que muchos, de hecho) implementa las regex bas\u00e1ndose en Perl 5, por lo que recomiendo leer la excelente documentaci\u00f3n de este lenguaje sobre el tema.\n\nSin entrar en muchos detalles, podemos modelar las expresiones regulares, de una forma un poco m\u00e1s *visual* haciendo uso de una [maquinas de estados finitos](http:\/\/es.wikipedia.org\/wiki\/M%C3%A1quina_de_estados). Esto nos ayudara a comprender el trabajo que hace el interprete de javascript para poder saber si un determinado texto se ajusta a las *reglas* que definimos en nuestra regex.\n\nSupongamos que queremos detectar los correos electr\u00f3nicos que aparecen en un determinado texto.  \n Una forma de encarar este problema, es comenzando por detectar algo muy especifico y luego hacerlo m\u00e1s general.\n\n Empezamos definiendo nuestra regex como: [js] \/tehsis@yimeil\\.com\/ [\/js] <aside>**Aclaraci\u00f3n:** El *punto*, lo *escapamos* para que la regex espere, valga la redundancia, un punto. Ya que este car\u00e1cter tiene un significado especial dentro de las expresiones regulares.<\/aside>Simple, \u00bfNo?.\n\nAl ejecutar esta expresi\u00f3n contra nuestro texto, el interprete comenzara intentando leer una \"t\". Cuando la encuentre, esperara una \"e\", luego una \"h\" y as\u00ed hasta llegar a la \"m\", en cuyo caso dara el texto como aceptado. En cualquier caso, si el car\u00e1cter a testear no es el esperado, volver\u00e1 a su estado inicial y avanzara un caracter dentro del texto para tomarlo como estado inicial. Vi\u00e9ndolo en un diagrama de estados finitos:\n\n![Maquina de estados finitos](http:\/\/tehsis.com.ar\/regex1.png)Aunque sea solo un \"juguete\" esta expresi\u00f3n regular, bastante directa y clara, nos sirve para comprender lo b\u00e1sico:\n\n**Una expresi\u00f3n regular, se forma por una sucesi\u00f3n de reglas que determinan, *paso a paso* lo que se busca en un texto.**### Clases\n\nPero lo que nosotros queremos, es poder identificar *cualquier* direcci\u00f3n de correo electr\u00f3nico y para eso necesitamos reglas un poco m\u00e1s gen\u00e9ricas.  \n Podr\u00edamos, entonces, esperar cualquier letra antes del arroba y despu\u00e9s del mismo. Esto lo hacemos mediante *clases*. Las clases, son un conjunto de caracteres que ponemos entre corchete (Ej: [abc]). Esta clase, identifica un *\u00fanico todos los caracteres de la A a la Z dentro de los corchetes para decir que queremos cualquier letra del abcdario. Por suerte, las clases permiten usar *rangos*: [a-z], [1-9], etc.  \n M\u00f3dificamos, entonces nuestra expresi\u00f3n regular original, para que acepte cualquier caracter del alfabeto antes del @, despues y luego del punto:*\n\n [js] \/[a-z]@[a-z]\\.[a-z]\/ [\/js] Esta expresi\u00f3n regular, sin embargo, lo que buscar\u00e1 sera: *Un* caracter de la \"a\" a la \"z\". Si queremos que busque 2, podemos poner [a-z][a-z] y si queremos tres [a-z][a-z][a-z], y as\u00ed. Como era de esperarse, tenemos algunas herramientas para manejar repeticiones de formas m\u00e1s elegantes. Una de ellas, es \"+\" que quiere decir \"Esper\u00e1 una \u00f3 m\u00e1s ocurrencias de esta *unidad*\" (hablamos de *unidad* y no de caracter ya que se puede aplicar a clases, agrupaciones, etc).\n\n [js] \/[a-z]+@[a-z]+\\.[a-z]+\/ [\/js] Nuestra expresi\u00f3n regular ya no parece tan simple como al principio, pero el funcionamiento es el mismo. Debemos tener en cuenta los caracteres especiales, en este caso los corchetes que indican \"clases\".\n\nSin embargo, esta expresi\u00f3n regular es incompleta. En primer lugar, solo sirve para direcciones de correo que solo tengan caracteres en min\u00fasculas (a no ser que usemos *modificadores<\/em) tampoco identificar\u00eda direcciones de correo con n\u00fameros, caracteres especiales como \"_\" o \".\" y ademas, no soportar\u00eda otros niveles de dominio (tehsis@yimail.com.ar no seria soportado)  \n Para solucionar lo primero, podemos hacer uso de otro \"car\u00e1cter especial\", **\"\\w\"** el cual buscara todos los caracteres alfanum\u00e9ricos. Nuestra expresi\u00f3n regular ahora tiene la forma \/\\w+@\\w+\\.\\w+\/ Esto ya empieza a asustar, pero conociendo el significado de cada car\u00e1cter y teniendo en cuenta lo que explique m\u00e1s arriba sobre el funcionamiento, podemos analizarla y entender como funciona. Para incluir el punto, podemos volver a utilizar clases como hab\u00edamos hecho anteriormente: \/[\\w.]+@\\w+\\.\\w+\/ Hay que notar, que dentro del corchete, el punto es simplemente un punto y no necesitamos escaparlo.*\n\nExisten muchos otros caracteres especiales que podr\u00edamos usar, pero para conocerlos recomiendo tener alguna referencia[https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Guide\/Regular_Expressions#Using_Special_Characters] ya que no tiene sentido enumerarlos a todos ac\u00e1.\n\nPor \u00faltimo, nos queda solucionar el problema de los distintos niveles de dominio.  \n Solo para fines pr\u00e1cticos, vamos a suponer que las direcciones de correo que queremos identificar poseen un dominio y luego dos dominios de nivel separados por puntos, el primero de tres letras y el segundo de dos (Ej: yimail.com.ar)\n\n### Repeticiones\n\nYa vimos un car\u00e1cter especial para repeticiones (el +), pero en total podr\u00edamos nombrar:\n\n- **+** Una o m\u00e1s unidades. (Ej: \/a1+\/: a1, a11, a1111, a1111111, etc. Notar que el 1 debe estar al menos una vez.)\n- ***** Cero o m\u00e1s unidades. (Ej: \/a1*\/: a, a11, a1111, a1111111. etc. Notar que el 1 puede estar o no.)\n- \"?\" para caracteres que pueden estar o no estar (1 \u00f3 ninguno) (Ej: \/a1?\/: a, a1).\n\nPero \u00bfQue pasa en nuestro caso que necesitamos identificar dos palabras separadas por \".\" una de tres letras y la otra de dos?  \n Para esto, vamos a ver otro par de caracteres especiales, muy importantes, las llaves \"{..}\".\n\nPodemos usarlas de la siguiente forma:\n\n- **{n}** Identifica n ocurrencias\n- **{n, m}** Identifica al menos n ocurrencias y no m\u00e1s que m.\n\nNuestra regex sera ahora:\n\n [js] \/[\\w.]+@\\w+\\.\\w{3}\\.\\w{2}\/ [\/js] ### Agrupaciones\n\nAhora podemos identificar \"tehsis@yimail.com.ar\" pero no \"tehsis@gmail.com\", para poder contemplar casos como el segundo, vamos a usar el caracter especial \"?\" agrupando la \u00faltima parte de nuestra regla con parentesis:\n\n [js] \/[\\w.]+@\\w+\\.\\w{3}(\\.\\w{2})?\/ [\/js] Los par\u00e9ntesis cumplen una doble funci\u00f3n. Por un lado, nos permiten agrupar reglas para tratarlas como si fuesen una unidad y ademas **capturar** estos grupos (si vemos el array devuelto por \"match\" ademas del string identificado, vamos a ver que tenemos tambi\u00e9n los strings identificados por las agrupaciones).  \n B\u00e1sicamente lo que estamos diciendo es que \"un punto seguido de dos caracteres, solo puede aparecer una vez\". Y con esto, terminamos lo b\u00e1sico de expresiones regulares.Antes de despedirnos, algunas aclaraciones:1. Por supuesto que esto no termina ac\u00e1. Hay muchas cosas que quedaron afuera, empezando por los caracteres especiales que no vimos, hasta algunos modificadores que permiten que la expresi\u00f3n regular se comporte de otra forma. La idea de esta gu\u00eda es ver lo b\u00e1sico para poder entender y armar nuestras propias expresiones regulares, pero para usarlas a pleno hay que ir un poco m\u00e1s alla. Para m\u00e1s informaci\u00f3n, recomiendo leer: https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Guide\/Regular_Expressions Y ademas: http:\/\/perldoc.perl.org\/perlretut.html que s\u00ed bien esta orientado a Perl, la teoria es exactamente la misma (sobre todo porque Ecmascript usa las mismas reglas de Perl)\n2. El ejemplo visto, es solo un ejemplo y seguramente no contempla muchos casos reales en cuanto a las reglas de como debe estar formada una direcci\u00f3n de correo electronico.\n3. Armar correctamente una expresi\u00f3n regular, puede ser complejo y propenso a errores, por lo que recomiendo que intentes armarla por tu cuenta solo en casos excepcionales. Para estructuras conocidas (URLs, fechas, telefonos, etc) recomiendo googlear un poco y agarrar algo ya hecho y testeado.\n\n<\/aside>\n","html":"<p>El buen manejo de expresiones regulares es, posiblemente, uno de los recursos m\u00e1s\r\npoderosos que tenemos en muchos lenguajes de programaci\u00f3n y Javascript posee un muy buen soporte de las mismas.\r\nSin embargo existe un gran misticismo en cuanto a su uso.\r\nEn esta gu\u00eda, voy a intentar explicar el funcionamiento de las expresiones regulares mediante un simple ejemplo.<\/p>\r\n\r\n<aside><strong>Nota:<\/strong> A lo largo del articulo, <em>\"Expresion regular\"<\/em> y <em>\"regex\"<\/em> (REgular EXpresion) se refieren a la misma cosa.<\/em>\r\n\r\n<p>Javascript posee soporte <em>nativo<\/em> de <strong>expresiones\r\nregulares<\/strong> proveyendo un constructor para crear objetos que las\r\nrepresenten e incluso distintos m\u00e9todos, normalmente en objetos del tipo String, para usarlas.<\/p>\r\n\r\n<p>A fin de poder probar lo que vamos a ver, primero tenemos que saber como usar expresiones regulares en JS.<\/p>\r\n\r\n<p>En principio, en JS, las regex son un tipo de objeto m\u00e1s, que podemos declararlos de forma literal \u00f3 mediante un constructor:<\/p>\r\n\r\n[js]\r\nvar miRegEx1 = new RegExp(&quot;[a-z]&quot;, &quot;i&quot;)\r\nvar miRegEx2 = \/[a-z]\/i\r\n[\/js]\r\n\r\n<p>En terminos pr\u00e1cticos, <em>miRegEx1<\/em> y <em>miRegEx2<\/em> representan a la misma expresi\u00f3n regular. El primer argumento de <em>RegExp()<\/em> son las reglas que tendr\u00e1 y la segunda los <i>modificadores<\/i>.\r\nPara poder usarlas, debemos aplicarla a alguna funci\u00f3n o m\u00e9todo que las acepte.\r\nJavascript, trae de fabrica 2 m\u00e9todos en objetos RegExp y 2 en String.<\/p>\r\n\r\n[js]\r\nvar miRegEx = \/[a-z]\/i\r\nvar miString = &quot;Hola a todos&quot;\r\n\r\nmiRegEx.exec(miString); \/\/ Ejecuta la expresi\u00f3n regular contra el String. Devuelve un Array con la informaci\u00f3n que extrae.\r\nmiRegEx.test(miString); \/\/ Prueba la expresi\u00f3n regular contra el String. Devuelve &lt;i&gt;true&lt;\/i&gt; o &lt;i&gt;false&lt;\/i&gt;.\r\n\r\nmiString.match(miRegEx); \/\/ Ejecuta la expresi\u00f3n regular contra el String. Devuelve un Array con la informaci\u00f3n que extrae.\r\nmiString.search(miRegEx); \/\/ Busca en el String el patr\u00f3n definido por la expresi\u00f3n regular. Devuelve la pocisi\u00f3n en el String donde la encuentra o -1 en caso de fallo.\r\nmiString.replace(miRegEx, &quot;otro string&quot;); \/\/ Reemplaza las ocurrencias de la expresi\u00f3n regular en el String con el segundo parametro.\r\nmiString.split(miRegEx); \/\/ Convierte un String en un array separandolo.\r\n[\/js]\r\n\r\n<p>Si vemos una expresi\u00f3n regular, como por ejemplo:<\/p>\r\n\r\n[js]\r\n\/[\\w.]+@\\w+\\.\\w{3}(\\.\\w{2})?\/ \r\n[\/js]\r\n\r\n<p>seguramente no sepamos que significa y hasta puede que espante un poco.<br \/>\r\nSin embargo, conociendo las reglas b\u00e1sicas para la creaci\u00f3n de regexs vamos a ver que en realidad esto no es tan dificil.<\/p>\r\n\r\n<h2>Como armar una expresi\u00f3n regular<\/h2>\r\n<p>Como ya mencione, la teor\u00eda de expresiones regulares, es agn\u00f3stica al lenguaje\r\ny\/o la tecnolog\u00eda que estemos usando.<br \/>\r\nJavascript (al igual que muchos, de hecho) implementa las regex bas\u00e1ndose en Perl 5, por lo que\r\nrecomiendo leer la excelente documentaci\u00f3n de este lenguaje sobre el tema.<\/p>\r\n\r\n<p>Sin entrar en muchos detalles, podemos modelar las expresiones regulares, de una\r\nforma un poco m\u00e1s <em>visual<\/em> haciendo uso de una <a href=\"http:\/\/es.wikipedia.org\/wiki\/M%C3%A1quina_de_estados\">maquinas de estados finitos<\/a>.\r\nEsto nos ayudara a comprender el trabajo que hace el interprete de javascript\r\npara poder saber si un determinado texto se ajusta a las <em>reglas<\/em> que\r\ndefinimos en nuestra regex.<\/p>\r\n\r\n<p>Supongamos que queremos detectar los correos electr\u00f3nicos que aparecen en un\r\ndeterminado texto.<br\/>\r\nUna forma de encarar este problema, es comenzando por detectar algo muy\r\nespecifico y luego hacerlo m\u00e1s general.<\/p>\r\n\r\nEmpezamos definiendo nuestra regex como:\r\n\r\n[js]\r\n\/tehsis@yimeil\\.com\/\r\n[\/js]\r\n\r\n<aside><strong>Aclaraci\u00f3n:<\/strong> El <i>punto<\/i>, lo <em>escapamos<\/em> para que la regex espere, valga la redundancia, un punto. Ya que este car\u00e1cter tiene un significado especial dentro de las expresiones regulares.<\/aside>\r\n\r\n<p>Simple, \u00bfNo?.<\/p>\r\n\r\n<p>Al ejecutar esta expresi\u00f3n contra nuestro texto, el interprete comenzara intentando leer una \"t\". Cuando la encuentre, esperara una\r\n\"e\", luego una \"h\" y as\u00ed hasta llegar a la \"m\", en cuyo caso dara el texto como\r\naceptado. En cualquier caso, si el car\u00e1cter a testear no es el esperado, volver\u00e1 a su estado inicial y avanzara un caracter dentro del texto para tomarlo como estado inicial.\r\nVi\u00e9ndolo en un diagrama de estados finitos:<\/p>\r\n\r\n<img src=\"http:\/\/tehsis.com.ar\/regex1.png\" alt=\"Maquina de estados finitos\" \/>\r\n\r\n<p>Aunque sea solo un \"juguete\" esta expresi\u00f3n regular, bastante directa y clara,\r\nnos sirve para comprender lo b\u00e1sico:<\/p>\r\n<strong>Una expresi\u00f3n regular, se forma por una sucesi\u00f3n de reglas que determinan, <em>paso a paso<\/em> lo que se busca\r\nen un texto.<\/strong>\r\n\r\n<h3>Clases<\/h3>\r\n<\/p>Pero lo que nosotros queremos, es poder identificar <em>cualquier<\/em> direcci\u00f3n\r\nde correo electr\u00f3nico y para eso necesitamos reglas un poco m\u00e1s gen\u00e9ricas.<br \/>\r\nPodr\u00edamos, entonces, esperar cualquier letra antes del arroba y despu\u00e9s del\r\nmismo. Esto lo hacemos mediante <em>clases<\/em>. Las clases, son un conjunto de caracteres que\r\nponemos entre corchete (Ej: [abc]).\r\n\r\n<p>Esta clase, identifica un <em>\u00fanico todos los caracteres de la A a la Z dentro de los corchetes para decir que\r\nqueremos cualquier letra del abcdario. Por suerte, las clases permiten\r\nusar <em>rangos<\/em>: [a-z], [1-9], etc.<br \/>\r\nM\u00f3dificamos, entonces nuestra expresi\u00f3n regular original, para que acepte\r\ncualquier caracter del alfabeto antes del @, despues y luego del punto:<\/em><\/p>\r\n\r\n[js]\r\n\/[a-z]@[a-z]\\.[a-z]\/\r\n[\/js]\r\n\r\n<p>Esta expresi\u00f3n regular, sin embargo, lo que buscar\u00e1 sera: <em>Un<\/em> caracter de la\r\n\"a\" a la \"z\". Si queremos que busque 2, podemos poner [a-z][a-z] y si queremos\r\ntres [a-z][a-z][a-z], y as\u00ed.\r\nComo era de esperarse, tenemos algunas herramientas para manejar repeticiones de formas m\u00e1s\r\nelegantes. Una de ellas, es \"+\" que quiere decir \"Esper\u00e1 una \u00f3 m\u00e1s ocurrencias de\r\nesta <em>unidad<\/em>\" (hablamos de <em>unidad<\/em> y no de caracter ya que se\r\npuede aplicar a clases, agrupaciones, etc).<\/p>\r\n\r\n[js]\r\n\/[a-z]+@[a-z]+\\.[a-z]+\/\r\n[\/js]\r\n\r\n<p>Nuestra expresi\u00f3n regular ya no parece tan simple como al principio, pero el\r\nfuncionamiento es el mismo. Debemos tener en cuenta los caracteres especiales, en este caso los corchetes que indican \"clases\".<\/p>\r\n<p>Sin embargo, esta expresi\u00f3n regular es incompleta. En primer lugar, solo sirve para direcciones de correo que solo tengan caracteres en min\u00fasculas (a no ser que usemos <em>modificadores&lt;\/em) tampoco identificar\u00eda direcciones de correo con n\u00fameros, caracteres especiales como &quot;_&quot; o &quot;.&quot; y ademas, no soportar\u00eda otros niveles de dominio (tehsis@yimail.com.ar no seria soportado)<br \/>\r\nPara solucionar lo primero, podemos hacer uso de otro \"car\u00e1cter especial\", <strong>\"\\w\"<\/strong> el cual buscara todos los caracteres alfanum\u00e9ricos.\r\nNuestra expresi\u00f3n regular ahora tiene la forma\r\n\/\\w+@\\w+\\.\\w+\/\r\nEsto ya empieza a asustar, pero conociendo el significado de cada car\u00e1cter y teniendo en cuenta lo que explique m\u00e1s arriba sobre el funcionamiento, podemos analizarla y entender como funciona.\r\nPara incluir el punto, podemos volver a utilizar clases como hab\u00edamos hecho anteriormente:\r\n\/[\\w.]+@\\w+\\.\\w+\/\r\nHay que notar, que dentro del corchete, el punto es simplemente un punto y no necesitamos escaparlo.<\/p>\r\n\r\n<p>Existen muchos otros caracteres especiales que podr\u00edamos usar, pero para conocerlos recomiendo tener alguna referencia[https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Guide\/Regular_Expressions#Using_Special_Characters] ya que no tiene sentido enumerarlos a todos ac\u00e1.<\/p>\r\n<p>Por \u00faltimo, nos queda solucionar el problema de los distintos niveles de dominio.<br \/>\r\nSolo para fines pr\u00e1cticos, vamos a suponer que las direcciones de correo que queremos identificar poseen un dominio y luego dos dominios de nivel separados por puntos, el primero de tres letras y el segundo de dos (Ej: yimail.com.ar)<\/p>\r\n\r\n<h3>Repeticiones<\/h3>\r\n\r\n<p>Ya vimos un car\u00e1cter especial para repeticiones (el +), pero en total podr\u00edamos nombrar:<\/p>\r\n\r\n<ul>\r\n  <li><strong>+<\/strong> Una o m\u00e1s unidades. (Ej: \/a1+\/: a1, a11, a1111, a1111111, etc. Notar que el 1 debe estar al menos una vez.)<\/li>\r\n  <li><strong>*<\/strong> Cero o m\u00e1s unidades. (Ej: \/a1*\/: a, a11, a1111, a1111111. etc. Notar que el 1 puede estar o no.) <\/li> \r\n  <li>\"?\" para caracteres que pueden estar o no estar (1 \u00f3 ninguno) (Ej: \/a1?\/: a, a1).<\/li>\r\n<\/ul>\r\n\r\n<p>Pero \u00bfQue pasa en nuestro caso que necesitamos identificar dos palabras separadas por \".\" una de tres letras y la otra de dos?<br \/>\r\nPara esto, vamos a ver otro par de caracteres especiales, muy importantes, las llaves \"{..}\".<\/p>\r\n\r\n<p>Podemos usarlas de la siguiente forma:<\/p>\r\n\r\n<ul>\r\n<li><strong>{n}<\/strong> Identifica n ocurrencias<\/li>\r\n<li><strong>{n, m}<\/strong> Identifica al menos n ocurrencias y no m\u00e1s que m.<\/li>\r\n<\/ul>\r\n\r\n<p>Nuestra regex sera ahora:<\/p>\r\n\r\n[js]\r\n\/[\\w.]+@\\w+\\.\\w{3}\\.\\w{2}\/\r\n[\/js]\r\n\r\n<h3>Agrupaciones<\/h3>\r\n\r\n<p>Ahora podemos identificar \"tehsis@yimail.com.ar\" pero no \"tehsis@gmail.com\", para poder contemplar casos como el segundo, vamos a usar el caracter especial \"?\" agrupando la \u00faltima parte de nuestra regla con parentesis:<\/p>\r\n\r\n[js]\r\n\/[\\w.]+@\\w+\\.\\w{3}(\\.\\w{2})?\/\r\n[\/js]\r\n\r\n<\/p>Los par\u00e9ntesis cumplen una doble funci\u00f3n. Por un lado, nos permiten agrupar reglas para tratarlas como si fuesen una unidad y ademas <strong>capturar<\/strong> estos grupos (si vemos el array devuelto por \"match\" ademas del string identificado, vamos a ver que tenemos tambi\u00e9n los strings identificados por las agrupaciones).<br \/>\r\nB\u00e1sicamente lo que estamos diciendo es que \"un punto seguido de dos caracteres, solo puede aparecer una vez\".\r\nY con esto, terminamos lo b\u00e1sico de expresiones regulares.<\/p>\r\n\r\n<\/p>Antes de despedirnos, algunas aclaraciones:<\/p>\r\n\r\n<ol>\r\n<li> Por supuesto que esto no termina ac\u00e1. Hay muchas cosas que quedaron afuera, empezando por los caracteres especiales que no vimos, hasta algunos modificadores que permiten que la expresi\u00f3n regular se comporte de otra forma. La idea de esta gu\u00eda es ver lo b\u00e1sico para poder entender y armar nuestras propias expresiones regulares, pero para usarlas a pleno hay que ir un poco m\u00e1s alla.\r\nPara m\u00e1s informaci\u00f3n, recomiendo leer: https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Guide\/Regular_Expressions\r\nY ademas: http:\/\/perldoc.perl.org\/perlretut.html que s\u00ed bien esta orientado a Perl, la teoria es exactamente la misma (sobre todo porque Ecmascript usa las mismas reglas de Perl)<\/li>\r\n<li>El ejemplo visto, es solo un ejemplo y seguramente no contempla muchos casos reales en cuanto a las reglas de como debe estar formada una direcci\u00f3n de correo electronico.<\/li>\r\n<li>Armar correctamente una expresi\u00f3n regular, puede ser complejo y propenso a errores, por lo que recomiendo que intentes armarla por tu cuenta solo en casos excepcionales. Para estructuras conocidas (URLs, fechas, telefonos, etc) recomiendo googlear un poco y agarrar algo ya hecho y testeado.<\/li>\r\n<\/ol>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":75,"created_at":"Tue, 23 Jul 2013 15:18:16 +0000","created_by":1,"updated_at":"Tue, 23 Jul 2013 15:18:16 +0000","updated_by":1,"published_at":"Tue, 23 Jul 2013 15:18:16 +0000","published_by":1},{"id":3852,"title":"Backbone JS","slug":"backbone-js","markdown":"\n\u00daltimamente lo vengo utilizando mucho y como me tiraron varias veces la pregunta \"que es backbone?\" armo este post para dar una idea de lo que es y sus principales caracter\u00edsticas. [Backbone](http:\/\/backbonejs.org) (columna vertebral en espa\u00f1ol) intenta darnos una estructura para nuestra aplicaci\u00f3n cliente. La idea es b\u00e1sicamente pensar en Modelos, Colecciones (de modelos) y Vistas. Como agregado a estos tambi\u00e9n tenemos Eventos (para la comunicaci\u00f3n entre estas capas) y ya enganchado adentro de los Modelos y Colecciones m\u00e9todos para utilizar servicios JSON Restfull mediante AJAX. En este post voy a mostrar Modelo y Colecci\u00f3n, con sus eventos y persistencia en el server. Dicho esto, veamos una imagen para hacerlo un poco mas claro: [![backbone_map](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/09\/backbone_map.png)](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/09\/backbone_map.png)\n\n### Modelo (Backbone.Model)\n\n Es el dominio de tu aplicaci\u00f3n, la idea es que ah\u00ed guardes los estados de tus Entidades, con sus m\u00e9todos y tambi\u00e9n puede llegar a acceder al server mediante AJAX ya sea para un DELETE (eliminar), PUT (actualizar) o un POST (crear). [js] \/\/ Definimos un modelo Persona, extendiendo de la clase Backbone.Model. var Persona = Backbone.Model.extend({ \/\/ valores predeterminados nuestro modelo. defaults: { nombre: \"Sin Nombre\", edad: 30 }, initialize: function(modelo, opciones){ \/\/ constructor }, parse: function(response){ \/\/ sobre-escribimos la respuesta del server \/\/ por si necesitamos hacer algo antes de que se cree el modelo \/\/ por ejemplo: response.edadLoca = response.edad * 5; \/\/esto nos va a dejar hacer modelo.get('edadLoca') return response; }, calcularAlgo: function(){ \/\/ m\u00e9todo de instancia \/\/ this se bindea con la instancia \/\/ por ejemplo: this.defaults } }, { calcularAlgoEstatico: function(){ \/\/ m\u00e9todo est\u00e1tico } }); \/\/ Ahora creemos una instancia del modelo: var pablito = new Persona({ nombre: \"Pablo\", edad: 500 \/\/ si, soy muy anciano }); pablito.calcularAlgo(); Persona.calcularAlgoEstatico(); [\/js] #### Propiedades y Eventos de un Modelo\n\n En un modelo de Backbone las propiedades de instancia se guardan todas adentro de \"attributes\". Y a diferencia de lo que estamos acostubrados en js, por ejemplo un json, se acceden por 2 m\u00e9todos *get* y *set*: [js] var nombre = pablito.get('nombre'); \/\/ \"Pablo\" pablito.set('nombre', \"Pablo2\"); \/\/ Tambi\u00e9n podemos pasar un JSON y aplicar varios: pablito.set({ nombre: \"Pablo3\", edad: 300 }); \/\/ Podemos ver los cambios en console.dir(pablito.attributes); [\/js] Cuando realizamos un *set* se dispara un evento \"change\", podemos escuchar los eventos del modelo con el m\u00e9todo **on**: [js] pablito.on('change', function(){ \/\/ alguna propiedad cambi\u00f3 }); pablito.on('change:edad', function(){ \/\/ la edad se modific\u00f3 }); \/\/ eliminamos todos los manejadores del evento pablito.off('change'); pablito.off('change:edad'); [\/js] ### Colecci\u00f3n (Backbone.Collection)\n\n Tambi\u00e9n es parte de tu dominio, est\u00e1n pensadas como colecciones de modelos. Aparte de esto, tiene muchas utilidades mas, como centralizar m\u00e9todos al servidor, ordenar los modelos, eventos, etc. [js] \/\/ Definimos una colecci\u00f3n de Personas, extendiendo de la clase Backbone.Collection. var Personas = Backbone.Collection.extend({ \/\/ Definimos cual es el modelo de esta colecci\u00f3n. model: Persona, \/\/ Definimos la url base RESTfull de para esta colecci\u00f3n. url: '\/personas', initialize: function(arrayDeModelo, opciones){ \/\/ constructor de la colecci\u00f3n }, parse: function(response){ \/\/ lo mismo que en el modelo, con la diferencia \/\/ que response va a ser un array en vez de un objeto return response; } }); \/\/ Ahora creemos una instancia de la colecci\u00f3n: var personas = new Personas([{ id: 1234, nombre: \"jose\", edad: 20 }, { id: 1235, nombre: \"pepe\", edad: 40 }]); \/\/ autom\u00e1ticamente tenemos en la colecci\u00f3n los modelos listos para usar \/\/ podemos ir por indic\u00e9 personas.at(0).get('nombre'); \/\/ \"jose\" \/\/ o por id personas.get(1235).get('nombre'); \/\/ \"pepe\" [\/js] #### Modificando una Colecci\u00f3n\n\n Ya vimos como crear una colecci\u00f3n pasandole modelos, ahora veamos como agregar y eliminar modelos. [js] \/\/ tememos una persona en json var personaJSON = { id: 1236, nombre: \"juan\", edad: 25 }; \/\/ Podemos agregarla directamente a la colecci\u00f3n personas.add(personaJSON); personas.get(1236).get('nombre'); \/\/ \"juan\" \/\/ o bien podemos agregar un modelo de la misma manera var juan = new Persona(personaJSON); personas.add(juan); personas.get(1236).get('nombre'); \/\/ \"juan\" \/\/ para eliminar a juan de la colecci\u00f3n: var personaJuan = personas.get(12346); personas.remove(personaJuan); \/\/ tambi\u00e9n podemos limpiar una colecci\u00f3n personas.reset(); \/\/ personas.length === 0 [\/js] En Backbone ya tenemos por defecto dentro de una coleccion todos las funciones (creo que todas) de [UnderscoreJS](http:\/\/underscorejs.org). Lo que significa que podemos usar, por ejemplo el each: [js] \/\/con underscore y un array har\u00edas algo como _.each(personas, function (persona) { }); \/\/ en backbone ya lo tenemos disponible desde la colecci\u00f3n: personas.each(function(persona){ }); [\/js] #### Eventos de una Colecci\u00f3n\n\n As\u00ed como los modelos tienen eventos de cambio (change), la colecci\u00f3n nos agrega algunos mas De la misma manera que nos des\/suscribimos a los eventos de un modelo con \"on\" y \"off\", lo podemos hacer en una colecci\u00f3n para el add, remove o reset. [js] personas.on('add', function(personaAgregada){ \/\/se agreg\u00f3 personaAgregada a la coleccion }); [\/js] El evento change de una colecci\u00f3n se va a disparar cuando alg\u00fan modelo que se encuentre en ella dispare el change. [js] \/\/ Paso 3, se dispara el evento change en la colecci\u00f3n. personas.on('change:edad', function(persona){ \/\/persona cambio su edad }); \/\/ Paso 2, se dispara el evento change de la entidad. persona.on('change:edad', function(){ \/\/cambio la edad de la persona }); \/\/ Paso 1, cambio la edad. persona.set('edad', 40); [\/js] ### Persistiendo en el servidor:\n\n Algo a tener en cuenta antes de meternos con persistencia, es ver como se mapean los m\u00e9todos HTTP con las acciones: Obtener un Recurso = GET Nuevo Recurso = POST Actualizar Recurso Existente = PUT Eliminar un Recurso = DELETE En backbone no vamos a estar pensando en los m\u00e9todos HTTP, simplemente utilizamos los de backbone: [js] \/\/ tomando como url la especificada en la colecci\u00f3n del ejemplo anterior modelo.fetch() \/\/GET \/personas\/id coleccion.fetch() \/\/GET \/personas modelo.save() \/\/POST \/personas (si NO tiene id) modelo.save() \/\/PUT \/personas\/id (si tiene un id) modelo.destroy() \/\/DELETE \/personas\/id \/\/ en vez de hacer un .add() y despues un .save() \/\/ se puede utilizar el create de la coleccion coleccion.create(modelo) \/\/POST [\/js] Algo a tener en cuenta es que para que los m\u00e9todos del modelo disparen un pedido al servidor, tienen que estar dentro de una colecci\u00f3n con su atributo *url* especificado. En caso de que no tengamos una colecci\u00f3n y sea simplemente un modelo que tiene que disparar pedidos al servidor, tenemos que especificarle el atributo **urlRoot** al modelo directamente (backbone se va a encargar de agregar el id de la entidad al final de la url en cada pedido): [js] var pesona = Backbone.Model.extend({ urlRoot: \"\/personas\" }); [\/js] #### Identificadores en un modelo\n\n Backbone va a utilizar por defecto la propiedad con nombre **id** como el id del modelo (en caso de que exista). Para cambiar eso, es simplemente especificarle en la colecci\u00f3n otro atributo como: [js] idAttribute: \"idPersona\" [\/js] > Si **no** hay una propiedad **id** y tampoco especificas otra, ten\u00e9 en cuenta que para backbone ese modelo es NUEVO, es decir, va a resultar siempre en un POST y si le preguntas a Backbone, te va a decir: [js] personita.isNew() === true [\/js]\n\n Hay mucho, pero mucho m\u00e1s para ver de Backbone, as\u00ed que si alguien quiere prenderse y armar un post de Vistas, ser\u00eda genial! Tambi\u00e9n existen otras bibliotecas para atacar la estructuraci\u00f3n, eventos, etc de una aplicaci\u00f3n cliente, como [Angular](http:\/\/angularjs.org\/), [CanJS](http:\/\/canjs.com\/), [Ember](http:\/\/emberjs.com\/), etc. No tuve experiencias con esas todav\u00eda, me gustar\u00eda escuchar la de ustedes ;) Pueden ver ejemplos ya armados con muchas bibliotecas en [TODO MVC](http:\/\/todomvc.com\/)\n","html":"\u00daltimamente lo vengo utilizando mucho y como me tiraron varias veces la pregunta \"que es backbone?\" armo este post para dar una idea de lo que es y sus principales caracter\u00edsticas.\r\n\r\n<a href=\"http:\/\/backbonejs.org\">Backbone<\/a> (columna vertebral en espa\u00f1ol) intenta darnos una estructura para nuestra aplicaci\u00f3n cliente. La idea es b\u00e1sicamente pensar en Modelos, Colecciones (de modelos) y Vistas. Como agregado a estos tambi\u00e9n tenemos Eventos (para la comunicaci\u00f3n entre estas capas) y ya enganchado adentro de los Modelos y Colecciones m\u00e9todos para utilizar servicios JSON Restfull mediante AJAX.\r\n\r\nEn este post voy a mostrar Modelo y Colecci\u00f3n, con sus eventos y persistencia en el server.\r\n\r\nDicho esto, veamos una imagen para hacerlo un poco mas claro:\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/09\/backbone_map.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/09\/backbone_map.png\" alt=\"backbone_map\" width=\"500\" height=\"200\" class=\"size-full wp-image-3863\" \/><\/a>\r\n\r\n<h3>Modelo (Backbone.Model)<\/h3>\r\nEs el dominio de tu aplicaci\u00f3n, la idea es que ah\u00ed guardes los estados de tus Entidades, con sus m\u00e9todos y tambi\u00e9n puede llegar a acceder al server mediante AJAX ya sea para un DELETE (eliminar), PUT (actualizar) o un POST (crear).\r\n\r\n[js]\r\n\/\/ Definimos un modelo Persona, extendiendo de la clase Backbone.Model.\r\nvar Persona = Backbone.Model.extend({\r\n  \r\n  \/\/ valores predeterminados nuestro modelo.\r\n  defaults: {\r\n    nombre: &quot;Sin Nombre&quot;,\r\n    edad: 30\r\n  },\r\n\r\n  initialize: function(modelo, opciones){\r\n    \/\/ constructor\r\n  },\r\n\r\n  parse: function(response){\r\n    \/\/ sobre-escribimos la respuesta del server\r\n    \/\/ por si necesitamos hacer algo antes de que se cree el modelo\r\n    \/\/ por ejemplo: \r\n    response.edadLoca = response.edad * 5;\r\n\r\n    \/\/esto nos va a dejar hacer modelo.get('edadLoca')\r\n\r\n    return response;\r\n  },\r\n\r\n  calcularAlgo: function(){\r\n    \/\/ m\u00e9todo de instancia\r\n    \/\/ this se bindea con la instancia\r\n    \/\/ por ejemplo: this.defaults\r\n  }  \r\n\r\n}, {\r\n  \r\n  calcularAlgoEstatico: function(){\r\n    \/\/ m\u00e9todo est\u00e1tico\r\n  }\r\n\r\n});\r\n\r\n\/\/ Ahora creemos una instancia del modelo:\r\nvar pablito = new Persona({\r\n  nombre: &quot;Pablo&quot;,\r\n  edad: 500 \/\/ si, soy muy anciano\r\n});\r\n\r\npablito.calcularAlgo();\r\nPersona.calcularAlgoEstatico();\r\n\r\n[\/js]\r\n\r\n<h4>Propiedades y Eventos de un Modelo<\/h4>\r\nEn un modelo de Backbone las propiedades de instancia se guardan todas adentro de \"attributes\". Y a diferencia de lo que estamos acostubrados en js, por ejemplo un json, se acceden por 2 m\u00e9todos <em>get<\/em> y <em>set<\/em>:\r\n\r\n[js]\r\nvar nombre = pablito.get('nombre'); \/\/ &quot;Pablo&quot;\r\npablito.set('nombre', &quot;Pablo2&quot;);\r\n\r\n\/\/ Tambi\u00e9n podemos pasar un JSON y aplicar varios:\r\npablito.set({\r\n  nombre: &quot;Pablo3&quot;,\r\n  edad: 300\r\n});\r\n\r\n\/\/ Podemos ver los cambios en\r\nconsole.dir(pablito.attributes); \r\n[\/js]\r\n\r\nCuando realizamos un <em>set<\/em> se dispara un evento \"change\", podemos escuchar los eventos del modelo con el m\u00e9todo <b>on<\/b>:\r\n\r\n[js]\r\npablito.on('change', function(){\r\n  \/\/ alguna propiedad cambi\u00f3\r\n});\r\n\r\npablito.on('change:edad', function(){\r\n  \/\/ la edad se modific\u00f3\r\n});\r\n\r\n\/\/ eliminamos todos los manejadores del evento\r\npablito.off('change'); \r\npablito.off('change:edad'); \r\n[\/js]\r\n\r\n<h3>Colecci\u00f3n (Backbone.Collection)<\/h3>\r\nTambi\u00e9n es parte de tu dominio, est\u00e1n pensadas como colecciones de modelos. Aparte de esto, tiene muchas utilidades mas, como centralizar m\u00e9todos al servidor, ordenar los modelos, eventos, etc.\r\n\r\n[js]\r\n\/\/ Definimos una colecci\u00f3n de Personas, extendiendo de la clase Backbone.Collection.\r\nvar Personas = Backbone.Collection.extend({\r\n  \r\n  \/\/ Definimos cual es el modelo de esta colecci\u00f3n.\r\n  model: Persona,\r\n\r\n  \/\/ Definimos la url base RESTfull de para esta colecci\u00f3n.\r\n  url: '\/personas',\r\n\r\n  initialize: function(arrayDeModelo, opciones){\r\n    \/\/ constructor de la colecci\u00f3n\r\n  },\r\n\r\n  parse: function(response){\r\n    \/\/ lo mismo que en el modelo, con la diferencia \r\n    \/\/ que response va a ser un array en vez de un objeto\r\n    return response;\r\n  }\r\n\r\n});\r\n\r\n\/\/ Ahora creemos una instancia de la colecci\u00f3n:\r\nvar personas = new Personas([{\r\n  id: 1234,\r\n  nombre: &quot;jose&quot;,\r\n  edad: 20\r\n}, {\r\n  id: 1235,\r\n  nombre: &quot;pepe&quot;,\r\n  edad: 40\r\n}]);\r\n\r\n\/\/ autom\u00e1ticamente tenemos en la colecci\u00f3n los modelos listos para usar\r\n\/\/ podemos ir por indic\u00e9\r\npersonas.at(0).get('nombre'); \/\/ &quot;jose&quot;\r\n\/\/ o por id\r\npersonas.get(1235).get('nombre'); \/\/ &quot;pepe&quot;\r\n[\/js]\r\n\r\n<h4>Modificando una Colecci\u00f3n<\/h4>\r\nYa vimos como crear una colecci\u00f3n pasandole modelos, ahora veamos como agregar y eliminar modelos.\r\n\r\n[js]\r\n\r\n\/\/ tememos una persona en json\r\nvar personaJSON = {\r\n  id: 1236,\r\n  nombre: &quot;juan&quot;,\r\n  edad: 25\r\n};\r\n\r\n\/\/ Podemos agregarla directamente a la colecci\u00f3n\r\npersonas.add(personaJSON);\r\npersonas.get(1236).get('nombre'); \/\/ &quot;juan&quot;\r\n\r\n\/\/ o bien podemos agregar un modelo de la misma manera\r\nvar juan = new Persona(personaJSON);\r\npersonas.add(juan);\r\npersonas.get(1236).get('nombre'); \/\/ &quot;juan&quot;\r\n\r\n\/\/ para eliminar a juan de la colecci\u00f3n:\r\nvar personaJuan = personas.get(12346);\r\npersonas.remove(personaJuan);\r\n\r\n\/\/ tambi\u00e9n podemos limpiar una colecci\u00f3n \r\npersonas.reset();\r\n\/\/ personas.length === 0\r\n\r\n[\/js]\r\n\r\nEn Backbone ya tenemos por defecto dentro de una coleccion todos las funciones (creo que todas) de <a href=\"http:\/\/underscorejs.org\">UnderscoreJS<\/a>. Lo que significa que podemos usar, por ejemplo el each:\r\n\r\n[js]\r\n\/\/con underscore y un array har\u00edas algo como \r\n_.each(personas, function (persona) { });\r\n\r\n\/\/ en backbone ya lo tenemos disponible desde la colecci\u00f3n:\r\npersonas.each(function(persona){ });\r\n[\/js]\r\n\r\n<h4>Eventos de una Colecci\u00f3n<\/h4>\r\nAs\u00ed como los modelos tienen eventos de cambio (change), la colecci\u00f3n nos agrega algunos mas\r\nDe la misma manera que nos des\/suscribimos a los eventos de un modelo con \"on\" y \"off\", lo podemos hacer en una colecci\u00f3n para el add, remove o reset.\r\n\r\n[js]\r\npersonas.on('add', function(personaAgregada){\r\n  \/\/se agreg\u00f3 personaAgregada a la coleccion\r\n});\r\n[\/js]\r\n\r\nEl evento change de una colecci\u00f3n se va a disparar cuando alg\u00fan modelo que se encuentre en ella dispare el change.\r\n\r\n[js]\r\n\/\/ Paso 3, se dispara el evento change en la colecci\u00f3n.\r\npersonas.on('change:edad', function(persona){\r\n  \/\/persona cambio su edad\r\n});\r\n\r\n\/\/ Paso 2, se dispara el evento change de la entidad.\r\npersona.on('change:edad', function(){\r\n  \/\/cambio la edad de la persona\r\n});\r\n\r\n\/\/ Paso 1, cambio la edad.\r\npersona.set('edad', 40);\r\n[\/js]\r\n\r\n<h3>Persistiendo en el servidor:<\/h3>\r\nAlgo a tener en cuenta antes de meternos con persistencia, es ver como se mapean los m\u00e9todos HTTP con las acciones:\r\nObtener un Recurso = GET\r\nNuevo Recurso = POST\r\nActualizar Recurso Existente = PUT\r\nEliminar un Recurso = DELETE\r\n\r\nEn backbone no vamos a estar pensando en los m\u00e9todos HTTP, simplemente utilizamos los de backbone:\r\n[js]\r\n\/\/ tomando como url la especificada en la colecci\u00f3n del ejemplo anterior\r\n\r\nmodelo.fetch() \/\/GET \/personas\/id\r\ncoleccion.fetch() \/\/GET \/personas\r\n\r\nmodelo.save() \/\/POST \/personas (si NO tiene id) \r\nmodelo.save() \/\/PUT \/personas\/id (si tiene un id)\r\nmodelo.destroy() \/\/DELETE \/personas\/id\r\n\r\n\/\/ en vez de hacer un .add() y despues un .save()\r\n\/\/ se puede utilizar el create de la coleccion\r\ncoleccion.create(modelo) \/\/POST\r\n[\/js]\r\n\r\nAlgo a tener en cuenta es que para que los m\u00e9todos del modelo disparen un pedido al servidor, tienen que estar dentro de una colecci\u00f3n con su atributo <em>url<\/em> especificado.\r\n\r\nEn caso de que no tengamos una colecci\u00f3n y sea simplemente un modelo que tiene que disparar pedidos al servidor, tenemos que especificarle el atributo <b>urlRoot<\/b> al modelo directamente (backbone se va a encargar de agregar el id de la entidad al final de la url en cada pedido):\r\n\r\n[js]\r\nvar pesona = Backbone.Model.extend({\r\n  urlRoot: &quot;\/personas&quot;\r\n});\r\n[\/js]\r\n\r\n<h4>Identificadores en un modelo<\/h4>\r\nBackbone va a utilizar por defecto la propiedad con nombre <b>id<\/b> como el id del modelo (en caso de que exista). Para cambiar eso, es simplemente especificarle en la colecci\u00f3n otro atributo como: \r\n[js]\r\nidAttribute: &quot;idPersona&quot;\r\n[\/js]\r\n\r\n<blockquote>\r\nSi <b>no<\/b> hay una propiedad <b>id<\/b> y tampoco especificas otra, ten\u00e9 en cuenta que para backbone ese modelo es NUEVO, es decir, va a resultar siempre en un POST y si le preguntas a Backbone, te va a decir:\r\n[js]\r\npersonita.isNew() === true\r\n[\/js]\r\n<\/blockquote>\r\n\r\nHay mucho, pero mucho m\u00e1s para ver de Backbone, as\u00ed que si alguien quiere prenderse y armar un post de Vistas, ser\u00eda genial!\r\nTambi\u00e9n existen otras bibliotecas para atacar la estructuraci\u00f3n, eventos, etc de una aplicaci\u00f3n cliente, como <a href=\"http:\/\/angularjs.org\/\">Angular<\/a>, <a href=\"http:\/\/canjs.com\/\">CanJS<\/a>, <a href=\"http:\/\/emberjs.com\/\">Ember<\/a>, etc. No tuve experiencias con esas todav\u00eda, me gustar\u00eda escuchar la de ustedes ;)\r\n\r\nPueden ver ejemplos ya armados con muchas bibliotecas en <a href=\"http:\/\/todomvc.com\/\">TODO MVC<\/a>\r\n\r\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Fri, 20 Sep 2013 10:10:41 +0000","created_by":1,"updated_at":"Fri, 20 Sep 2013 10:10:41 +0000","updated_by":1,"published_at":"Fri, 20 Sep 2013 10:10:41 +0000","published_by":1},{"id":3849,"title":"Utilizando la API de visibilidad","slug":"temp-slug-100","markdown":"\nLa API de visibilidad de p\u00e1gina es realmente sencilla: consta de un par de propiedades que extienden al document y un evento. Com\u00f3 podr\u00e1n adivinar, nos otorga informaci\u00f3n sobre cu\u00e1ndo la p\u00e1gina se encuentra visible o no, y nos notifica de cambios de estado de visibilidad; por ejemplo cuando el usuario cambia de tab del navegador o lo minimiza. Con el creciente aumento de la complejidad de las aplicaciones web y de la variedad de cosas que se hacen en el cliente, viene muy bien para solucionar varios problemas, principalmente performance y usabilidad.\n\nPosibles casos de uso\n---------------------\n\n Unos de los mayores casos de uso, cosa que se ven\u00eda arrastrando sin resolver de manera apropiada desde hace un tiempo, es el polling innecesario. Por ejemplo, en un sitio que hace una llamada ajax cada x segundos al servidor para mantenerse actualizado, no ser\u00eda necesario actualizar nada si el usuario no se encuentra utilizando el sitio en cuesti\u00f3n. Si bien mucha gente se la ha ideado como para lograr esta optimizaci\u00f3n sin el uso de la API de visibilidad, \u00e9sta es por fin una manera confiable y limpia de hacerlo. Adem\u00e1s, conociendo los cambios de visibilidad, podr\u00edamos parar la reproducci\u00f3n de [video](http:\/\/www.samdutton.com\/pageVisibility\/ \"ejemplo video y pageVisibility\"), audio, o pausar un juego cuando el usuario deja nuestra pesta\u00f1a. De seguro se le pueden dar muchas otras utilidades. Siempre tambi\u00e9n est\u00e1 presente el lado creativo y experimental de las cosas. Un ejemplo curioso es un [juego-experimento de preguntas y respuestas](http:\/\/advent2012.digitpaint.nl\/8\/ \"juego-experimento visibility api\") en el que uno deja el tab en busca de una respuesta, y al volver, el jugador la corrobora y ve cuanto tiempo tard\u00f3 en encontrarla. C\u00f3digo\n------\n\n [js] document.hidden === false; [\/js] Compatibilidad y soporte\n------------------------\n\n Como de costumbre, el recurso que m\u00e1s uso para conocer la compatibilidad de este tipo de caracter\u00edsticas es [caniuse](http:\/\/caniuse.com\/pagevisibility \"Referencia compatibilidad pageVisibility API\"). Si se fijan, el soporte al momento de escribir este post es relativamente bueno, aunque los browsers basados en webkit requieren el uso del correspondiente prefijo. Algo as\u00ed como se muestra en los [ejemplos de la MDN](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Guide\/User_experience\/Using_the_Page_Visibility_API#Example \"Ejemplo en MDN\"), podr\u00edamos detectar la disponibilidad de esta api: [js] var hidden, visibilityChange; if (typeof document.hidden !== \"undefined\") { hidden = \"hidden\"; visibilityChange = \"visibilitychange\"; } else if (typeof document.mozHidden !== \"undefined\") { hidden = \"mozHidden\"; visibilityChange = \"mozvisibilitychange\"; } else if (typeof document.msHidden !== \"undefined\") { hidden = \"msHidden\"; visibilityChange = \"msvisibilitychange\"; } else if (typeof document.webkitHidden !== \"undefined\") { hidden = \"webkitHidden\"; visibilityChange = \"webkitvisibilitychange\"; } \/\/ despues podemos trabajar con el evento y la propiedad hidden \/\/ (siempre y cuando visibilityChange y hidden no sean undefined porque no hay soporte del browser) document.addEventListener(visibilityChange, function(){ if (document[hidden]) { \/\/ el documento est\u00e1 oculto } }, false); [\/js] Si necesitamos utilizar esta caracter\u00edstica y soportar navegadores que no implementan esta api, como siempre se puede utilizar modernizer y alg\u00fan [polyfill](https:\/\/github.com\/Modernizr\/Modernizr\/wiki\/HTML5-Cross-browser-Polyfills#visibility \"polyfills en la wiki de modernizr\"). Links relacionados\n------------------\n\n[Art\u00edculo en espa\u00f1ol que me pareci\u00f3 muy bueno](http:\/\/cmorales.es\/tutorial\/api-de-visibilidad-de-pagina-en-html5\/ \"api de visibilidad de pagina - cmorales.es\") [W3C Recommendation](http:\/\/www.w3.org\/TR\/page-visibility\/ \"W3C Recommendation\") [MDN](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Guide\/User_experience\/Using_the_Page_Visibility_API \"MDN - Using the Page Visibility API\") [Google dev whitepaper](https:\/\/developers.google.com\/chrome\/whitepapers\/pagevisibility?csw=1 \"pagevisibility - google\") [HTML5 Rocks](http:\/\/www.html5rocks.com\/en\/tutorials\/pagevisibility\/intro\/ \"html5rocks\") [Microsoft](http:\/\/ie.microsoft.com\/testdrive\/Performance\/PageVisibility\/ \"PageVisibility - Microsoft\")\n","html":"La API de visibilidad de p\u00e1gina es realmente sencilla: consta de un par de propiedades que extienden al document y un evento. Com\u00f3 podr\u00e1n adivinar, nos otorga informaci\u00f3n sobre cu\u00e1ndo la p\u00e1gina se encuentra visible o no, y nos notifica de cambios de estado de visibilidad; por ejemplo cuando el usuario cambia de tab del navegador o lo minimiza.\r\nCon el creciente aumento de la complejidad de las aplicaciones web y de la variedad de cosas que se hacen en el cliente, viene muy bien para solucionar varios problemas, principalmente performance y usabilidad.\r\n\r\n<h2>Posibles casos de uso<\/h2>\r\n\r\nUnos de los mayores casos de uso, cosa que se ven\u00eda arrastrando sin resolver de manera apropiada desde hace un tiempo, es el polling innecesario. Por ejemplo, en un sitio que hace una llamada ajax cada x segundos al servidor para mantenerse actualizado, no ser\u00eda necesario actualizar nada si el usuario no se encuentra utilizando el sitio en cuesti\u00f3n. Si bien mucha gente se la ha ideado como para lograr esta optimizaci\u00f3n sin el uso de la API de visibilidad, \u00e9sta es por fin una manera confiable y limpia de hacerlo.\r\n\r\nAdem\u00e1s, conociendo los cambios de visibilidad, podr\u00edamos parar la reproducci\u00f3n de <a href=\"http:\/\/www.samdutton.com\/pageVisibility\/\" title=\"ejemplo video y pageVisibility\" target=\"_blank\">video<\/a>, audio, o pausar un juego cuando el usuario deja nuestra pesta\u00f1a.\r\n\r\nDe seguro se le pueden dar muchas otras utilidades. Siempre tambi\u00e9n est\u00e1 presente el lado creativo y experimental de las cosas. Un ejemplo curioso es un <a href=\"http:\/\/advent2012.digitpaint.nl\/8\/\" title=\"juego-experimento visibility api\" target=\"_blank\">juego-experimento de preguntas y respuestas<\/a> en el que uno deja el tab en busca de una respuesta, y al volver, el jugador la corrobora y ve cuanto tiempo tard\u00f3 en encontrarla. \r\n\r\n<h2>C\u00f3digo<\/h2>\r\n\r\n[js]\r\ndocument.hidden === false;\r\n[\/js]\r\n\r\n<h2>Compatibilidad y soporte<\/h2>\r\n\r\nComo de costumbre, el recurso que m\u00e1s uso para conocer la compatibilidad de este tipo de caracter\u00edsticas es <a href=\"http:\/\/caniuse.com\/pagevisibility\" title=\"Referencia compatibilidad pageVisibility API\" target=\"_blank\">caniuse<\/a>. Si se fijan, el soporte al momento de escribir este post es relativamente bueno, aunque los browsers basados en webkit requieren el uso del correspondiente prefijo.\r\n\r\nAlgo as\u00ed como se muestra en los <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Guide\/User_experience\/Using_the_Page_Visibility_API#Example\" title=\"Ejemplo en MDN\" target=\"_blank\">ejemplos de la MDN<\/a>, podr\u00edamos detectar la disponibilidad de esta api:\r\n\r\n[js]\r\nvar hidden, visibilityChange; \r\nif (typeof document.hidden !== &quot;undefined&quot;) {\r\n  hidden = &quot;hidden&quot;;\r\n  visibilityChange = &quot;visibilitychange&quot;;\r\n} else if (typeof document.mozHidden !== &quot;undefined&quot;) {\r\n  hidden = &quot;mozHidden&quot;;\r\n  visibilityChange = &quot;mozvisibilitychange&quot;;\r\n} else if (typeof document.msHidden !== &quot;undefined&quot;) {\r\n  hidden = &quot;msHidden&quot;;\r\n  visibilityChange = &quot;msvisibilitychange&quot;;\r\n} else if (typeof document.webkitHidden !== &quot;undefined&quot;) {\r\n  hidden = &quot;webkitHidden&quot;;\r\n  visibilityChange = &quot;webkitvisibilitychange&quot;;\r\n}\r\n\r\n\/\/ despues podemos trabajar con el evento y la propiedad hidden\r\n\/\/ (siempre y cuando visibilityChange y hidden no sean undefined porque no hay soporte del browser)\r\ndocument.addEventListener(visibilityChange, function(){\r\n  if (document[hidden]) {\r\n    \/\/ el documento est\u00e1 oculto\r\n  }\r\n}, false);\r\n\r\n[\/js]\r\n\r\nSi necesitamos utilizar esta caracter\u00edstica y soportar navegadores que no implementan esta api, como siempre se puede utilizar modernizer y alg\u00fan <a href=\"https:\/\/github.com\/Modernizr\/Modernizr\/wiki\/HTML5-Cross-browser-Polyfills#visibility\" title=\"polyfills en la wiki de modernizr\" target=\"_blank\">polyfill<\/a>.\r\n\r\n\r\n<h2>Links relacionados<\/h2>\r\n<a href=\"http:\/\/cmorales.es\/tutorial\/api-de-visibilidad-de-pagina-en-html5\/\" title=\"api de visibilidad de pagina - cmorales.es\" target=\"_blank\">Art\u00edculo en espa\u00f1ol que me pareci\u00f3 muy bueno<\/a>\r\n<a href=\"http:\/\/www.w3.org\/TR\/page-visibility\/\" title=\"W3C Recommendation\" target=\"_blank\">W3C Recommendation<\/a>\r\n<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Guide\/User_experience\/Using_the_Page_Visibility_API\" title=\"MDN - Using the Page Visibility API\" target=\"_blank\">MDN<\/a>\r\n<a href=\"https:\/\/developers.google.com\/chrome\/whitepapers\/pagevisibility?csw=1\" title=\"pagevisibility - google\" target=\"_blank\">Google dev whitepaper<\/a>\r\n<a href=\"http:\/\/www.html5rocks.com\/en\/tutorials\/pagevisibility\/intro\/\" title=\"html5rocks\" target=\"_blank\">HTML5 Rocks<\/a>\r\n<a href=\"http:\/\/ie.microsoft.com\/testdrive\/Performance\/PageVisibility\/\" title=\"PageVisibility - Microsoft\" target=\"_blank\">Microsoft<\/a>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Fri, 01 Nov 2013 13:14:39 +0000","created_by":1,"updated_at":"Fri, 01 Nov 2013 13:14:39 +0000","updated_by":1,"published_at":"","published_by":1},{"id":3891,"title":"Feliz Navidad!","slug":"feliz-navidad","markdown":"\n**Felicidades a todos los Ferneteos+Javascripteros!, les dejo una locura navide\u00f1a y les cuento un poco como lo hice:** [iframe style=\"width: 100%; height: 700px;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/qJ585\/embedded\/result,js,html,css\/\" frameborder=\"1\" width=\"600\" height=\"700\"][\/iframe] [![santa_layers](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/12\/santa_layers1.png)](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/12\/santa_layers1.png) Divid\u00ed las part\u00edculas (nieve) en 3 capas, entonces dibujo primero la capa de fondo, luego el santa, pero intercalando con una capa de nieve para darle mas realismo. De esas 3 capas de nieve una es la que tiene part\u00edculas con colisi\u00f3n, es decir, la capa amarilla dibuja las part\u00edculas que se quedan en el santa. La animaci\u00f3n trabaja con un loop como [este](http:\/\/fernetjs.com\/2012\/09\/construyendo-un-game-loop\/ \"Construyendo un Game Loop\"). La nieve son circulos con valores aleatorios, como su tama\u00f1o, velocidad en x e y, posici\u00f3n de inicio, radio, opacidad, etc. Todos los ciculos inician fuera del canvas y van teniendo una velocidad en y que los hace bajar hasta el fondo, cuando llegan simplemente los destruyo y los vuelvo a crear. Para el efecto de la nieve que se queda en santa, lo que hice fue utilizar una colisi\u00f3n entre segmentos (tambi\u00e9n se puede usar con un pol\u00edgono) y c\u00edrculos, en este caso cada copo de nieve. Entonces, por cada actualizaci\u00f3n que hay en las part\u00edculas de esa capa, me fijo si colisiona con algun segmento de santa, si es as\u00ed les pongo un tiempo y no las actualizo mas en posici\u00f3n, dando ese efecto de que se quedan en el lugar y luego de unos segundos siguen cayendo. ** Pueden ver los segmentos haciendo click en \"mostrar\/ocultar segmentos\" en el fiddle. Felicidades!\n","html":"<strong>Felicidades a todos los Ferneteos+Javascripteros!, les dejo una locura navide\u00f1a y les cuento un poco como lo hice:<\/strong>\r\n\r\n[iframe style=\"width: 100%; height: 700px;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/qJ585\/embedded\/result,js,html,css\/\" frameborder=\"1\" width=\"600\" height=\"700\"][\/iframe]\r\n\r\n<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/12\/santa_layers1.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/12\/santa_layers1.png\" alt=\"santa_layers\" width=\"800\" height=\"600\" class=\"size-full wp-image-3903\" \/><\/a>\r\n\r\nDivid\u00ed las part\u00edculas (nieve) en 3 capas, entonces dibujo primero la capa de fondo, luego el santa, pero intercalando con una capa de nieve para darle mas realismo. De esas 3 capas de nieve una es la que tiene part\u00edculas con colisi\u00f3n, es decir, la capa amarilla dibuja las part\u00edculas que se quedan en el santa. \r\n\r\nLa animaci\u00f3n trabaja con un loop como <a href=\"http:\/\/fernetjs.com\/2012\/09\/construyendo-un-game-loop\/\" title=\"Construyendo un Game Loop\">este<\/a>. \r\nLa nieve son circulos con valores aleatorios, como su tama\u00f1o, velocidad en x e y, posici\u00f3n de inicio, radio, opacidad, etc. Todos los ciculos inician fuera del canvas y van teniendo una velocidad en y que los hace bajar hasta el fondo, cuando llegan simplemente los destruyo y los vuelvo a crear.\r\n\r\nPara el efecto de la nieve que se queda en santa, lo que hice fue utilizar una colisi\u00f3n entre segmentos (tambi\u00e9n se puede usar con un pol\u00edgono) y c\u00edrculos, en este caso cada copo de nieve. Entonces, por cada actualizaci\u00f3n que hay en las part\u00edculas de esa capa, me fijo si colisiona con algun segmento de santa, si es as\u00ed les pongo un tiempo y no las actualizo mas en posici\u00f3n, dando ese efecto de que se quedan en el lugar y luego de unos segundos siguen cayendo.\r\n\r\n** Pueden ver los segmentos haciendo click en \"mostrar\/ocultar segmentos\" en el fiddle.\r\n\r\nFelicidades!","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Thu, 26 Dec 2013 12:18:50 +0000","created_by":1,"updated_at":"Tue, 31 Dec 2013 15:57:23 +0000","updated_by":1,"published_at":"Thu, 26 Dec 2013 12:18:50 +0000","published_by":1},{"id":3905,"title":"Feliz 2014!","slug":"feliz-2014","markdown":"\n[![newyear2014img](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/12\/newyear2014img.png)](http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/12\/newyear2014img.png)**Feliz A\u00f1o 2014 a todos los Ferneteros+Javascripteros!, les dejo una nueva locura, en este caso es un juego ... El objetivo es que no se apaguen todas las luces, as\u00ed que cuando una se falla hay que darle un golpecito con un click para que se prenda de nuevo :)** [iframe style=\"width: 100%; height: 700px;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/9uj3N\/embedded\/result,js,html,css\/\" frameborder=\"1\" width=\"600\" height=\"700\"][\/iframe] Lo arm\u00e9 con una imagen completa de fondo del canvas y lo que renderiza son solo las luces tomando desde un array binario (0 = nada y 1 = luz): [js] [ [0,1,0,0,0,1,0,0,0,1,0,0,0,1], [1,0,1,0,1,0,1,0,1,1,0,0,1,1], [0,0,1,0,1,0,1,0,0,1,0,1,0,1], [0,1,0,0,1,0,1,0,0,1,0,1,1,1], [1,0,0,0,1,0,1,0,0,1,0,0,0,1], [1,1,1,0,0,1,0,0,0,1,0,0,0,1] ] [\/js] Luego escucho al evento del click del mouse en el canvas y me fijo si el punto (x, y) se encuentra dentro del c\u00edrculo de una de las luces. Las chispas las hice con un sistema de part\u00edculas aplicando velocidad aleatoria en x e y con gravedad para que bajen siempre, tama\u00f1o y opacidad aleatorias tambi\u00e9n. El efecto de \"luz\" lo hice dibujando varios c\u00edrculos por cada luz reduciendo el radio y su opacidad; y, al dibujar, aplicando en el canvas el globalCompositeOperation a \"lighter\". [Ac\u00e1](http:\/\/www.html5canvastutorials.com\/advanced\/html5-canvas-global-composite-operations-tutorial\/) pueden ver las operaciones que se pueden usar en el dibujo de canvas, hay muuchas cosas para probar y divertirse con eso. Espero que lo disfruten para unos 5 minutos de revivir luces, el c\u00f3digo esta todo en el fiddle, si bien son pocas lineas, puede que sea medio a los golpes as\u00ed que si tienen dudas pregunten!. **A cuantas luces llegaste? :D**\n","html":"<a href=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/12\/newyear2014img.png\"><img src=\"http:\/\/fernetjs.com\/wp-content\/uploads\/2013\/12\/newyear2014img.png\" alt=\"newyear2014img\" width=\"594\" height=\"597\" class=\"alignnone size-full wp-image-3917\" \/><\/a>\r\n\r\n<strong>Feliz A\u00f1o 2014 a todos los Ferneteros+Javascripteros!, les dejo una nueva locura, en este caso es un juego ... El objetivo es que no se apaguen todas las luces, as\u00ed que cuando una se falla hay que darle un golpecito con un click para que se prenda de nuevo :)<\/strong>\r\n\r\n[iframe style=\"width: 100%; height: 700px;\" src=\"http:\/\/jsfiddle.net\/pjnovas\/9uj3N\/embedded\/result,js,html,css\/\" frameborder=\"1\" width=\"600\" height=\"700\"][\/iframe]\r\n\r\nLo arm\u00e9 con una imagen completa de fondo del canvas y lo que renderiza son solo las luces tomando desde un array binario (0 = nada y 1 = luz):\r\n\r\n[js]\r\n[\r\n  [0,1,0,0,0,1,0,0,0,1,0,0,0,1],\r\n  [1,0,1,0,1,0,1,0,1,1,0,0,1,1],\r\n  [0,0,1,0,1,0,1,0,0,1,0,1,0,1],\r\n  [0,1,0,0,1,0,1,0,0,1,0,1,1,1],\r\n  [1,0,0,0,1,0,1,0,0,1,0,0,0,1],\r\n  [1,1,1,0,0,1,0,0,0,1,0,0,0,1]\r\n]\r\n[\/js]\r\n\r\nLuego escucho al evento del click del mouse en el canvas y me fijo si el punto (x, y) se encuentra dentro del c\u00edrculo de una de las luces. \r\n\r\nLas chispas las hice con un sistema de part\u00edculas aplicando velocidad aleatoria en x e y con gravedad para que bajen siempre, tama\u00f1o y opacidad aleatorias tambi\u00e9n.\r\n\r\nEl efecto de \"luz\" lo hice dibujando varios c\u00edrculos por cada luz reduciendo el radio y su opacidad; y, al dibujar, aplicando en el canvas el globalCompositeOperation a \"lighter\". <a href=\"http:\/\/www.html5canvastutorials.com\/advanced\/html5-canvas-global-composite-operations-tutorial\/\">Ac\u00e1<\/a> pueden ver las operaciones que se pueden usar en el dibujo de canvas, hay muuchas cosas para probar y divertirse con eso.\r\n\r\nEspero que lo disfruten para unos 5 minutos de revivir luces, el c\u00f3digo esta todo en el fiddle, si bien son pocas lineas, puede que sea medio a los golpes as\u00ed que si tienen dudas pregunten!.\r\n\r\n<strong>A cuantas luces llegaste? :D<\/strong>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":3,"created_at":"Tue, 31 Dec 2013 16:19:24 +0000","created_by":1,"updated_at":"Tue, 31 Dec 2013 16:19:24 +0000","updated_by":1,"published_at":"Tue, 31 Dec 2013 16:19:24 +0000","published_by":1},{"id":3943,"title":"console: algo m\u00e1s que console.log","slug":"temp-slug-103","markdown":"\nDespu\u00e9s de alg\u00fan tiempo sin actividad, se me ocurri\u00f3 escribir algo sobre el objeto console. El objeto console, es una interface para comunicarnos por c\u00f3digo con la consola, que hoy en d\u00eda viene inclu\u00edda por defecto en la mayor\u00eda de los navegadores como parte de las herramientas para el desarrollador. Si bien no existe un est\u00e1ndar para esta API, hoy en d\u00eda es implementada por la mayor\u00eda de los navegadores y otras plataformas como nodejs de manera bastante consistente. Muchos recordaremos [los errores que nos daba internet explorer <= 8](http:\/\/stackoverflow.com\/questions\/3326650\/console-is-undefined-error-for-internet-explorer \"console.log undefined en stackoverflow\") cuando nos olvid\u00e1bamos un console.log en el c\u00f3digo. Por suerte esto ya casi no pasa, aunque es posible encontrar inconsistencias m\u00ednimas en el comportamiento de alguna funci\u00f3n, o en algunos casos particulares que la funci\u00f3n no se encuentre implementada.\n\n### debug, log, info, warn y error\n\n \u00a0 ### assert\n\n### count\n\n### dir\n\n### table\n\n### group, groupCollapsed y groupEnd\n\n### trace\n\n### time, timeEnd\n\n### timeStamp\n\n### profile, profileEnd\n\n Referencias externas: [MDN](https:\/\/developer.mozilla.org\/en\/docs\/Web\/API\/console \"Console - MDN\") [Chrome](https:\/\/developer.chrome.com\/devtools\/docs\/console-api \"Console - chrome\") [MSDN](http:\/\/msdn.microsoft.com\/en-us\/library\/windows\/apps\/hh696634.aspx \"Console - MSDN\")\n","html":"Despu\u00e9s de alg\u00fan tiempo sin actividad, se me ocurri\u00f3 escribir algo sobre el objeto console.\r\n\r\nEl objeto console, es una interface para comunicarnos por c\u00f3digo con la consola, que hoy en d\u00eda viene inclu\u00edda por defecto en la mayor\u00eda de los navegadores como parte de las herramientas para el desarrollador. Si bien no existe un est\u00e1ndar para esta API, hoy en d\u00eda es implementada por la mayor\u00eda de los navegadores y otras plataformas como nodejs de manera bastante consistente.\r\n\r\nMuchos recordaremos <a title=\"console.log undefined en stackoverflow\" href=\"http:\/\/stackoverflow.com\/questions\/3326650\/console-is-undefined-error-for-internet-explorer\" target=\"_blank\">los errores que nos daba internet explorer &lt;= 8<\/a> cuando nos olvid\u00e1bamos un console.log en el c\u00f3digo. Por suerte esto ya casi no pasa, aunque es posible encontrar inconsistencias m\u00ednimas en el comportamiento de alguna funci\u00f3n, o en algunos casos particulares que la funci\u00f3n no se encuentre implementada.\r\n\r\n<h3>debug, log, info, warn y error<\/h3>\r\n&nbsp;\r\n\r\n<h3>assert<\/h3>\r\n\r\n<h3>count<\/h3>\r\n\r\n<h3>dir<\/h3>\r\n\r\n<h3>table<\/h3>\r\n\r\n<h3>group, groupCollapsed y groupEnd<\/h3>\r\n\r\n<h3>trace<\/h3>\r\n\r\n<h3>time, timeEnd<\/h3>\r\n\r\n<h3>timeStamp<\/h3>\r\n\r\n<h3>profile, profileEnd<\/h3>\r\n\r\nReferencias externas:\r\n<a title=\"Console - MDN\" href=\"https:\/\/developer.mozilla.org\/en\/docs\/Web\/API\/console\" target=\"_blank\">MDN<\/a>\r\n<a title=\"Console - chrome\" href=\"https:\/\/developer.chrome.com\/devtools\/docs\/console-api\" target=\"_blank\">Chrome<\/a>\r\n<a title=\"Console - MSDN\" href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/windows\/apps\/hh696634.aspx\" target=\"_blank\">MSDN<\/a>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":2,"created_at":"Mon, 29 Sep 2014 02:04:52 +0000","created_by":1,"updated_at":"Mon, 29 Sep 2014 02:04:52 +0000","updated_by":1,"published_at":"","published_by":1}],"tags":[{"id":81,"name":"2012","slug":"2012","description":""},{"id":86,"name":"AJAX","slug":"ajax","description":""},{"id":210,"name":"amd","slug":"amd","description":""},{"id":57,"name":"animaciones","slug":"animaciones","description":""},{"id":206,"name":"apply","slug":"apply","description":""},{"id":75,"name":"aprendizaje","slug":"aprendizaje","description":""},{"id":34,"name":"argumentos","slug":"argumentos","description":""},{"id":16,"name":"array","slug":"array","description":""},{"id":63,"name":"asincronismo","slug":"asincronismo","description":""},{"id":215,"name":"backbone","slug":"backbone","description":""},{"id":207,"name":"bind","slug":"bind","description":""},{"id":8,"name":"booleanos","slug":"booleanos","description":""},{"id":213,"name":"bootstrap","slug":"bootstrap","description":""},{"id":30,"name":"calidad de c\u00f3digo","slug":"calidad-de-codigo","description":""},{"id":205,"name":"call","slug":"call","description":""},{"id":59,"name":"canvas","slug":"canvas","description":""},{"id":94,"name":"CDN","slug":"cdn","description":""},{"id":62,"name":"clearInterval","slug":"clearinterval","description":""},{"id":32,"name":"closures","slug":"closures","description":""},{"id":104,"name":"codestre.am","slug":"codestre-am","description":""},{"id":66,"name":"commonjs","slug":"commonjs","description":""},{"id":14,"name":"console","slug":"console","description":""},{"id":130,"name":"cookies","slug":"cookies","description":""},{"id":121,"name":"CORS","slug":"cors","description":""},{"id":209,"name":"curry","slug":"curry","description":""},{"id":88,"name":"data","slug":"data","description":""},{"id":13,"name":"debugging","slug":"debugging","description":""},{"id":87,"name":"Deferred","slug":"deferred","description":""},{"id":113,"name":"deploy","slug":"deploy","description":""},{"id":5,"name":"DOM","slug":"dom","description":""},{"id":68,"name":"ECMAScript","slug":"ecmascript","description":""},{"id":128,"name":"Error","slug":"error","description":""},{"id":69,"name":"eval","slug":"eval","description":""},{"id":25,"name":"eventos","slug":"eventos","description":""},{"id":105,"name":"excepciones","slug":"excepciones","description":""},{"id":90,"name":"exports","slug":"exports","description":""},{"id":92,"name":"expressjs","slug":"expressjs","description":""},{"id":84,"name":"extender javascript","slug":"extender-javascript","description":""},{"id":6,"name":"fecha","slug":"fecha","description":""},{"id":15,"name":"for","slug":"for","description":""},{"id":17,"name":"foreach","slug":"foreach","description":""},{"id":102,"name":"fullscreen","slug":"fullscreen","description":""},{"id":29,"name":"funciones","slug":"funciones","description":""},{"id":80,"name":"FuturoJavascript","slug":"futurojavascript","description":""},{"id":95,"name":"gameoflife","slug":"gameoflife","description":""},{"id":97,"name":"gameoflifejs","slug":"gameoflifejs","description":""},{"id":122,"name":"google","slug":"google","description":""},{"id":110,"name":"google analytics","slug":"google-analytics","description":""},{"id":24,"name":"hover","slug":"hover","description":""},{"id":129,"name":"html5","slug":"html5","description":""},{"id":82,"name":"IDE","slug":"ide","description":""},{"id":96,"name":"johnConway","slug":"johnconway","description":""},{"id":65,"name":"jquery","slug":"jquery","description":""},{"id":67,"name":"json","slug":"json","description":""},{"id":120,"name":"JSONP","slug":"jsonp","description":""},{"id":72,"name":"juegos","slug":"juegos","description":""},{"id":109,"name":"keydown","slug":"keydown","description":""},{"id":108,"name":"keyup","slug":"keyup","description":""},{"id":106,"name":"konami","slug":"konami","description":""},{"id":73,"name":"LD48","slug":"ld48","description":""},{"id":18,"name":"llaves","slug":"llaves","description":""},{"id":132,"name":"local storage","slug":"local-storage","description":""},{"id":40,"name":"memoization","slug":"memoization","description":""},{"id":58,"name":"micro","slug":"micro","description":""},{"id":89,"name":"modulos","slug":"modulos","description":""},{"id":101,"name":"mongodb","slug":"mongodb","description":""},{"id":208,"name":"mongoose","slug":"mongoose","description":""},{"id":23,"name":"mouseenter","slug":"mouseenter","description":""},{"id":21,"name":"mouseleave","slug":"mouseleave","description":""},{"id":22,"name":"mouseout","slug":"mouseout","description":""},{"id":20,"name":"mouseover","slug":"mouseover","description":""},{"id":91,"name":"mvc","slug":"mvc","description":""},{"id":41,"name":"NaN","slug":"nan","description":""},{"id":125,"name":"navegadores","slug":"navegadores","description":""},{"id":212,"name":"nginx","slug":"nginx","description":""},{"id":99,"name":"node","slug":"node","description":""},{"id":112,"name":"nodejitsu","slug":"nodejitsu","description":""},{"id":44,"name":"nodejs","slug":"nodejs","description":""},{"id":111,"name":"nodester","slug":"nodester","description":""},{"id":64,"name":"npm","slug":"npm","description":""},{"id":77,"name":"null","slug":"null","description":""},{"id":79,"name":"nullvsundefined","slug":"nullvsundefined","description":""},{"id":107,"name":"ofuscadores","slug":"ofuscadores","description":""},{"id":37,"name":"operadores","slug":"operadores","description":""},{"id":39,"name":"operadores de igualdad","slug":"operadores-de-igualdad","description":""},{"id":93,"name":"package.json","slug":"package-json","description":""},{"id":35,"name":"par\u00e1metros","slug":"parametros","description":""},{"id":100,"name":"patrones de dise\u00f1o","slug":"patrones-de-diseno","description":""},{"id":31,"name":"performance","slug":"performance","description":""},{"id":12,"name":"picker","slug":"picker","description":""},{"id":43,"name":"poco serio","slug":"poco-serio","description":""},{"id":56,"name":"prototype","slug":"prototype","description":""},{"id":76,"name":"QUnit","slug":"qunit","description":""},{"id":119,"name":"requestAnimationFrame","slug":"requestanimationframe","description":""},{"id":98,"name":"sentencia","slug":"sentencia","description":""},{"id":131,"name":"session storage","slug":"session-storage","description":""},{"id":61,"name":"setInterval","slug":"setinterval","description":""},{"id":60,"name":"setTimeout","slug":"settimeout","description":""},{"id":19,"name":"sintaxis","slug":"sintaxis","description":""},{"id":71,"name":"strict mode","slug":"strict-mode","description":""},{"id":214,"name":"task runner","slug":"task-runner","description":""},{"id":74,"name":"testing","slug":"testing","description":""},{"id":85,"name":"this","slug":"this","description":""},{"id":42,"name":"tipos de datos","slug":"tipos-de-datos","description":""},{"id":83,"name":"trim","slug":"trim","description":""},{"id":126,"name":"twitter api","slug":"twitter-api","description":""},{"id":78,"name":"undefined","slug":"undefined","description":""},{"id":124,"name":"user-agent","slug":"user-agent","description":""},{"id":7,"name":"variables","slug":"variables","description":""},{"id":103,"name":"video","slug":"video","description":""},{"id":211,"name":"vps","slug":"vps","description":""},{"id":127,"name":"websocket","slug":"websocket","description":""},{"id":70,"name":"with","slug":"with","description":""}],"posts_tags":[{"tag_id":5,"post_id":8},{"tag_id":8,"post_id":20},{"tag_id":7,"post_id":20},{"tag_id":6,"post_id":53},{"tag_id":6,"post_id":61},{"tag_id":12,"post_id":61},{"tag_id":14,"post_id":70},{"tag_id":13,"post_id":70},{"tag_id":16,"post_id":80},{"tag_id":15,"post_id":80},{"tag_id":17,"post_id":80},{"tag_id":18,"post_id":102},{"tag_id":19,"post_id":102},{"tag_id":25,"post_id":105},{"tag_id":24,"post_id":105},{"tag_id":23,"post_id":105},{"tag_id":21,"post_id":105},{"tag_id":22,"post_id":105},{"tag_id":20,"post_id":105},{"tag_id":18,"post_id":139},{"tag_id":7,"post_id":139},{"tag_id":29,"post_id":201},{"tag_id":18,"post_id":201},{"tag_id":7,"post_id":201},{"tag_id":30,"post_id":176},{"tag_id":19,"post_id":176},{"tag_id":7,"post_id":274},{"tag_id":37,"post_id":282},{"tag_id":39,"post_id":282},{"tag_id":34,"post_id":334},{"tag_id":29,"post_id":334},{"tag_id":35,"post_id":334},{"tag_id":5,"post_id":250},{"tag_id":31,"post_id":250},{"tag_id":32,"post_id":325},{"tag_id":29,"post_id":325},{"tag_id":40,"post_id":404},{"tag_id":31,"post_id":404},{"tag_id":41,"post_id":416},{"tag_id":43,"post_id":416},{"tag_id":42,"post_id":416},{"tag_id":44,"post_id":435},{"tag_id":16,"post_id":594},{"tag_id":56,"post_id":594},{"tag_id":57,"post_id":605},{"tag_id":5,"post_id":605},{"tag_id":24,"post_id":605},{"tag_id":23,"post_id":605},{"tag_id":21,"post_id":605},{"tag_id":58,"post_id":651},{"tag_id":59,"post_id":657},{"tag_id":63,"post_id":804},{"tag_id":62,"post_id":804},{"tag_id":61,"post_id":804},{"tag_id":60,"post_id":804},{"tag_id":63,"post_id":841},{"tag_id":29,"post_id":841},{"tag_id":19,"post_id":841},{"tag_id":57,"post_id":801},{"tag_id":63,"post_id":801},{"tag_id":59,"post_id":801},{"tag_id":60,"post_id":801},{"tag_id":44,"post_id":922},{"tag_id":64,"post_id":922},{"tag_id":5,"post_id":1042},{"tag_id":65,"post_id":1042},{"tag_id":31,"post_id":1042},{"tag_id":66,"post_id":1022},{"tag_id":67,"post_id":1022},{"tag_id":44,"post_id":1022},{"tag_id":64,"post_id":1022},{"tag_id":34,"post_id":1086},{"tag_id":68,"post_id":1086},{"tag_id":69,"post_id":1086},{"tag_id":29,"post_id":1086},{"tag_id":67,"post_id":1086},{"tag_id":35,"post_id":1086},{"tag_id":71,"post_id":1086},{"tag_id":7,"post_id":1086},{"tag_id":70,"post_id":1086},{"tag_id":59,"post_id":1121},{"tag_id":72,"post_id":1121},{"tag_id":73,"post_id":1121},{"tag_id":75,"post_id":1149},{"tag_id":76,"post_id":1149},{"tag_id":74,"post_id":1149},{"tag_id":77,"post_id":1154},{"tag_id":79,"post_id":1154},{"tag_id":39,"post_id":1154},{"tag_id":42,"post_id":1154},{"tag_id":78,"post_id":1154},{"tag_id":68,"post_id":1162},{"tag_id":80,"post_id":1162},{"tag_id":19,"post_id":1162},{"tag_id":42,"post_id":1162},{"tag_id":81,"post_id":1167},{"tag_id":19,"post_id":1167},{"tag_id":42,"post_id":1167},{"tag_id":82,"post_id":1176},{"tag_id":84,"post_id":1186},{"tag_id":83,"post_id":1186},{"tag_id":30,"post_id":1242},{"tag_id":19,"post_id":1242},{"tag_id":34,"post_id":1200},{"tag_id":29,"post_id":1200},{"tag_id":56,"post_id":1200},{"tag_id":19,"post_id":1200},{"tag_id":85,"post_id":1200},{"tag_id":43,"post_id":1230},{"tag_id":57,"post_id":1303},{"tag_id":16,"post_id":1303},{"tag_id":59,"post_id":1303},{"tag_id":67,"post_id":1303},{"tag_id":31,"post_id":1303},{"tag_id":86,"post_id":1329},{"tag_id":87,"post_id":1329},{"tag_id":65,"post_id":1329},{"tag_id":88,"post_id":1249},{"tag_id":5,"post_id":1249},{"tag_id":65,"post_id":1249},{"tag_id":90,"post_id":1382},{"tag_id":29,"post_id":1382},{"tag_id":89,"post_id":1382},{"tag_id":44,"post_id":1382},{"tag_id":7,"post_id":1382},{"tag_id":87,"post_id":1454},{"tag_id":65,"post_id":1454},{"tag_id":63,"post_id":1467},{"tag_id":66,"post_id":1467},{"tag_id":89,"post_id":1467},{"tag_id":91,"post_id":1421},{"tag_id":44,"post_id":1421},{"tag_id":30,"post_id":1535},{"tag_id":74,"post_id":1535},{"tag_id":92,"post_id":1552},{"tag_id":44,"post_id":1552},{"tag_id":93,"post_id":1552},{"tag_id":94,"post_id":1594},{"tag_id":65,"post_id":1594},{"tag_id":95,"post_id":1627},{"tag_id":97,"post_id":1627},{"tag_id":96,"post_id":1627},{"tag_id":8,"post_id":1695},{"tag_id":98,"post_id":1695},{"tag_id":19,"post_id":1695},{"tag_id":7,"post_id":1695},{"tag_id":5,"post_id":1789},{"tag_id":65,"post_id":1789},{"tag_id":35,"post_id":1789},{"tag_id":5,"post_id":1856},{"tag_id":25,"post_id":1856},{"tag_id":65,"post_id":1856},{"tag_id":31,"post_id":1856},{"tag_id":32,"post_id":1939},{"tag_id":29,"post_id":1939},{"tag_id":100,"post_id":1939},{"tag_id":99,"post_id":1929},{"tag_id":44,"post_id":1929},{"tag_id":64,"post_id":1929},{"tag_id":59,"post_id":1619},{"tag_id":102,"post_id":1619},{"tag_id":103,"post_id":1619},{"tag_id":5,"post_id":2096},{"tag_id":104,"post_id":2118},{"tag_id":104,"post_id":2154},{"tag_id":67,"post_id":2154},{"tag_id":44,"post_id":2154},{"tag_id":64,"post_id":2154},{"tag_id":93,"post_id":2154},{"tag_id":105,"post_id":2192},{"tag_id":44,"post_id":2192},{"tag_id":106,"post_id":2156},{"tag_id":107,"post_id":2156},{"tag_id":43,"post_id":2156},{"tag_id":16,"post_id":2260},{"tag_id":68,"post_id":2260},{"tag_id":56,"post_id":2260},{"tag_id":42,"post_id":2260},{"tag_id":57,"post_id":2276},{"tag_id":16,"post_id":2276},{"tag_id":32,"post_id":2276},{"tag_id":25,"post_id":2276},{"tag_id":109,"post_id":2276},{"tag_id":108,"post_id":2276},{"tag_id":110,"post_id":2368},{"tag_id":44,"post_id":2368},{"tag_id":113,"post_id":2401},{"tag_id":112,"post_id":2401},{"tag_id":44,"post_id":2401},{"tag_id":111,"post_id":2401},{"tag_id":44,"post_id":2460},{"tag_id":64,"post_id":2460},{"tag_id":93,"post_id":2460},{"tag_id":101,"post_id":2038},{"tag_id":44,"post_id":2038},{"tag_id":57,"post_id":2616},{"tag_id":59,"post_id":2616},{"tag_id":89,"post_id":2616},{"tag_id":119,"post_id":2616},{"tag_id":121,"post_id":2704},{"tag_id":67,"post_id":2704},{"tag_id":120,"post_id":2704},{"tag_id":44,"post_id":2704},{"tag_id":29,"post_id":2817},{"tag_id":122,"post_id":2817},{"tag_id":65,"post_id":2817},{"tag_id":67,"post_id":2817},{"tag_id":125,"post_id":2870},{"tag_id":44,"post_id":2870},{"tag_id":124,"post_id":2870},{"tag_id":44,"post_id":2896},{"tag_id":126,"post_id":2896},{"tag_id":16,"post_id":2959},{"tag_id":17,"post_id":2959},{"tag_id":44,"post_id":3005},{"tag_id":64,"post_id":3005},{"tag_id":127,"post_id":3005},{"tag_id":16,"post_id":3264},{"tag_id":34,"post_id":3149},{"tag_id":63,"post_id":3149},{"tag_id":128,"post_id":3149},{"tag_id":29,"post_id":3149},{"tag_id":44,"post_id":3149},{"tag_id":35,"post_id":3149},{"tag_id":130,"post_id":3318},{"tag_id":129,"post_id":3318},{"tag_id":132,"post_id":3318},{"tag_id":131,"post_id":3318},{"tag_id":206,"post_id":3500},{"tag_id":34,"post_id":3500},{"tag_id":207,"post_id":3500},{"tag_id":205,"post_id":3500},{"tag_id":29,"post_id":3500},{"tag_id":101,"post_id":3516},{"tag_id":208,"post_id":3516},{"tag_id":44,"post_id":3516},{"tag_id":209,"post_id":3493},{"tag_id":29,"post_id":3493},{"tag_id":42,"post_id":3578},{"tag_id":210,"post_id":3531},{"tag_id":63,"post_id":3531},{"tag_id":66,"post_id":3531},{"tag_id":89,"post_id":3531},{"tag_id":44,"post_id":3531},{"tag_id":212,"post_id":3623},{"tag_id":44,"post_id":3623},{"tag_id":211,"post_id":3623},{"tag_id":213,"post_id":3662},{"tag_id":30,"post_id":2456},{"tag_id":44,"post_id":2456},{"tag_id":74,"post_id":2456},{"tag_id":57,"post_id":3671},{"tag_id":59,"post_id":3671},{"tag_id":64,"post_id":3733},{"tag_id":93,"post_id":3733},{"tag_id":214,"post_id":3733},{"tag_id":215,"post_id":3852},{"tag_id":59,"post_id":3891},{"tag_id":129,"post_id":3891},{"tag_id":59,"post_id":3905},{"tag_id":129,"post_id":3905},{"tag_id":14,"post_id":3943},{"tag_id":13,"post_id":3943}],"users":[{"id":1,"slug":"admin","bio":false,"website":"","created_at":"Tue, 18 Oct 2011 03:15:58 +0000","created_by":1,"email":"admin@fernetjs.com","name":"admin"},{"id":55,"slug":"alejonext","bio":"No soy Ingeniero, pero aprend\u00ed a programar por mi papa. Y Como entusiasta me gusto mucho JavaScript, y me gusta mucho por que se puede aplicar en tanto en Servidor como en Cliente.","website":"","created_at":"Mon, 28 Jan 2013 01:15:45 +0000","created_by":1,"email":"alejonext@gmail.com","name":"alejonext"},{"id":224,"slug":"Andersonqi","bio":false,"website":"","created_at":"Tue, 03 Sep 2013 00:01:25 +0000","created_by":1,"email":"anderson.quezada6@gmail.com","name":"andersonqi"},{"id":85,"slug":"arodriguez","bio":false,"website":"","created_at":"Tue, 16 Apr 2013 15:04:10 +0000","created_by":1,"email":"agustn.rodriguez@gmail.com","name":"arodriguez"},{"id":77,"slug":"BunddeleD","bio":false,"website":"","created_at":"Sat, 16 Mar 2013 22:55:16 +0000","created_by":1,"email":"olesya.turbina@gmail.com","name":"bunddeled"},{"id":61,"slug":"Canariofr1","bio":false,"website":"","created_at":"Mon, 18 Feb 2013 13:01:13 +0000","created_by":1,"email":"andreselviralanzarote@gmail.com","name":"canariofr1"},{"id":86,"slug":"cblatter","bio":false,"website":"","created_at":"Wed, 17 Apr 2013 19:01:42 +0000","created_by":1,"email":"claudia.blatter@gmail.com","name":"cblatter"},{"id":179,"slug":"cesijqrs","bio":false,"website":"","created_at":"Mon, 29 Jul 2013 08:44:03 +0000","created_by":1,"email":"boisso10@hotmail.com","name":"cesijqrs"},{"id":243,"slug":"ChristianBaumga","bio":false,"website":"","created_at":"Thu, 19 Sep 2013 15:52:27 +0000","created_by":1,"email":"rebecacalzadilla@live.com","name":"christianbaumga"},{"id":66,"slug":"diegof79","bio":false,"website":"","created_at":"Tue, 26 Feb 2013 15:41:44 +0000","created_by":1,"email":"diegof79@gmail.com","name":"diegof79"},{"id":13,"slug":"dzajdband","bio":false,"website":"","created_at":"Tue, 05 Jun 2012 19:49:15 +0000","created_by":1,"email":"dan.zajdband@gmail.com","name":"dzajdband"},{"id":16,"slug":"Fernet 1882","bio":"Todo comenz\u00f3 en el siglo XIX, con un sue\u00f1o: el sue\u00f1o de un mundo diferente, grande. Un mundo en el que el fernet no es s\u00f3lo una bebida, sino una forma de vida. Porque en cada trago, adem\u00e1s de co","website":"http:\/\/fernet1882.com\/kits\/vaso-perfecto\/","created_at":"Wed, 08 Aug 2012 14:56:11 +0000","created_by":1,"email":"fiestas@fernet1882.com","name":"fernet-1882"},{"id":30,"slug":"ferrod20","bio":false,"website":"","created_at":"Mon, 29 Oct 2012 17:52:53 +0000","created_by":1,"email":"ferrod20@gmail.com","name":"ferrod20"},{"id":38,"slug":"ftolosa","bio":false,"website":"","created_at":"Tue, 04 Dec 2012 17:55:05 +0000","created_by":1,"email":"favioetolosa@gmail.com","name":"ftolosa"},{"id":112,"slug":"gonzalp","bio":false,"website":"","created_at":"Tue, 04 Jun 2013 12:34:30 +0000","created_by":1,"email":"chotilp@gmail.com","name":"gonzalp"},{"id":272,"slug":"gustavenn","bio":false,"website":"","created_at":"Wed, 16 Oct 2013 21:16:53 +0000","created_by":1,"email":"gustavo.giorda@gmail.com","name":"gustavenn"},{"id":39,"slug":"hmariod","bio":false,"website":"","created_at":"Tue, 04 Dec 2012 22:27:45 +0000","created_by":1,"email":"hmariod@gmail.com","name":"hmariod"},{"id":20,"slug":"Ignacio Rivas","bio":"Developer, Student, Musician, Redditor, Blogger, Gamer, Techie, ForeverAlone.","website":"http:\/\/sabarasaba.github.com\/","created_at":"Tue, 18 Sep 2012 22:16:37 +0000","created_by":1,"email":"rivasign@gmail.com","name":"ignacio-rivas"},{"id":53,"slug":"javier1nc","bio":false,"website":"","created_at":"Wed, 23 Jan 2013 04:52:25 +0000","created_by":1,"email":"javier.inc@gmail.com","name":"javier1nc"},{"id":5,"slug":"jurgen","bio":false,"website":"","created_at":"Fri, 21 Oct 2011 23:16:42 +0000","created_by":1,"email":"altierijorge@gmail.com","name":"jurgen"},{"id":52,"slug":"leandro","bio":false,"website":"","created_at":"Tue, 22 Jan 2013 15:12:30 +0000","created_by":1,"email":"leaocabrera@gmail.com","name":"leandro"},{"id":21,"slug":"leito","bio":false,"website":"","created_at":"Thu, 20 Sep 2012 13:01:23 +0000","created_by":1,"email":"leonardo.deseta@ideasagiles.com","name":"leito"},{"id":4,"slug":"luckas","bio":false,"website":"","created_at":"Fri, 21 Oct 2011 23:15:54 +0000","created_by":1,"email":"romero.lucas@gmail.com","name":"luckas"},{"id":101,"slug":"maku_fox","bio":false,"website":"","created_at":"Tue, 21 May 2013 15:06:21 +0000","created_by":1,"email":"garciav.abraham@gmail.com","name":"maku_fox"},{"id":81,"slug":"matesnake","bio":false,"website":"","created_at":"Fri, 22 Mar 2013 23:07:40 +0000","created_by":1,"email":"matesnake@gmail.com","name":"matesnake"},{"id":2,"slug":"matias-a","bio":false,"website":"","created_at":"Tue, 18 Oct 2011 03:45:23 +0000","created_by":1,"email":"matias.arriola@fernetjs.com","name":"matias-a"},{"id":27,"slug":"maxidr","bio":false,"website":"","created_at":"Wed, 10 Oct 2012 21:36:04 +0000","created_by":1,"email":"maxidr@gmail.com","name":"maxidr"},{"id":164,"slug":"MelindaMontero","bio":false,"website":"","created_at":"Fri, 19 Jul 2013 09:53:51 +0000","created_by":1,"email":"leonasde@hotmail.com","name":"melindamontero"},{"id":202,"slug":"nbaglivo","bio":false,"website":"","created_at":"Wed, 21 Aug 2013 03:41:58 +0000","created_by":1,"email":"nicolas.baglivo@gmail.com","name":"nbaglivo"},{"id":301,"slug":"normancarcamo","bio":false,"website":"","created_at":"Sun, 17 Aug 2014 19:12:55 +0000","created_by":1,"email":"normancarcamo@gmail.com","name":"normancarcamo"},{"id":6,"slug":"osebas","bio":false,"website":"","created_at":"Fri, 11 Nov 2011 00:51:09 +0000","created_by":1,"email":"sebaolaizola@gmail.com","name":"osebas"},{"id":41,"slug":"pelicanorojo","bio":false,"website":"","created_at":"Wed, 12 Dec 2012 17:04:27 +0000","created_by":1,"email":"bioingbenito@gmail.com","name":"pelicanorojo"},{"id":17,"slug":"pepo","bio":false,"website":"","created_at":"Mon, 13 Aug 2012 13:04:43 +0000","created_by":1,"email":"pepoviola@gmail.com","name":"pepo"},{"id":73,"slug":"pixelbeat","bio":false,"website":"","created_at":"Tue, 12 Mar 2013 02:47:03 +0000","created_by":1,"email":"davidgalavotti@gmail.com","name":"pixelbeat"},{"id":3,"slug":"pjnovas","bio":"Desarrollador de Software | web UI &amp; UX fan | pasion por javascript | entusiasta de node.js","website":"","created_at":"Tue, 18 Oct 2011 13:00:55 +0000","created_by":1,"email":"pjnovas@gmail.com","name":"pjnovas"},{"id":75,"slug":"tehsis","bio":false,"website":"http:\/\/tehsis.com.ar","created_at":"Fri, 15 Mar 2013 22:29:17 +0000","created_by":1,"email":"tehsis@gmail.com","name":"tehsis"}]},"meta":{"exported_on":"Wed, 05 Nov 2014 01:18:11 +0000","version":"000"}}